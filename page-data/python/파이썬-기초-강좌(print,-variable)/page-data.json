{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/파이썬-기초-강좌(print,-variable)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"5afe5589-be1e-516c-b090-a977ab0e419e","excerpt":"print variables type(variable) : variable의 자료형 보여주는 함수 x=y=z=100 : 동시선언 가능 위 print구문이 내부적으로 300이라는 값을 출력하는 과정은 300 에 맞는 Object(<class ‘int’>)를 생성 하고 값을 생성하고(int(300)) 이 값을 출력 한다. 그리고 변수 생성도 이와 같은 절차를 거친다. id(identity…","html":"<h2 id=\"print\"><a href=\"#print\" aria-label=\"print permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>print</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 개행처리</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'my'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hi my</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'my'</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hi-my, join() 느낌</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hi my, 개행을 '값'으로 합쳐줌</span>\n\n<span class=\"token comment\"># d(digit) : 정수, s(string), f(float)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># one two</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{} {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># one two, {}는 뭐가 들어올거라~ 생각하면 된다.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{1} {0}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># two one, {}가 비어있으면 0이라고 생각 >, index 개념</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nice'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># '      nice', 10자리 string</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{:>10}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#'      nice', 왼쪽에 10자리 할당 위랑 같음.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{:10}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#'nice.     ' default는 왼쪽</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{:10d}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">422222222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 문자가 아니라면 형 붙여줘야해</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{:^10}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#'   nice.  ', 중앙정렬은 ^</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"variables\"><a href=\"#variables\" aria-label=\"variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>variables</h2>\n<ul>\n<li><code>type(variable)</code> : variable의 자료형 보여주는 함수</li>\n<li><code>x=y=z=100</code> : 동시선언 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#Object references</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 300</span></code></pre></div>\n<ul>\n<li>위 print구문이 내부적으로 300이라는 값을 출력하는 과정은 300 에 맞는 <strong>Object(<code>&#x3C;class ‘int’></code>)를 생성</strong> 하고 <strong>값을 생성하고(<code>int(300)</code>)</strong> 이 값을 출력 한다. 그리고 변수 생성도 이와 같은 절차를 거친다.</li>\n<li><strong><code>id(identity)</code></strong> : 객체에 할당된 고유값 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">m <span class=\"token operator\">=</span> <span class=\"token number\">800</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">600</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4561360016</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4561360048</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n\nm <span class=\"token operator\">=</span> <span class=\"token number\">800</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">800</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4561360016</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 4561360016</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>두번째 예제의 경우,  <strong>변수에 똑같은 값을 할당 해주면 객체는 하나만 존재하게 된다 즉, 보기에는 2개의 변수를 선언한 것 같지만 사실 하나의 변수만 선언한 것이다.</strong>  (같은 Object를 참조한다는 말. 파이썬 엔진이 내부적으로 처리)</p>\n<ul>\n<li>\n<p>다양한 변수 선언</p>\n<ul>\n<li>Camel Case : 소문자로 시작, 다음 단아에서 대문자 (<code>exampleCase</code>), 주로 Method 선언할 때 사용</li>\n<li>Pascal Case : 대문자로 시작, 다음 단어에서도 대문자(<code>ExampleCase</code>), 주로 Class 선언할 때 사용</li>\n<li>Snake Case : 전부 소문자로 시작, 이어지는 단어를 _ 로 붙여줌 ( <code>example_case</code>), 주로 variable 선언할 때 사용( 파이썬에서 많이 사용)</li>\n<li>첫글자가 숫자나 특수문자 사용시 변수 선언 불가능. (단, 특수문자에서 _ 와 $ 는 가능)</li>\n<li>예약어는 변수로 선언 불가능 ( 예를들어 for문의 for는 변수명으로 선언 불가능 )</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"파이썬 기초 강좌(print, variable)","date":"November 09, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/파이썬-기초-강좌(print,-variable)/","previous":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(shell)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(Shell)","category":"linux"}},"next":{"fields":{"slug":"/python/파이썬-기초-강좌(자료형-숫자형)/"},"frontmatter":{"title":"파이썬 기초 강좌(자료형-숫자형)","category":"python"}}}}}