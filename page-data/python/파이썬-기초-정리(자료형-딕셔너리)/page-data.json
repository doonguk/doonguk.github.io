{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/파이썬-기초-정리(자료형-딕셔너리)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"86738cc0-1cc7-59dc-93dc-81e9c7abaf78","excerpt":"딕셔너리 범용적으로 가장 많이 사용! ( JSON 과 비슷 ) 딕셔너리 자료형은 순서X, 키 중복X, 수정O, 삭제O 선언 자주 쓰이는 형태는 아니지만 dict() 함수 안에 리스트를 넣고 그 안에 원소로 key와 value를 갖는 튜플을 넣어주면 딕셔너리 선언이 가능하다. 또 다른 방법으로는 위와 같은 방법이 있다. ( 이게 가장 편한듯 ) 출력 key name 을 이용하여 값을 가져오는 방법과 get(key name) 의 차이점은   는 없는 key 값에 접근시 error…","html":"<h2 id=\"딕셔너리\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\" aria-label=\"딕셔너리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리</h2>\n<blockquote>\n<p>범용적으로 가장 많이 사용! ( JSON 과 비슷 )</p>\n<p>딕셔너리 자료형은 순서X, 키 중복X, 수정O, 삭제O</p>\n</blockquote>\n<h3 id=\"선언\"><a href=\"#%EC%84%A0%EC%96%B8\" aria-label=\"선언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'01029394123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'birth'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'20199999'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\"># key 와 value로 이루어짐</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello Python'</span> <span class=\"token punctuation\">}</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'arr'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'city'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Seoul'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Age'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'grade'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'status'</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'dict'></span></code></pre></div>\n<p>자주 쓰이는 형태는 아니지만</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">e <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 튜플이니까 : 를 , 로 바꿔줘야함</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'Seoul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>dict()</code> 함수 안에 리스트를 넣고 그 안에 원소로 key와 value를 갖는 튜플을 넣어주면 딕셔너리 선언이 가능하다.</p>\n<p>또 다른 방법으로는</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\n  city <span class=\"token operator\">=</span> <span class=\"token string\">'Seoul'</span><span class=\"token punctuation\">,</span>\n  age <span class=\"token operator\">=</span> <span class=\"token number\">33</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 방법이 있다. ( 이게 가장 편한듯 )</p>\n<h3 id=\"출력\"><a href=\"#%EC%B6%9C%EB%A0%A5\" aria-label=\"출력 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'01029394123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'birth'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'20199999'</span> <span class=\"token punctuation\">}</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello Python'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'kim'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'kim'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Hello Python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Hello Python'</span></code></pre></div>\n<p><code>[key name]</code> 을 이용하여 값을 가져오는 방법과 <code>get(key name)</code> 의 차이점은</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token string\">'namename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># key error</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'namename'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># none</span></code></pre></div>\n<p>[ ] 는 없는 key 값에 접근시 error를 발생 시키지만 <code>get()</code> 함수는 none 을 리턴한다. ( get()을 사용하는게 좀 더 안전 하다. )</p>\n<h3 id=\"딕셔너리-추가\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%B6%94%EA%B0%80\" aria-label=\"딕셔너리 추가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리 추가</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span> <span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'seoul'</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 'name' : 'kim', 'address' : 'seoul'}</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'jeonju'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 'name' : 'kim', 'address' : 'jeonju' }</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2, 딕셔너리에서 len()는 key의 개수를 계산한다.</span></code></pre></div>\n<p>딕셔너리의 추가는 속성 값으로 접근하여 value를 지정해 주면 된다. 만약 기존에 있는 속성 값에 접근하면 그 속성의 값이 수정된다.</p>\n<p>하지만 수정 할 때에는 <code>update()</code> 함수를 사용하자! ( 아래 참고 )</p>\n<h3 id=\"딕셔너리-함수\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%ED%95%A8%EC%88%98\" aria-label=\"딕셔너리 함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리 함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#dict_keys, dict_values, dict_items 는 반복문(__iter__) 사용 가능하다.</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'address'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'jeonju'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># dict_keys(['name', 'address'])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['name', 'address']</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># dict_values(['kim','jeonju'])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['kim','jeonju']</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># dict_items([('name','kim'), ('address','jeonju')])</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [('name','kim'), ('address','jeonju')]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'kim'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 'address' : 'jeonju' } , pop은 원본을 수정한다.</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># {}</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'address'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'jeonju'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\"># 재선언</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>popitem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ('address','jeonju') , 무작위로 꺼내온다 ( 튜플 형태로 )</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'address'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'jeonju'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'birth'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'20191010'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'birth'</span> <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True , a에 'birth'라는 key가 있는지 따짐</span>\n\na<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>age<span class=\"token operator\">=</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 문법적으로 딕셔너리를 수정하는 함수</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 'name' : 'kim', 'address' : 'jeonju', 'age' : '123' }</span>\na<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>age<span class=\"token operator\">=</span><span class=\"token string\">'456'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># { 'name' : 'kim', 'address' : 'jeonju', 'age' : '456' }</span></code></pre></div>\n<ul>\n<li><code>dict.keys()</code> : Key 값들을 반환하는 함수 </li>\n<li><code>dict.values()</code> : Value 값들을 반환하는 함수 </li>\n<li><code>dict.items()</code> : Key와 Value 모두를 튜플 형태로 반환하는 함수</li>\n<li><code>dict.pop(key name)</code> : 딕셔너리에서 key name에 해당하는 value를 리턴하고 원본 딕셔너리를 수정한다.</li>\n<li><code>dict.popitem()</code> : 딕셔너리에서 무작위( 딕셔너리는 순서가 없기 때문에) 로 key, value 한 쌍을 꺼내온다. 원본 배열을 수정하고 만약 꺼내올 아이템이 없다면 예외가 발생한다.</li>\n<li><code>value in dict</code> : 딕셔너리에 value라는 key가 있으면 True 없으면 False</li>\n<li><code>dict.update(key=value)</code> : 딕셔너리에 값을 추가( 만약 key가 없으면 추가 )하거나 해당 key값을 수정한다.</li>\n</ul>","frontmatter":{"title":"파이썬 기초 정리(자료형-딕셔너리)","date":"November 20, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/파이썬-기초-정리(자료형-딕셔너리)/","previous":{"fields":{"slug":"/python/파이썬-기초-정리(자료형-튜플)/"},"frontmatter":{"title":"파이썬 기초 정리(자료형-튜플)","category":"python"}},"next":{"fields":{"slug":"/FP/함수형-프로그래밍(평가,일급,고차함수)/"},"frontmatter":{"title":"함수형 프로그래밍(평가,일급,고차함수)","category":"FP"}}}}}