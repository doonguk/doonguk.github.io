{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/파이썬-기초-정리(문자열)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"d5578fad-40ae-556c-bd3e-a03db9594f31","excerpt":"문자열 len() : 문자열의 길이를 구할 때 사용 빈 문자열을 선언할 때 str() 사용하자 \\ : 이스케이프 문자열, 자주 사용하는 이스케이프 문자열은 \\n ( 개행 처리 ), \\t( tab 처리 )  Raw string ( r’ ’ )은 이스케이프 문자열을 있는 그대로 출력. Python에서 = 뒤에오는 \\ 는 변수에 값을 바인딩 한다는 의미 문자열 연산 문자열의 곱하기는 문자열에 해당 정수형 만큼 반복 a in b : in 은 a가 b에 포함 됐는지 따짐. 시퀀스 자료형은 in…","html":"<h3 id=\"문자열\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"문자열 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">str1 <span class=\"token operator\">=</span> <span class=\"token string\">'I am python'</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span>\nstr3 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"How are you?\"\"\"</span>\nstr4 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''Thank you'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'str'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 11 6 12 10</span>\n\n<span class=\"token comment\">#빈 문자열</span>\nstr_t1 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nstr_t2 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>str_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'str'> 0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>str_t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'str'> 0</span>\n\n<span class=\"token comment\">#이스케이프 문자열</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm boy\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># I'm boy</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span>m boy'<span class=\"token punctuation\">)</span> <span class=\"token comment\"># error</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I\\'m boy'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># I'm boy, \\를 사용하여 이스케이프</span>\n\n<span class=\"token comment\">#Raw string</span>\nstr_raw <span class=\"token operator\">=</span> <span class=\"token string\">r'Hi \\t my name is donguk'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_raw<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Hi \\t my name is donguk, 이스케이프 문자열을 있는 그대로 출력</span></code></pre></div>\n<ul>\n<li><code>len()</code> : 문자열의 길이를 구할 때 사용</li>\n<li>빈 문자열을 선언할 때 <strong><code>str()</code></strong> 사용하자</li>\n<li>\\ : 이스케이프 문자열, 자주 사용하는 이스케이프 문자열은 \\n ( 개행 처리 ), \\t( tab 처리 ) </li>\n<li>Raw string ( <code>r’ ’</code> )은 이스케이프 문자열을 있는 그대로 출력.</li>\n<li>Python에서 = 뒤에오는 \\ 는 변수에 값을 바인딩 한다는 의미</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#Multi line</span>\nstr_multi <span class=\"token operator\">=</span> \\\n<span class=\"token triple-quoted-string string\">''' # '''</span>또는 <span class=\"token string\">\"\"</span>\"\nHi multi line\n<span class=\"token string\">''</span>'\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_multi<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Hi multi line</span></code></pre></div>\n<h3 id=\"문자열-연산\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%B0%EC%82%B0\" aria-label=\"문자열 연산 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 연산</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">str_o1 <span class=\"token operator\">=</span> <span class=\"token string\">'Python'</span>\nstr_o2 <span class=\"token operator\">=</span> <span class=\"token string\">'Apple'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_o1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># PythonPythonPython</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_o1 <span class=\"token operator\">+</span> str_o2<span class=\"token punctuation\">)</span> <span class=\"token comment\"># PythonApple</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Python 문자열에 y가 있어?  > True</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'Apple'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># in은 대소문자를 구분한다. > True</span></code></pre></div>\n<ul>\n<li>문자열의 <strong>곱하기</strong>는 문자열에 해당 정수형 만큼 <strong>반복</strong></li>\n<li><code>a in b</code> : in 은 a가 b에 포함 됐는지 따짐. <strong>시퀀스 자료형은 <code>in</code> 사용 가능</strong> </li>\n<li>반대로 <code>a not in b</code> 는 없는지 따짐</li>\n</ul>\n<h3 id=\"문자열-형-변환\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%98%95-%EB%B3%80%ED%99%98\" aria-label=\"문자열 형 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 형 변환</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 66 &lt;class 'str'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True &lt;class 'str'></span></code></pre></div>\n<ul>\n<li><code>str( someting variable )</code> : 문자열로 형 변환 </li>\n</ul>\n<h3 id=\"문자열-함수--일부만-\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%95%A8%EC%88%98--%EC%9D%BC%EB%B6%80%EB%A7%8C-\" aria-label=\"문자열 함수  일부만  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 함수 ( 일부만 )</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">str_o1 <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Python</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'thon'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># pygood</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['p', 'h', 'n', 'o', 't', 'y']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['p', 'thon']</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;reversed object at 0x1071292d0>, reversed 객체를 반환</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ['n', 'o', 'h', 't', 'y', 'p']</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>str_o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># __iter__ 만 참고..</span></code></pre></div>\n<ul>\n<li><code>variable.capitalize()</code> : var의 첫번째 글자를 대문자로 변경</li>\n<li><code>variable.endsWith( variable )</code> : variable 변수의 끝이 something 으로 끝나면 True, 아니면 False</li>\n<li><code>variable.replace(a,b)</code> : variable 변수의 a 부분이 있으면 b로 변경</li>\n<li><code>sorted(variable)</code> : 문자열의 각 부분을 정렬하여 <strong>리스트 형태로 반환</strong> </li>\n<li><code>variable.split( seperator )</code> : 문자열을 seperator 기준으로 잘라서 결과를 <strong>리스트 형태로 반환</strong></li>\n<li>\n<p><code>reversed( variable )</code> :  reversed 객체 반환</p>\n<ul>\n<li>반환된 객체를 <code>list()</code> 의 인자로 전달하면 순서가 거꾸로 바뀐 variable 을 <strong>리스트 형태로 반환</strong></li>\n<li>반환된 객체를 <code>tuple()</code> 의 인자로 전달하면 순서가 거꾸로 바뀐 variable 을 <strong>튜플 형태로 반환</strong></li>\n<li>참고! <code>&#x3C;class ‘list’>.reverse()</code> reverse() 함수는 list 타입 에서만 제공하는 함수이다. ( list 순서를 거꾸로 리턴)</li>\n</ul>\n</li>\n<li>\n<p><code>dir(variable)</code> : 정의된 모듈의 이름이 리스트 형태로 반환. 반환된 리스트의 인자로 <strong><code><em>iter</em></code> 가 있다면 이 변수는 시퀀스 이다.</strong> </p>\n<ul>\n<li>문자열은 시퀀스다. 따라서 for문 사용 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> str_o1 <span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 한 글자씩 출력</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"문자열-슬라이싱\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%8A%AC%EB%9D%BC%EC%9D%B4%EC%8B%B1\" aria-label=\"문자열 슬라이싱 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 슬라이싱</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">str_s1 <span class=\"token operator\">=</span> <span class=\"token string\">'Nice Python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># index 0 부터 index 3-1 가지 슬라이싱 > 'Nic'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Python'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Nice Python'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'ython'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'ice Pyth'</span></code></pre></div>\n<ul>\n<li>\n<p><code>variable[startIndex : endIndex : jumpCount]</code> : variable을 startIndex 부터 endIndex-1 까지  slice 한다.</p>\n<ul>\n<li>endIndex를 생략하면 끝까지 계산한다.</li>\n<li>startIndex를 생략하면 처음부터 가져온다.</li>\n<li>jimpCount가 있다면 jumpCount 만큼 뛰어서 계산한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Nc yhn'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'Nc yhn'</span></code></pre></div>\n</li>\n<li>index가 음수로 오면 끝에서 부터 계산한다 ( 마지막이 -1 )</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># -1 이니까 순서가 역순으로 됌 > 'nohtyP eciN' ( 문자열 순서 바꿀 때 사용하면 좋을까? )</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str_s1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'nhy cN'</span></code></pre></div>\n<h3 id=\"아스키-코드-또는-유니코드-\"><a href=\"#%EC%95%84%EC%8A%A4%ED%82%A4-%EC%BD%94%EB%93%9C-%EB%98%90%EB%8A%94-%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-\" aria-label=\"아스키 코드 또는 유니코드  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아스키 코드( 또는 유니코드 )</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">'z'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 122</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 'z'</span></code></pre></div>\n<p>파이선 인터프리터가 아스키 코드를 참고하여 문자열로 처리하여 화면에 문자로 표시.</p>\n<ul>\n<li><code>ord( variable )</code> : variable의 아스키 코드 값 리턴</li>\n<li><code>chr( 아스키코드 값 ) </code> : 아스키코드에 해당하는 문자 리턴</li>\n</ul>","frontmatter":{"title":"파이썬 기초 정리(자료형-문자열)","date":"November 17, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/파이썬-기초-정리(문자열)/","previous":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(group)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(Group)","category":"linux"}},"next":{"fields":{"slug":"/python/파이썬-기초-정리(리스트)/"},"frontmatter":{"title":"파이썬 기초 정리(자료형-리스트)","category":"python"}}}}}