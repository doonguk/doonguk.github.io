{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/20200306-알고리즘/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"61e7f45c-1bed-599d-bfa7-50c25a2b1de6","excerpt":"1. 증가수열 만들기 1부터 N까지의 자연수로 구성된 길이 N의 수열이 주어집니다.\n 이 수열의 왼쪽 맨 끝 숫자 또는 오른쪽 맨 끝 숫자 중 하나를 가져와 나열하여 가장 긴 증가수열 을 만듭니다.\n 예를 들어 2 4 5 1 3 이 주어지면 만들 수 있는 가장 긴 증가수열의 길이는 4입니다.\n 맨 처음 왼쪽 끝에서 2를 가져오고, 그 다음 오른쪽 끝에서 3을 가져오고, 왼쪽 끝에서 4, 왼쪽끝에서5를가져와 2345증가수열을만들수있습니다. ▣ 입력설명\n 첫째 줄에 자연수 N(3<=N<=10…","html":"<h3 id=\"1-증가수열-만들기\"><a href=\"#1-%EC%A6%9D%EA%B0%80%EC%88%98%EC%97%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"1 증가수열 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 증가수열 만들기</h3>\n<p>1부터 N까지의 자연수로 구성된 길이 N의 수열이 주어집니다.\n이 수열의 왼쪽 맨 끝 숫자 또는 오른쪽 맨 끝 숫자 중 하나를 가져와 나열하여 가장 긴 증가수열 을 만듭니다.\n예를 들어 2 4 5 1 3 이 주어지면 만들 수 있는 가장 긴 증가수열의 길이는 4입니다.\n맨 처음 왼쪽 끝에서 2를 가져오고, 그 다음 오른쪽 끝에서 3을 가져오고, 왼쪽 끝에서 4, 왼쪽끝에서5를가져와 2345증가수열을만들수있습니다.</p>\n<p>▣ 입력설명\n첫째 줄에 자연수 N(3&#x3C;=N&#x3C;=100)이 주어집니다. 두 번째 줄에 N개로 구성된 수열이 주어집니다.</p>\n<p>▣ 출력설명\n첫째 줄에 최대 증가수열의 길이를 출력합니다.\n두 번째 줄에 가져간 순서대로 왼쪽 끝에서 가져갔으면 ‘L’, 오른쪽 끝에서 가져갔으면 ’R’를 써 간 문자열을 출력합니다.(단 마지막에 남은 값은 왼쪽 끝으로 생각합니다.)</p>\n<p>▣ 입력예제 1 </p>\n<p>5\n2 4 5 1 3</p>\n<p>▣ 출력예제 1 </p>\n<p>4\nLRLL</p>\n<h4 id=\"solution1\"><a href=\"#solution1\" aria-label=\"solution1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution1</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input30.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nlt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nrt <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span>\nlast <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ntmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">while</span> lt <span class=\"token operator\">&lt;=</span> rt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> last<span class=\"token punctuation\">:</span>\n       tmp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> last<span class=\"token punctuation\">:</span>\n        tmp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    tmp<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">:</span>\n            lt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token string\">'L'</span>\n            last <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            rt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token string\">'R'</span>\n            last <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    tmp<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"solution2\"><a href=\"#solution2\" aria-label=\"solution2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution2</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input30.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nchar <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nlt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nrt <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span>\nlast <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> last <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> last <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        char <span class=\"token operator\">+=</span> <span class=\"token string\">'L'</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">if</span> last <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> last <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span>\n            rt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            char <span class=\"token operator\">+=</span> <span class=\"token string\">'R'</span>\n        <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span>\n            lt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            char <span class=\"token operator\">+=</span> <span class=\"token string\">'L'</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> last<span class=\"token punctuation\">:</span>\n            last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>rt<span class=\"token punctuation\">]</span>\n            rt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            char <span class=\"token operator\">+=</span> <span class=\"token string\">'R'</span>\n        <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> last<span class=\"token punctuation\">:</span>\n            last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>lt<span class=\"token punctuation\">]</span>\n            lt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            char <span class=\"token operator\">+=</span> <span class=\"token string\">'L'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-역수열\"><a href=\"#2-%EC%97%AD%EC%88%98%EC%97%B4\" aria-label=\"2 역수열 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 역수열</h3>\n<p>1부터 n까지의 수를 한 번씩만 사용하여 이루어진 수열이 있을 때, 1부터 n까지 각각의 수 앞 에 놓여 있는 자신보다 큰 수들의 개수를 수열로 표현한 것을 역수열이라 한다.</p>\n<p>예를 들어 다음과 같은 수열의 경우 </p>\n<p>4 8 6 2 5 1 3 7</p>\n<p>1앞에 놓인 1보다 큰 수는 4 8 6 2 5 이렇게 5개이고,</p>\n<p>2앞에 놓인 2보다 큰 수는 4 8 6 이렇게 3개</p>\n<p>3 앞에 놓인 3보다 큰 수는 4 8 6 5 이렇게 4개…</p>\n<p>따라서 4 8 6 2 5 1 3 7 의 역수열은 5 3 4 0 2 1 1 0 이 된다.\nn과 1부터 n까지의 수를 사용하여 이루어진 수열의 역수열이 주어졌을 때, 원래의 수열을 출 력하는 프로그램을 작성하세요.</p>\n<p>▣ 입력설명\n첫 번째 줄에 자연수 N(3&#x3C;=N&#x3C;100)이 주어지고, 두 번째 줄에는 역수열이 숫자 사이에 한</p>\n<p>칸의 공백을 두고 주어진다.</p>\n<p>▣ 출력설명 </p>\n<p>원래 수열을 출력합니다.</p>\n<p>▣ 입력예제 1</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">8</span>\n<span class=\"token number\">5</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">0</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span></code></pre></div>\n<p>▣ 출력예제 1 </p>\n<p>4 8 6 2 5 1 3 7</p>\n<h4 id=\"solution--n-부터-푸는-방법-\"><a href=\"#solution--n-%EB%B6%80%ED%84%B0-%ED%91%B8%EB%8A%94-%EB%B0%A9%EB%B2%95-\" aria-label=\"solution  n 부터 푸는 방법  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution ( n 부터 푸는 방법 )</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input31.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    res<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></code></pre></div>\n<h4 id=\"solution--1-부터-푸는-방법-\"><a href=\"#solution--1-%EB%B6%80%ED%84%B0-%ED%91%B8%EB%8A%94-%EB%B0%A9%EB%B2%95-\" aria-label=\"solution  1 부터 푸는 방법  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution ( 1 부터 푸는 방법 )</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input31.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elif</span> res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"3-가장-큰-수\"><a href=\"#3-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%88%98\" aria-label=\"3 가장 큰 수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 가장 큰 수</h3>\n<p>선생님은 현수에게 숫자 하나를 주고, 해당 숫자의 자릿수들 중 m개의 숫자를 제거하 여 가장 큰 수를 만들라고 했습니다. 여러분이 현수를 도와주세요.(단 숫자의 순서는 유지해야 합니다)\n만약 5276823 이 주어지고 3개의 자릿수를 제거한다면</p>\n<p>7823이 가장 큰 숫자가 됩니다</p>\n<p>▣ 입력설명\n첫째 줄에 숫자(길이는 1000을 넘지 않습니다)와 제가해야할 자릿수의 개수가 주어집니다.</p>\n<p>▣ 출력설명\n가장 큰 수를 출력합니다.</p>\n<p>▣ 입력예제 1 </p>\n<p>5276823 3</p>\n<p>▣ 출력예제 1</p>\n<p> 7823</p>\n<p>▣ 입력예제 2</p>\n<p> 9977252641 5</p>\n<p>▣ 출력예제 2 </p>\n<p>99776</p>\n<h4 id=\"solution\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input32.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nn<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnumbers <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    numbers<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">//=</span> <span class=\"token number\">10</span>\nstack <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> m <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">:</span>\n        stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        m <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> m <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>m<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"4-쇠막대기\"><a href=\"#4-%EC%87%A0%EB%A7%89%EB%8C%80%EA%B8%B0\" aria-label=\"4 쇠막대기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 쇠막대기</h3>\n<p>여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에 서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레 이저의 배치는 다음 조건을 만족한다.</p>\n<p>• 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.\n• 각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.\n• 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.</p>\n<p>아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/76155020-95066880-6129-11ea-9f4e-e3f1c6e6ae6e.png\" alt=\"image\"></p>\n<p>이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.</p>\n<ol>\n<li>레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반 드시 레이저를 표현한다.</li>\n<li>쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.</li>\n</ol>\n<p>위 예의 괄호 표현은 그림 위에 주어져 있다.</p>\n<p>쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.</p>\n<p>쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.</p>\n<p>▣ 입력설명\n한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의 개수는 최대 100,000이다.</p>\n<p>▣ 출력설명\n잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.</p>\n<p>▣ 입력예제 1 </p>\n<p>()(((()())(())()))(())</p>\n<p>▣  출력예제 1 </p>\n<p>17</p>\n<p>▣  입력예제 2</p>\n<p> (((()(()()))(())()))(()())</p>\n<p>▣ 출력예제 2</p>\n<p> 24</p>\n<h4 id=\"solution1-1\"><a href=\"#solution1-1\" aria-label=\"solution1 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution1</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input33.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nlasers <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstack <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lasers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> lasers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lasers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> lasers<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"solution2-1\"><a href=\"#solution2-1\" aria-label=\"solution2 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution2</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input33.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\nlasers <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstack <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nres <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> lasers<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n        cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n            cnt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            res <span class=\"token operator\">+=</span> cnt\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            cnt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>값을 참조 하는 경우에도 반복문에서 값 자체를 꺼내서 순회 하는것보다 index를 참조 하는편이 더 효율이 좋았었던 문제였다.</li>\n</ul>\n<h3 id=\"5-후위표기식-만들기\"><a href=\"#5-%ED%9B%84%EC%9C%84%ED%91%9C%EA%B8%B0%EC%8B%9D-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"5 후위표기식 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 후위표기식 만들기</h3>\n<p>중위표기식이 입력되면 후위표기식으로 변환하는 프로그램을 작성하세요.\n중위표기식은 우리가 흔히 쓰은 표현식입니다. 즉 3+5 와 같이 연산자가 피연산자 사이에 있 으면 중위표기식입니다.\n후위표기식은 35+ 와 같이 연산자가 피연산자 뒤에 있는 표기식입니다.\n예를 들어 중위표기식이 3+5<em>2 를 후위표기식으로 표현하면 352</em>+ 로 표현됩니다.\n만약 다음과 같이 연산 최우선인 괄호가 표현된 식이라면\n(3+5)<em>2 이면 35+2</em> 로 바꾸어야 합니다.</p>\n<p>※후위 표기식이 이해가 안되면 구글링으로 공부해보는 것도 좋습니다.</p>\n<p>▣ 입력설명\n첫 줄에 중위표기식이 주어진다. 길이는 100을 넘지 않는다. 식은 1~9의 숫자와 +, -, *, /, (, ) 연산자로만 이루어진다.</p>\n<p>▣ 출력설명 후위표기식을 출력한다.</p>\n<p>▣ 입력예제 1</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> <span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>▣ 출력예제 1</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"> <span class=\"token number\">352</span><span class=\"token operator\">*</span><span class=\"token number\">72</span><span class=\"token operator\">-</span><span class=\"token operator\">/</span><span class=\"token operator\">+</span></code></pre></div>\n<h3 id=\"solution-1\"><a href=\"#solution-1\" aria-label=\"solution 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input34.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nres <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>isdecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">+=</span> i\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token keyword\">or</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token keyword\">or</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token keyword\">or</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"20200306 알고리즘","date":"March 08, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/20200306-알고리즘/","previous":{"fields":{"slug":"/algorithm/20200305-알고리즘/"},"frontmatter":{"title":"20200305 알고리즘","category":"algorithm"}},"next":{"fields":{"slug":"/algorithm/20200307-알고리즘/"},"frontmatter":{"title":"20200307 알고리즘","category":"algorithm"}}}}}