{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/20200406-알고리즘/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"c4557e62-5faf-586b-88a2-498336b9731c","excerpt":"1. 괄호 변환 ( 카카오 공채 in…","html":"<h3 id=\"1-괄호-변환--카카오-공채-in-프로그래머스-\"><a href=\"#1-%EA%B4%84%ED%98%B8-%EB%B3%80%ED%99%98--%EC%B9%B4%EC%B9%B4%EC%98%A4-%EA%B3%B5%EC%B1%84-in-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-\" aria-label=\"1 괄호 변환  카카오 공채 in 프로그래머스  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 괄호 변환 ( 카카오 공채 in 프로그래머스 )</h3>\n<h6 id=\"문제-설명\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h6>\n<p>카카오에 신입 개발자로 입사한 <strong>콘</strong>은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다. 소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.\n수정해야 할 소스 파일이 너무 많아서 고민하던 콘은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.</p>\n<h3 id=\"용어의-정의\"><a href=\"#%EC%9A%A9%EC%96%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"용어의 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어의 정의</h3>\n<p><strong>’(’</strong> 와 <strong>’)’</strong> 로만 이루어진 문자열이 있을 경우, ’(’ 의 개수와 ’)’ 의 개수가 같다면 이를 <strong><code class=\"language-text\">균형잡힌 괄호 문자열</code></strong>이라고 부릅니다.\n그리고 여기에 ’(‘와 ’)‘의 괄호의 짝도 모두 맞을 경우에는 이를 <strong><code class=\"language-text\">올바른 괄호 문자열</code></strong>이라고 부릅니다.\n예를 들어, <code class=\"language-text\">&quot;(()))(&quot;</code>와 같은 문자열은 균형잡힌 괄호 문자열 이지만 올바른 괄호 문자열은 아닙니다.\n반면에 <code class=\"language-text\">&quot;(())()&quot;</code>와 같은 문자열은 균형잡힌 괄호 문자열 이면서 동시에 올바른 괄호 문자열 입니다.</p>\n<p>’(’ 와 ’)’ 로만 이루어진 문자열 w가 균형잡힌 괄호 문자열 이라면 다음과 같은 과정을 통해 올바른 괄호 문자열로 변환할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. \n2. 문자열 w를 두 &quot;균형잡힌 괄호 문자열&quot; u, v로 분리합니다. 단, u는 &quot;균형잡힌 괄호 문자열&quot;로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. \n3. 문자열 u가 &quot;올바른 괄호 문자열&quot; 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. \n  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. \n4. 문자열 u가 &quot;올바른 괄호 문자열&quot;이 아니라면 아래 과정을 수행합니다. \n  4-1. 빈 문자열에 첫 번째 문자로 &#39;(&#39;를 붙입니다. \n  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. \n  4-3. &#39;)&#39;를 다시 붙입니다. \n  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. \n  4-5. 생성된 문자열을 반환합니다.</code></pre></div>\n<p><strong>균형잡힌 괄호 문자열</strong> p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 <strong>올바른 괄호 문자열</strong>로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.</p>\n<h3 id=\"매개변수-설명\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%84%A4%EB%AA%85\" aria-label=\"매개변수 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수 설명</h3>\n<ul>\n<li>p는 ’(’ 와 ’)’ 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.</li>\n<li>문자열 p를 이루는 ’(’ 와 ’)’ 의 개수는 항상 같습니다.</li>\n<li>만약 p가 이미 올바른 괄호 문자열이라면 그대로 return 하면 됩니다.</li>\n</ul>\n<hr>\n<h3 id=\"입출력-예\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h3>\n<table>\n<thead>\n<tr>\n<th>p</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">&quot;(()())()&quot;</code></td>\n<td><code class=\"language-text\">&quot;(()())()&quot;</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&quot;)(&quot;</code></td>\n<td><code class=\"language-text\">&quot;()&quot;</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&quot;()))((()&quot;</code></td>\n<td><code class=\"language-text\">&quot;()(())()&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"입출력-예에-대한-설명\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"입출력 예에 대한 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예에 대한 설명</h3>\n<p><strong>입출력 예 #1</strong>\n이미 올바른 괄호 문자열 입니다.</p>\n<p><strong>입출력 예 #2</strong></p>\n<ul>\n<li>\n<p>두 문자열 u, v로 분리합니다.</p>\n<ul>\n<li>u = <code class=\"language-text\">&quot;)(&quot;</code></li>\n<li>v = <code class=\"language-text\">&quot;&quot;</code></li>\n</ul>\n</li>\n<li>\n<p>u가</p>\n<p>올바른 괄호 문자열</p>\n<p>이 아니므로 다음과 같이 새로운 문자열을 만듭니다.</p>\n<ul>\n<li>v에 대해 1단계부터 재귀적으로 수행하면 빈 문자열이 반환됩니다.</li>\n<li>u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 <code class=\"language-text\">&quot;&quot;</code>이 됩니다.</li>\n<li>따라서 생성되는 문자열은 <code class=\"language-text\">&quot;(&quot;</code> + <code class=\"language-text\">&quot;&quot;</code> + <code class=\"language-text\">&quot;)&quot;</code> + <code class=\"language-text\">&quot;&quot;</code>이며, 최종적으로 <code class=\"language-text\">&quot;()&quot;</code>로 변환됩니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>입출력 예 #3</strong></p>\n<ul>\n<li>\n<p>두 문자열 u, v로 분리합니다.</p>\n<ul>\n<li>u = <code class=\"language-text\">&quot;()&quot;</code></li>\n<li>v = <code class=\"language-text\">&quot;))((()&quot;</code></li>\n</ul>\n</li>\n<li>문자열 u가 올바른 괄호 문자열이므로 그대로 두고, v에 대해 재귀적으로 수행합니다.</li>\n<li>\n<p>다시 두 문자열 u, v로 분리합니다.</p>\n<ul>\n<li>u = <code class=\"language-text\">&quot;))((&quot;</code></li>\n<li>v = <code class=\"language-text\">&quot;()&quot;</code></li>\n</ul>\n</li>\n<li>\n<p>u가</p>\n<p>올바른 괄호 문자열</p>\n<p>이 아니므로 다음과 같이 새로운 문자열을 만듭니다.</p>\n<ul>\n<li>v에 대해 1단계부터 재귀적으로 수행하면 <code class=\"language-text\">&quot;()&quot;</code>이 반환됩니다.</li>\n<li>u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 <code class=\"language-text\">&quot;()&quot;</code>이 됩니다.</li>\n<li>따라서 생성되는 문자열은 <code class=\"language-text\">&quot;(&quot;</code> + <code class=\"language-text\">&quot;()&quot;</code> + <code class=\"language-text\">&quot;)&quot;</code> + <code class=\"language-text\">&quot;()&quot;</code>이며, 최종적으로 <code class=\"language-text\">&quot;(())()&quot;</code>를 반환합니다.</li>\n</ul>\n</li>\n<li>처음에 그대로 둔 문자열에 반환된 문자열을 이어 붙이면 <code class=\"language-text\">&quot;()&quot;</code> + <code class=\"language-text\">&quot;(())()&quot;</code> = <code class=\"language-text\">&quot;()(())()&quot;</code>가 됩니다.</li>\n</ul>\n<h4 id=\"solution\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 올바른 문자열 인지 check</span>\n    tmp <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> u<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">'('</span> <span class=\"token keyword\">in</span> tmp<span class=\"token punctuation\">:</span>\n                tmp<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># only delete one ( 기준은 index low )</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            tmp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">devide</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    u <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u <span class=\"token operator\">+=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        cnt1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> u<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span>  v <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n                cnt1 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cnt2 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> cnt1 <span class=\"token operator\">==</span> cnt2<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> u<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token string\">'('</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token string\">')'</span>\n    <span class=\"token keyword\">return</span> res\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> p<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">if</span> check<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> p\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> devide<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">if</span> check<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> u <span class=\"token operator\">+</span> solution<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> solution<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token string\">')'</span> <span class=\"token operator\">+</span> reverse<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-짝지어-제거하기\"><a href=\"#2-%EC%A7%9D%EC%A7%80%EC%96%B4-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-label=\"2 짝지어 제거하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 짝지어 제거하기</h3>\n<h6 id=\"문제-설명-1\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85-1\" aria-label=\"문제 설명 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h6>\n<p>짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.</p>\n<p>예를 들어, 문자열 S = <code class=\"language-text\">baabaa</code> 라면</p>\n<p>b <em>aa</em> baa → <em>bb</em> aa → <em>aa</em> →</p>\n<p>의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.</p>\n<h5 id=\"제한사항\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h5>\n<ul>\n<li>문자열의 길이 : 1,000,000이하의 자연수</li>\n<li>문자열은 모두 소문자로 이루어져 있습니다.</li>\n</ul>\n<hr>\n<h5 id=\"입출력-예-1\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-1\" aria-label=\"입출력 예 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h5>\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baabaa</td>\n<td>1</td>\n</tr>\n<tr>\n<td>cdcd</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"입출력-예-설명\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85\" aria-label=\"입출력 예 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예 설명</h5>\n<p>입출력 예 #1\n위의 예시와 같습니다.\n입출력 예 #2\n문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.</p>\n<h4 id=\"solution-1\"><a href=\"#solution-1\" aria-label=\"solution 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> v<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"20200406 알고리즘","date":"April 06, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/20200406-알고리즘/","previous":{"fields":{"slug":"/algorithm/20200405-알고리즘/"},"frontmatter":{"title":"20200405 알고리즘","category":"algorithm"}},"next":null}}}