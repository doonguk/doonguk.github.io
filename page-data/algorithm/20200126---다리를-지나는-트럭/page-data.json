{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/20200126---다리를-지나는-트럭/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"fded33ed-0ff4-5c7d-8243-7ff61a918e3b","excerpt":"출처 : 프로그래머스 Question 문제 설명 트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.\n※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다. 예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 7, 4, 5, 6kg…","html":"<p><em>출처 : 프로그래머스</em></p>\n<h1 id=\"question\"><a href=\"#question\" aria-label=\"question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h1>\n<h6 id=\"문제-설명\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h6>\n<p>트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.\n※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.</p>\n<p>예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</p>\n<table>\n<thead>\n<tr>\n<th>경과 시간</th>\n<th>다리를 지난 트럭</th>\n<th>다리를 건너는 트럭</th>\n<th>대기 트럭</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>[]</td>\n<td>[]</td>\n<td>[7,4,5,6]</td>\n</tr>\n<tr>\n<td>1~2</td>\n<td>[]</td>\n<td>[7]</td>\n<td>[4,5,6]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[7]</td>\n<td>[4]</td>\n<td>[5,6]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>[7]</td>\n<td>[4,5]</td>\n<td>[6]</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[7,4]</td>\n<td>[5]</td>\n<td>[6]</td>\n</tr>\n<tr>\n<td>6~7</td>\n<td>[7,4,5]</td>\n<td>[6]</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>[7,4,5,6]</td>\n<td>[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<p>따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.</p>\n<p>solution 함수의 매개변수로 다리 길이 bridge<em>length, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truck</em>weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.</p>\n<h5 id=\"제한-조건\"><a href=\"#%EC%A0%9C%ED%95%9C-%EC%A1%B0%EA%B1%B4\" aria-label=\"제한 조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한 조건</h5>\n<ul>\n<li>bridge_length는 1 이상 10,000 이하입니다.</li>\n<li>weight는 1 이상 10,000 이하입니다.</li>\n<li>truck_weights의 길이는 1 이상 10,000 이하입니다.</li>\n<li>모든 트럭의 무게는 1 이상 weight 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h5>\n<table>\n<thead>\n<tr>\n<th>bridge_length</th>\n<th>weight</th>\n<th>truck_weights</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>10</td>\n<td>[7,4,5,6]</td>\n<td>8</td>\n</tr>\n<tr>\n<td>100</td>\n<td>100</td>\n<td>[10]</td>\n<td>101</td>\n</tr>\n<tr>\n<td>100</td>\n<td>100</td>\n<td>[10,10,10,10,10,10,10,10,10,10]</td>\n<td>110</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"my-answer\"><a href=\"#my-answer\" aria-label=\"my answer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Answer</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isOverflow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queue<span class=\"token punctuation\">,</span> maxWeight<span class=\"token punctuation\">,</span> weight</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> weight\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> queue<span class=\"token punctuation\">)</span> result <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span> maxWeight\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bridge_length<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> truck_weights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> truck_weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isOverflow</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">const</span> remain <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bridge_length <span class=\"token operator\">-</span> first<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token comment\">// 남은거리 </span>\n            time <span class=\"token operator\">+=</span> remain\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n               queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value <span class=\"token punctuation\">:</span> ele<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> length <span class=\"token punctuation\">:</span> ele<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span>remain<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token comment\">// queue 의 다른 원소들도 남은거리 만큼 +</span>\n        <span class=\"token punctuation\">}</span>\n        queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value <span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span> length <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value <span class=\"token punctuation\">:</span> ele<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> length <span class=\"token punctuation\">:</span> ele<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//추가 된 경우 + 1</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> bridge_length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// +1 했는데 다리 건너면 shift()</span>\n            time <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> remain <span class=\"token operator\">=</span> bridge_length <span class=\"token operator\">-</span> first<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n        time <span class=\"token operator\">+=</span> remain\n        queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>value <span class=\"token punctuation\">:</span> ele<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> length <span class=\"token punctuation\">:</span> ele<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> remain<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token comment\">// 남은 queue 원소 비워</span>\n    <span class=\"token keyword\">return</span> time<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"20200126 - 다리를 지나는 트럭","date":"January 26, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/20200126---다리를-지나는-트럭/","previous":{"fields":{"slug":"/algorithm/20200126---쇠-막대기/"},"frontmatter":{"title":"20200126 - 쇠 막대기","category":"algorithm"}},"next":{"fields":{"slug":"/algorithm/20200127---탑/"},"frontmatter":{"title":"20200127 - 탑","category":"algorithm"}}}}}