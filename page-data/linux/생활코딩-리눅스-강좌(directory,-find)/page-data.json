{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux/생활코딩-리눅스-강좌(directory,-find)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"77e2df92-62c0-523b-824b-431bb4595a31","excerpt":"Directory Structure https://www.thegeekstuff.com/2010/09/linux-file-system-structure/ 참고 / : 최상위 디렉토리 ( root ) /bin : binary 줄임말, 컴퓨터에서는 실행가능한 프로그램을 binary라고함 > 프로그램들이 모여있는 directory /sbin : 시스템 관리자가 쓰는 프로그램 ( reboot, shutdown 등)들이 모여있음. /etc : configuration files…","html":"<h3 id=\"directory-structure\"><a href=\"#directory-structure\" aria-label=\"directory structure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directory Structure</h3>\n<blockquote>\n<p><a href=\"https://www.thegeekstuff.com/2010/09/linux-file-system-structure/\">https://www.thegeekstuff.com/2010/09/linux-file-system-structure/</a> 참고</p>\n</blockquote>\n<ul>\n<li><code>/</code> : 최상위 디렉토리 ( root )</li>\n<li><code>/bin</code> : binary 줄임말, 컴퓨터에서는 실행가능한 프로그램을 binary라고함 > 프로그램들이 모여있는 directory</li>\n<li><code>/sbin</code> : 시스템 관리자가 쓰는 프로그램 ( <code>reboot, shutdown 등</code>)들이 모여있음.</li>\n<li><code>/etc</code> : configuration files들이 모여있음, 프로그램의 설정을 담당하는 directory</li>\n<li>\n<p><code>/var</code> : variables files 의 줄임말, 이 dir 밑에 있는 파일들은 언제든 바뀔수 있음</p>\n<ul>\n<li>예로 /var/log dir에는 프로그램을 사용하다가 오류가 발생하면 자동으로 업데이트 된다.</li>\n</ul>\n</li>\n<li><code>/tmp</code> : 임시 파일들이 저장됌. 컴퓨터 재부팅하면 사라져 있음.</li>\n<li>\n<p><code>/home</code> : 사용자들의 디렉토리 예를들어 donguk 이라는 사용자가 있다면 <code>/home/donguk</code> 이 존재 </p>\n<img width=\"420\" alt=\"&#xC2A4;&#xD06C;&#xB9B0;&#xC0F7; 2019-11-10 &#xC624;&#xD6C4; 7 19 21\" src=\"https://user-images.githubusercontent.com/39187116/68542353-3a653600-03ef-11ea-8bd8-3d03272327a6.png\">\n<ul>\n<li><code>~</code>: 현재 사용자의 home directory로 이동</li>\n</ul>\n</li>\n<li><code>/lib</code> : /bin과 /sbin 에 있는 프로그램들이 사용하는 라이브러리들이 모여있는 directory</li>\n<li><code>/opt</code> : 일반적인 프로그램들은 설치 될 때 자동으로 directory가 정해져서 설치되지만, 사용자가 직접 지정 해줘야 할 때가 있다. 이때 /opt 를 이용하면 좋다(?)</li>\n</ul>\n<br/>\n<h3 id=\"fild-find\"><a href=\"#fild-find\" aria-label=\"fild find permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fild find</h3>\n<ul>\n<li><code>locate</code> : locate는 directory를 뒤지지 않고 컴퓨터안에 있는 파일에대한 정보를 갖고 있는 database를 뒤진다. 이때, locate가 사용하는 database를 <code>mlocate</code> 라고 한다.</li>\n<li>\n<p><code>find [start-dir] [flag] [target]</code> : 직접 파일을 뒤지며 찾음.</p>\n<ul>\n<li>(Tip) <code>man find | head</code> : <code>man find</code>가 return하는 결과물을 <strong>파이프( | )</strong>로 <code>head</code> 가 입력으로 받아서 출력</li>\n<li>예로, <code>find ~ -name “*.log”</code> : 현재 사용자의 모든 디렉토리를 뒤져서 이름에 .log가 들어간 모든 파일을 검색함.</li>\n<li>. 는 현재 디렉토리, /는 root, ~는 현재 사용자 디렉토리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">//두번째 예시\n$ <span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -type f -name <span class=\"token string\">'test.txt'</span> -exec <span class=\"token function\">rm</span> -f <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위 예시는 현재 디렉토리에서 타입이 파일 이면서 이름이 test.txt인 파일을 찾는다. 그리고 묻지도 따지지도 않고.. 지운다.  <code>{}</code> 는 find에 검색된 조건이 맞는 파일명이 들어간다.</li>\n</ul>\n</li>\n<li>\n<p><code>whereis [target]</code> : 실행 프로그램의 binary directory 경로를 찾아준다. 검색결과가 두개가 나온다면 후자는 메뉴얼의 경로</p>\n<img width=\"321\" alt=\"&#xC2A4;&#xD06C;&#xB9B0;&#xC0F7; 2019-11-10 &#xC624;&#xD6C4; 8 09 21\" src=\"https://user-images.githubusercontent.com/39187116/68543092-0c372480-03f6-11ea-95c7-854904d1c219.png\">\n<ul>\n<li>파일을 다 뒤지는게 아니라, <code>$PATH</code> 라는 변수에 담겨있는 경로들만 뒤진다.</li>\n<li><strong>$PATH ( 환경변수 )</strong></li>\n</ul>\n<img width=\"718\" alt=\"&#xC2A4;&#xD06C;&#xB9B0;&#xC0F7; 2019-11-10 &#xC624;&#xD6C4; 8 15 02\" src=\"https://user-images.githubusercontent.com/39187116/68543162-d5154300-03f6-11ea-910b-3e0b4eeb5564.png\">\n<p>우리가 화면에 ls를 입력하면 컴퓨터는 $PATH안에 담겨있는 경로들을 하나하나 찾아본다.  그러다가 /bin 디렉토리에 ls라는 프로그램을 찾고 이를 실행 시키는 것이다. </p>\n<p>mac에서는 공백으로 경로들이 구분 되지만, 다른 OS에서는 : 으로 구분 되기도 한다. 그리고 $PATH는 수정 가능하다.</p>\n</li>\n</ul>","frontmatter":{"title":"생활코딩 리눅스 강좌(directory, find)","date":"November 10, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/linux/생활코딩-리눅스-강좌(directory,-find)/","previous":{"fields":{"slug":"/python/파이썬-기초-정리(자료형-숫자형)/"},"frontmatter":{"title":"파이썬 기초 정리(자료형-숫자형)","category":"python"}},"next":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(프로세스와-실행)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(프로세스와 실행)","category":"linux"}}}}}