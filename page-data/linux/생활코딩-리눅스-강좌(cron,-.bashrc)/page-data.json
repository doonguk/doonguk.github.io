{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux/생활코딩-리눅스-강좌(cron,-.bashrc)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"573e0628-b37a-514a-a9b6-44db185211dd","excerpt":"CRON CRON 기본 명령어 정기적으로 명령을 실행시켜주는 소프트웨어 ( ex 백업, 정기적인 데이터 전송, 정기적으로 인터넷으로 시간조정? ) crontab -e  : 정기적으로 실행 시키고 싶은 작업을 설정 할 수 있음.  crontab -l : 처리한 cron 들을 확인 할 수 있다. crontab -r  : cron 삭제 CRON 주기 설정 tail file :  file의 꼬리 부분을 확인 할 수 있다. tail -f file : file…","html":"<h2 id=\"cron\"><a href=\"#cron\" aria-label=\"cron permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRON</h2>\n<h4 id=\"cron-기본-명령어\"><a href=\"#cron-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"cron 기본 명령어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRON 기본 명령어</h4>\n<ul>\n<li>정기적으로 명령을 실행시켜주는 소프트웨어 ( ex 백업, 정기적인 데이터 전송, 정기적으로 인터넷으로 시간조정? )</li>\n<li><code>crontab -e </code> : 정기적으로 실행 시키고 싶은 작업을 설정 할 수 있음. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token comment\">#m h dom(day of month) mon(month) dow(요일) command</span>\n$ */1 * * * * <span class=\"token function\">date</span> <span class=\"token operator\">>></span> date.log <span class=\"token comment\"># 1분에 한번 시간, dom, mon, dow 는 무시, 만약 10 1 24 이라면 -> 매달 $ 24일 1시10분</span></code></pre></div>\n<ul>\n<li><code>crontab -l</code> : 처리한 cron 들을 확인 할 수 있다.</li>\n<li><code>crontab -r </code> : cron 삭제</li>\n</ul>\n<h4 id=\"cron-주기-설정\"><a href=\"#cron-%EC%A3%BC%EA%B8%B0-%EC%84%A4%EC%A0%95\" aria-label=\"cron 주기 설정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRON 주기 설정</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ *        *         *        *         *\n$ 분<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>~59<span class=\"token punctuation\">)</span> 시간<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>~23<span class=\"token punctuation\">)</span> 일<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>~31<span class=\"token punctuation\">)</span>  월<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>~12<span class=\"token punctuation\">)</span>   요일<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>~6<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 일요일은 0, 1부터 월요일~</span>\n$ * * * * * <span class=\"token function\">ls</span> -l <span class=\"token comment\"># ls -l 을 매분 실행</span>\n$ <span class=\"token number\">0,20</span>,40 * * * * <span class=\"token function\">ls</span> -l <span class=\"token comment\"># 매월매일매시간 0분,20분,40분에  ls-l 실행</span></code></pre></div>\n<ul>\n<li>\n<p><code>tail [file]</code> :  file의 꼬리 부분을 확인 할 수 있다.</p>\n<ul>\n<li><strong><code>tail -f [file]</code></strong> : file의 꼬리부분을 주시하다가 업데이트 되면 자동으로 화면을 업데이트 시켜준다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ *1 * * * * <span class=\"token function\">date</span> <span class=\"token operator\">>></span> date.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token comment\"># 표준 에러를 표준 출력화</span></code></pre></div>\n<p><strong>출력에서 숫자 2는 ‘표준 에러’ 이고 숫자 1은 ‘표준 출력’이다.</strong> 위 코드는 표준 에러를 표준 출력으로 Redirection 한 것 이다. ( 그냥 1만 하면 1이라는 파일에 저장된다. &#x26;를 붙여줘야 한다! ) </p>\n<h4 id=\"적용-사례\"><a href=\"#%EC%A0%81%EC%9A%A9-%EC%82%AC%EB%A1%80\" aria-label=\"적용 사례 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 사례</h4>\n<p>회사에서 매일 아침에 서버의 tmp 폴더와 서버 프로젝트의 이미지 폴더를 지워야 하는 일이 있었는데, Shell sript를 이용하여 tmp, 이미지 폴더를 비워주는 sh 파일을 만들고 이를 크론으로 주기적으로 실행 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">crontab</span> -e\n<span class=\"token comment\">### crontab</span>\n$ <span class=\"token number\">0</span> <span class=\"token number\">8</span> * * * /home/ubuntu/clearTemp.sh <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> error.log <span class=\"token comment\"># 매일 아침 8시마다 자동으로 비워주기 오류있으면 error.log 에 로깅</span></code></pre></div>\n<p>추가적으로 Mac 에서 1분 마다 echo ‘crontab test’ 명령어를 수행하게 하였는데, 쉘에 바로 나타나지 않고 /var/mail/[사용자] 디렉토리에 로깅 된다는 것을 알았다.</p>\n<br/>\n<h2 id=\"쉘을-시작할-때-실행\"><a href=\"#%EC%89%98%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%95%A0-%EB%95%8C-%EC%8B%A4%ED%96%89\" aria-label=\"쉘을 시작할 때 실행 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쉘을 시작할 때 실행</h2>\n<ul>\n<li><code>alias [별명] = ’[command]’</code> :  command에 단축키(별명?)을 붙여준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">alias</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">=</span><span class=\"token string\">'cd ..'</span> <span class=\"token comment\"># .. 는 cd .. 기능을 수행한다.</span>\n$ <span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span><span class=\"token string\">'clear'</span> <span class=\"token comment\"># c는 clear 기능을 수행.</span></code></pre></div>\n<ul>\n<li>\n<p><code>.bashrc</code> : 사용자 루트 디렉토리 경로에 있는  <code>.bashrc</code> 를 수정하면 쉘 ( bash )이 실행 될 때 무언가를 수행하게 할 수 있다.</p>\n<ul>\n<li>bash shell은 쉘이 실행 될 때 <code>.bashrc</code> 를 실행하기 때문.</li>\n</ul>\n</li>\n<li><code>.bashrc</code> 에 alias 프로그램으로 커맨드를 단축어로 지정해 놓으면 편하다!</li>\n<li>\n<p>fish shell 은 조금 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~/.config/fish\n$ <span class=\"token function\">vi</span> config.fish <span class=\"token comment\"># 이곳에 추가 해주면 된다.</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"생활코딩 리눅스 강좌(cron, .bashrc)","date":"November 16, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/linux/생활코딩-리눅스-강좌(cron,-.bashrc)/","previous":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(daemon)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(Daemon)","category":"linux"}},"next":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(user)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(user)","category":"linux"}}}}}