{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux/생활코딩-리눅스-강좌(프로세스와-실행)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"a8a223cc-0056-5e36-b848-ab86b524e72f","excerpt":"컴퓨터 구조, 프로세스 모니터링, 백그라운드 실행 컴퓨터 구조 Storage SSD, HDD 같은 저장공간을 의미 가격이 낮고, 용량이 크지만 저장하고 읽는데 시간이 오래걸린다 Memory RAM Storage와 반대의 특성을 지닌다. ( 가격이 높고, 용량 작지만 저장하고 읽는데 소요되는 시간이 적음) Processor ( * Process 아님 ) CPU ( 중앙처리장치 ) 동작속도가 빠름 ( Storage의 저장하고 읽는 속도보다 빨라~ ) 우리가 프로그램을 실행 시킨다는건 Storage…","html":"<blockquote>\n<p>컴퓨터 구조, 프로세스 모니터링, 백그라운드 실행</p>\n</blockquote>\n<h3 id=\"컴퓨터-구조\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0\" aria-label=\"컴퓨터 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터 구조</h3>\n<ul>\n<li>\n<p>Storage</p>\n<ul>\n<li>SSD, HDD 같은 저장공간을 의미</li>\n<li>가격이 낮고, 용량이 크지만 <strong>저장하고 읽는데 시간이 오래걸린다</strong></li>\n</ul>\n</li>\n<li>\n<p>Memory</p>\n<ul>\n<li>RAM</li>\n<li>Storage와 반대의 특성을 지닌다. ( 가격이 높고, 용량 작지만 <strong>저장하고 읽는데 소요되는 시간이 적음</strong>)</li>\n</ul>\n</li>\n<li>\n<p>Processor ( * Process 아님 )</p>\n<ul>\n<li>CPU ( 중앙처리장치 )</li>\n<li>동작속도가 빠름 ( Storage의 저장하고 읽는 속도보다 빨라~ )</li>\n<li>우리가 프로그램을 실행 시킨다는건 Storage에 저장되어 있는 프로그램을 읽어서 Memory에 적재시킨다. 그리고 이를 CPU가 읽어서 실행 시키는 것이다.</li>\n<li>또 다른 예시로, <code>mkdir</code> 같은 Command는 /bin 디렉토리(  Storage ) 에 파일로 저장 되어있다. ( 파일로 저장된 그것? 을 프로그램이라고 한다. ) 그리고 사용자가 Standard input과 함께 <code>mkdir</code> 프로그램을 실행 시키면, 이는 메모리에 적재 되고 CPU ( Processor )가 실행 시키게 된다. 추가적으로 <strong>CPU에 처리되고 있는 상태. 즉 실행중인 프로그램을 process라고 한다.</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"프로세스-모니터링\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\" aria-label=\"프로세스 모니터링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 모니터링</h3>\n<ul>\n<li>\n<p><code>ps</code> : 현재 컴퓨터에 실행중인 프로세스 확인</p>\n<p>추가적으로 <code>aux</code> 옵션을 준다면 백그라운드에 실행중인 프로세스 까지 확인 가능하다.</p>\n<ul>\n<li>특정 단어의 프로세스만 확인하고 싶다 ? <code>ps aux | grep apache</code> 이와 같이 파이프 ( | )를 설정하여 원하는 프로세스 확인 가능하다. </li>\n<li>특정 프로스를 확인한 후 <code>kill [pid]</code> 를 이용하여 프로세스를 죽일 수 있다.</li>\n</ul>\n</li>\n<li><code>top</code> : ps 와 비슷하게 프로세스 리스트 확인</li>\n<li>\n<p><code>htop</code> : <code>top</code> 프로그램의 상위호환 ( homebrew 를 통하여 설치 가능 )</p>\n<ul>\n<li>MEM : 물리적인 메모리 사용량 % 확인</li>\n<li>RES : 실제적인 메모리 사용량 ( NOT % ) 확인</li>\n</ul>\n<img width=\"1397\" alt=\"&#xC2A4;&#xD06C;&#xB9B0;&#xC0F7; 2019-11-13 &#xC624;&#xD6C4; 1 33 32\" src=\"https://user-images.githubusercontent.com/39187116/68733512-3ff29400-061a-11ea-985a-5f187573ccc0.png\">\n<ul>\n<li>왼쪽 상단에 1,2,3,4 는 CPU 각각을 의미함 (4개의 <strong>코어</strong>)</li>\n<li>오른쪽 상단 Load average의 첫번째 숫자  : 위 사진에서는 2.75인데 이 의미는 4개의 코어중 약 2.75개의 코어가 사용되고 있고 나머지는 놀고(?) 있다는 뜻 이다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"백그라운드-실행\" style=\"position:relative;\"><a href=\"#%EB%B0%B1%EA%B7%B8%EB%9D%BC%EC%9A%B4%EB%93%9C-%EC%8B%A4%ED%96%89\" aria-label=\"백그라운드 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백그라운드 실행</h3>\n<p>예를들어 우리가 인터넷 서핑을 하다가 , 한글 문서를 클릭하면  ? 인터넷 브라우저는 백그라운드로 실행 되고, 한글 문서가 포워그라운드로 실행된다.</p>\n<ul>\n<li><code>ctrl + z</code> : 프로세스 백그라운드 실행</li>\n<li><code>fg</code> : 백그라운드로 작업하던 프로세스 다시 실행</li>\n<li><code>jobs</code> : 현재 백그라운드로 존재하는 프로세스 목록 확인</li>\n</ul>\n<img width=\"374\" alt=\"&#xC2A4;&#xD06C;&#xB9B0;&#xC0F7; 2019-11-13 &#xC624;&#xD6C4; 1 50 43\" src=\"https://user-images.githubusercontent.com/39187116/68734151-9e207680-061c-11ea-9a5f-b3767cc3f747.png\">\n<ul>\n<li>2 번 job으로 돌아가고 싶으면 <code>fg %2</code> ( test2 )</li>\n<li>n번 job으로 돌아가고 싶으면 <code>fg %n</code></li>\n<li>n번 job을 제거하고 싶으면 <code>kill %n</code> ( 정상적인 종료에 해당 ) > 강제로 제거 하고 싶다면? <code>kill -9 %n</code></li>\n<li>\n<p><code>&#x26;</code> : 특정 프로그램을 시작과 동시에 백그라운드로 실행 시킨다.</p>\n<ul>\n<li>예시 : <code>ls -R / > result.txt 2> error.log &#x26;</code></li>\n<li>오래걸리는 작업을 백그라운드로 실행 시키고 작업을 이어갈수 있는 장점이 있다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"생활코딩 리눅스 강좌(프로세스와 실행)","date":"November 13, 2019"}}},"pageContext":{"slug":"/linux/생활코딩-리눅스-강좌(프로세스와-실행)/","previous":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(directory,-find)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(directory, find)","category":"linux"}},"next":{"fields":{"slug":"/linux/생활코딩-리눅스-강좌(daemon)/"},"frontmatter":{"title":"생활코딩 리눅스 강좌(Daemon)","category":"linux"}}}},"staticQueryHashes":["3128451518","96099027"]}