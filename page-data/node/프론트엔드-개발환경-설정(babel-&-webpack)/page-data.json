{"componentChunkName":"component---src-templates-blog-post-js","path":"/node/프론트엔드-개발환경-설정(babel-&-webpack)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"c7ea0dc1-78ca-55f5-ae65-b63c7849e02c","excerpt":"프론트엔드 개발환경 설정하기 📒 목차 babel? webpack? babel 적용하기 webpack 적용하기 style 관련 loader 적용하기 (feat. sass-loader) file-loader, url-loader 적용하기 모듈을 절대경로로 불러오기 webpack으로 개발서버 띄우기 개발서버, 실서버 환경 분리하기 후기 babel? 공식문서에서는 babel을 다음과 같이 표현한다. Babel is a JavaScript compiler. Use next generation…","html":"<h1 id=\"프론트엔드-개발환경-설정하기\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"프론트엔드 개발환경 설정하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드 개발환경 설정하기</h1>\n<br/>\n<h2 id=\"-목차\"><a href=\"#-%EB%AA%A9%EC%B0%A8\" aria-label=\" 목차 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📒 목차</h2>\n<ol>\n<li><a href=\"#babel\">babel?</a></li>\n<li><a href=\"#webpack\">webpack?</a></li>\n<li><a href=\"#step1\">babel 적용하기</a></li>\n<li><a href=\"#step2\">webpack 적용하기</a></li>\n<li><a href=\"#step3\">style 관련 loader 적용하기 (feat. sass-loader)</a></li>\n<li><a href=\"#step4\">file-loader, url-loader 적용하기</a></li>\n<li><a href=\"#step5\">모듈을 절대경로로 불러오기</a></li>\n<li><a href=\"#step6\">webpack으로 개발서버 띄우기</a></li>\n<li><a href=\"#step7\">개발서버, 실서버 환경 분리하기</a></li>\n<li><a href=\"#step9\">후기</a></li>\n</ol>\n<h2 id=\"babel\">🤔 babel</h3>\n<h3 id=\"babel\"><a href=\"#babel\" aria-label=\"babel permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel?</h3>\n<p>공식문서에서는 babel을 다음과 같이 표현한다.</p>\n<blockquote>\n<p>Babel is a JavaScript compiler. Use next generation JavaScript</p>\n</blockquote>\n<p>babal은 최신 버전의 자바스크립트 문법(보통 ES6+)을 이전 버전의 자바스크립트 문법으로 변환시켜주는 트랜스 컴파일러다.</p>\n<p>예를들어, 개발자가 아래와 같이 코딩했다면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello ${name}'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 바뀐다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello '</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 babel을 사용한다고 해서 모든 자바스크립트 최신 문법을 사용할 수 있는건 아니다. <code class=\"language-text\">Array.from</code> 이나 <code class=\"language-text\">Object.assign()</code> 등 기존에 문법에 없던 문법은 <strong>pollyfill(코드 조각)</strong>을 추가하여 지원하게 해야한다.</p>\n<blockquote>\n<p><strong>pollyfill</strong></p>\n<p>자바스크립트의 최신기술을 구버전 브라우저에서 사용하기 위해서는 변화과 함께 폴리필도 사용해야 한다. 폴리필은 <strong>런타임 기능 주입</strong>을 말한다. 런타임 기능 주입이 뭐야? 한다면, <strong>브라우저에서 코드가 실행될 때 기능이 있는지 없는지 확인한 뒤 없을 경우에만 코드 변환을 하는 기능을 말한다</strong></p>\n</blockquote>\n<h3 id=\"babel의-동작원리\"><a href=\"#babel%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"babel의 동작원리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel의 동작원리</h3>\n<blockquote>\n<p>Source Code => AST => modified AST => Source Code</p>\n</blockquote>\n<p><strong>1. 파싱</strong></p>\n<p>소스코드를 읽어서 파싱 후 추상구문트리(AST)를 생성한다. AST의 각 노드는 소스코드의 구조를 의미한다. 추상구문트리가 궁금하면 <a href=\"https://astexplorer.net/#/gist/90bc74fbaaee4050afadca33d2899470/latest\">여기</a>를 참고한다.</p>\n<p><strong>2. 변환</strong></p>\n<p>1단계에서 작성한 추상구문트리를 가져와서 각 브라우저에 맞게 변환한다. 여기서 바벨 설정에 추가한 plugin들이 적용된다.</p>\n<p><strong>3. 코드 생성</strong></p>\n<p>2단계에서 변형된 AST를 실제 브라우저 환경에 맞는 소스코드로 변환한다.</p>\n<br/>\n<h2 id=\"webpack\">🤗 Webpack</h2>\n<h3 id=\"webpack\"><a href=\"#webpack\" aria-label=\"webpack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack?</h3>\n<p>Webpack은 모듈번들러다. 즉 여러개의 파일을 하나로 합쳐주는 도구이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/87876681-ce72ad00-ca14-11ea-804d-f65b58aa1ce1.png\" alt=\"image\"></p>\n<div style=\"text-align: center\">webpack 공식문서 메인사진</div>\n<h3 id=\"webpack에서-loader\"><a href=\"#webpack%EC%97%90%EC%84%9C-loader\" aria-label=\"webpack에서 loader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack에서 Loader?</h3>\n<p>Webpack은 모든 파일을 모듈로 관리한다. Js 파일 뿐만 아니라 이미지, 폰트, 스타일시트도 전부 모듈로 관리한다. 그러나 webpack은 js밖에 모른다. 비 js 파일을 웹팩이 이해하게끔 변경해야하는데 로더가 이 역할을 담당한다.</p>\n<p>로더는 <code class=\"language-text\">test</code>와 <code class=\"language-text\">use</code>키로 구성된 객체로 설정할 수 있다. <code class=\"language-text\">test</code>에 로딩할 파일을 지정하고 <code class=\"language-text\">use</code>에 적용할 로더를 설정한다. 대표적인 로더는 <code class=\"language-text\">babel-loader</code>, <code class=\"language-text\">css-loader</code>, <code class=\"language-text\">sass-loader</code>등이 있다.</p>\n<h3 id=\"webpack을-사용하는-이유\"><a href=\"#webpack%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"webpack을 사용하는 이유 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack을 사용하는 이유?</h3>\n<p><strong>1. 모듈간의 의존성 문제를 해결</strong></p>\n<p>Webpack이 모듈간의 의존성을 계산해서 번들링 해줌</p>\n<p><strong>2. 네트워크 병목을 줄여줌</strong></p>\n<p><code class=\"language-text\">&lt;script&gt;</code> 태그를 여러개 사용하여 웹 페이지를 로드하면 네트워크 병목현상이 생길 수 있다. 이런 문제를 해결하려면, 하나의 JS파일로 로드하면 되지만 하나의 JS파일로 개발할 경우 코드의 가독성이나 전역공간의 오염 같은 문제가 발생하게 된다. Webpack은 여러개의 파일을 하나로 묶어주기 때문에 이와 같은 문제를 해결할 수 있고 네트워크 병목현상을 최소화할 수 있다.</p>\n<p><strong>3. 모듈단위의 개발이 가능하다!</strong></p>\n<p>모듈단위의 개발이 가능하기 때문에, 코드의 가독성도 높이고? 유지보수 효율도 높이고? 스코프에 신경쓰지 않고 개발해도 된다. 또 라이브러리간 종속 문제를 고민할 필요가 없다. (Webpack이 entry point 부터 종속성을 계산하기 때문)</p>\n<p><strong>4.코드를 압축, 최적화할 수 있다.</strong></p>\n<p>하나의 파일로 압축시켜주고, plugin을 이용해서 최적화도 가능하다.</p>\n<p><strong>5. ES6+ 스크립트를 지원한다.</strong></p>\n<p>webpack은 babel-loader를 사용하여 babel을 지원하기 때문에 컴파일 과정에서(코드를 번들링하는 과정에서) 구형 브라우저가 사용 가능한 문법으로 코드를 변환해 준다.</p>\n<p>등등…</p>\n<h3 id=\"webpack의-동작원리\"><a href=\"#webpack%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC\" aria-label=\"webpack의 동작원리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack의 동작원리?</h3>\n<ol>\n<li>entry file의 의존성을 분석한다.</li>\n<li>다음 파일의 의존성을 분석한다.</li>\n<li>모든 파일의 의존성을 분석할 때 까지 2번 과정을 반복한다.</li>\n<li>3번 까지의 과정을 토대로 종속성 그래프를 만들고 이 그래프를 사용하여 모든 모듈을 하나(또는 여러개)의 bundle 파일로 합친다.</li>\n</ol>\n<br/>\n<h2 id=\"step1\">😇 Babel 적용하기</h2>\n<p><strong>1. 기본환경 설정</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init -y\n<span class=\"token function\">mkdir</span> src\n<span class=\"token builtin class-name\">cd</span> src\n<span class=\"token function\">vi</span> index.js</code></pre></div>\n<p><strong>2. index.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>3. 필요한 module install</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i @babel/core @babel/cli @babel/preset-env -D</code></pre></div>\n<ul>\n<li><code class=\"language-text\">@babel/core</code>: babel을 사용하기 위한 필수 패키지</li>\n<li><code class=\"language-text\">@babel/cli</code>: babel을 터미널에서 커맨드를 입력해서 사용하기 위한 패키지 ( 선택사항 )</li>\n<li><code class=\"language-text\">@babel/preset-env</code>: babel의 공식 preset중 하나이며 필요한 플러그인 들을 프로젝트 진행환경에 맞춰서 동적으로 결정해 준다. 형식이 <code class=\"language-text\">browserlist</code> 형식이기 때문에 <code class=\"language-text\">.browserlistrc</code> 파일을 만들어 상세하게 설정 가능하다. 설정하지 않으면 기본값으로 설정된다.</li>\n</ul>\n<p>모듈을 설치할 때 <code class=\"language-text\">-D</code> 옵션으로 설치 했는데 이는 <code class=\"language-text\">package.json</code> 파일의 <code class=\"language-text\">devDependencies</code> 항목에 추가하겠다는 의도이다. <code class=\"language-text\">devDependencies</code>는 개발이나 테스트 환경에서 필요한 패키지를 의미한다.</p>\n<blockquote>\n<p>추가적으로, <code class=\"language-text\">dependencies</code> 옵션은 프로덕션 환경(실제 서비스환경)에서 필요한 패키지를 의미한다!</p>\n</blockquote>\n<p><strong>4. babel config 설정</strong></p>\n<p>babel 설정을 위해 root 디렉토리에 <code class=\"language-text\">babel.config.js</code> 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> presets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        targets<span class=\"token punctuation\">:</span> <span class=\"token string\">'> 0.25%, not dead'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">api.cache(true)</code> : babel 설정 파일을 한번만 실행하겠다는 뜻. 다른 옵션은 <a href=\"https://babeljs.io/docs/en/config-files#apicache\">여기</a>를 참고한다.</li>\n<li><code class=\"language-text\">targets</code> 속성은 지원하는 브라우저의 범위를 정한다.</li>\n</ul>\n<p><strong>5. pollyfill 추가</strong></p>\n<p><code class=\"language-text\">index.js</code> 의 <code class=\"language-text\">flat</code>함수는 많은 브라우저에서 지원하지 않는다.(<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\">참고</a>) 따라서 pollyfill을 추가해 줘야한다. 대표적으로 많이 쓰는 pollyfill은 corejs@3 이다. 예전에는 @babel/pollyfill도 많이 사용했는데 성능상의 이슈가 있어서 7.4버전 이후로 deprecated 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i core-js@3 -D</code></pre></div>\n<p><strong>babel.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> presets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        targets<span class=\"token punctuation\">:</span> <span class=\"token string\">'> 0.25%, not dead'</span><span class=\"token punctuation\">,</span>\n        useBuiltIns<span class=\"token punctuation\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n        corejs<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">useBuiltIns</code>: pollyfill을 필요한것만 import 할지?말지? 설정 <code class=\"language-text\">usage</code>는 필요한 것만, <code class=\"language-text\">entry</code>는 전부 다 추가해줌. 추가적으로 <code class=\"language-text\">usage</code>로 설정하면 JS코드를 읽는 브라우저를 검사하여 해당 브라우저에 없는! syntax만 pollyfill로 추가해줌!</li>\n<li><code class=\"language-text\">modules</code>: ES6 module syntax를 사용할지?말지? 설정. <code class=\"language-text\">true</code>로 설정하면 <code class=\"language-text\">import, export</code> 를 <code class=\"language-text\">require, module.exports</code>로 대체하게 된다. 위에서 <code class=\"language-text\">false</code>로 설정한 이유는 후에 사용할 Webpack의 Tree Shaking이 <code class=\"language-text\">import, export</code>로 동작하기 때문에 <code class=\"language-text\">false</code>로 설정했다. <code class=\"language-text\">Tree Shaking</code>에 관한 내용은 <a href=\"%5Bhttps://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365%5D(https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365)\">여기</a>를 참고하자.</li>\n</ul>\n<p><strong>6. babel 실행</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx babel src/index.js</code></pre></div>\n<p><strong>확인</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'core-js/modules/es.array.flat'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'core-js/modules/es.array.unscopables.flat'</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<h2 id=\"step2\">😊 Webpack 적용하기</h2>\n<p><strong>1. 필요 module install</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i webpack webpack-cli - D</code></pre></div>\n<p><strong>2. webpack.config.js 작성</strong></p>\n<p>프로젝트 root 디렉토리에 webpack.config.js 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'build.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<ul>\n<li><code class=\"language-text\">entry</code> : webpack이 의존성 분석하는 시작점이다.</li>\n<li><code class=\"language-text\">output</code> 빌드한 결과물을 저장할 <code class=\"language-text\">path</code>와 <code class=\"language-text\">filename</code>을 설정한다. 위 설정은 root 디렉토리의 dist 폴더에 번들된 파일을 저장하고 파일이름을 build.js로 하겠다는 뜻</li>\n</ul>\n<p><strong>3 webpack 실행</strong></p>\n<p><code class=\"language-text\">package.json</code> 파일의 <code class=\"language-text\">scripts</code> 부분에 build 커맨드 추가.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack&quot;,\n  },</code></pre></div>\n<p>터미널에 <code class=\"language-text\">npm run build</code></p>\n<p><strong>4. babel loader 적용</strong></p>\n<p>위에서 단순히 Webpack 으로만 빌드하면 적절히 트랜스파일링된 코드를 얻을 수 없다. babel을 webpack에 적용해서 코드를 트랜스파일링 해보자</p>\n<p>babel을 webpack에 적용하기 위해선 <code class=\"language-text\">babel-loader</code> 모듈 설치가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i babel-loader -D</code></pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'build.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<br/>\n<h2 id=\"step3\">😎 style 관련 loader 적용하기</h2>\n<h3 id=\"1-css-loader\"><a href=\"#1-css-loader\" aria-label=\"1 css loader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. css-loader</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i css-loader -D</code></pre></div>\n<p><strong>1-1. 왜 씀?</strong></p>\n<p>webpack은 모든 파일을 모듈로 관리한다. 하지만 webpack은 js밖에 모른다. 따라서 css 파일을 js파일로 변환해 로딩해야한다. <code class=\"language-text\">css-loader</code>는</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span></code></pre></div>\n<p>css 파일을 <code class=\"language-text\">import</code>할 수 있게 해주고,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// build.js</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span><span class=\"token string\">\"body {\\n  background-color: green;\\n}\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span></code></pre></div>\n<p>bundle하는 과정에서 위와같이, css 코드를 js코드로 변환해준다.</p>\n<p><strong>1-2. 적용하기</strong></p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>생략\nmodule<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"2-style-loader\"><a href=\"#2-style-loader\" aria-label=\"2 style loader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. style-loader</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i style-loader -D</code></pre></div>\n<p><strong>1-1. 왜 씀?</strong></p>\n<p><code class=\"language-text\">css-loader</code> 에 의해 모듈로 변경된 스타일 시트는 돔에 추가되어야만 브라우져가 해석할수 있다. <code class=\"language-text\">style-loader</code>는 자바스크립트로 변경된 스타일시트를 동적으로 <code class=\"language-text\">head</code>태그에 추가하는 로더이다. 보통 CSS를 번들링하기 위해서는 css-loader, style-loader를 함께 사용한다.</p>\n<p><strong>1-2. 적용하기</strong></p>\n<p><code class=\"language-text\">css-loader</code>를 추가했던 부분 앞에 <code class=\"language-text\">style-loader</code>를 추가해준다.</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>생략\n<span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-text\">use</code>는 끝에서부터 왼쪽으로 해석한다. 즉 <code class=\"language-text\">css-loader</code>가 적용된 후 <code class=\"language-text\">style-loader</code>가 적용된다.</p>\n<p><strong>1-3. 고민해볼 부분</strong></p>\n<p><code class=\"language-text\">style-loader</code>를 적용하면 스타일을 적용할 수 있는데 <code class=\"language-text\">head</code>태그에 파일 수 만큼 <code class=\"language-text\">&lt;style&gt;</code> 태그가 생기게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    ... 샬라샬라<span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    ... 샬라샬라<span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 <code class=\"language-text\">style</code> 코드를 따로 파일로 관리하면 좋지않을까?</p>\n<h3 id=\"3-mini-css-extract-plugin\"><a href=\"#3-mini-css-extract-plugin\" aria-label=\"3 mini css extract plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Mini-css-extract-plugin</h3>\n<p><code class=\"language-text\">style-loader</code>는 파일의 수 만큼 <code class=\"language-text\">head</code> 태그에 <code class=\"language-text\">style</code>태그가 생긴다. 이게 마음에 들지 않아서 찾아보니 css파일을 따로 빼서 파일로 관리해주는 플러그인이 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i mini-css-extract-plugin -D</code></pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'build.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'style.css'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 원하는 filename</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>위와같이, 모듈을 <code class=\"language-text\">require</code>해서 <code class=\"language-text\">style-loader</code> 부분에 적용하면 된다. 이와같이 적용하면 style.css 파일에 따로 스타일시트가 모이게 된다.</p>\n<p><code class=\"language-text\">MiniCssExtractPlugin</code>을 적용하면 <code class=\"language-text\">style-loader</code>는 더이상 필요가 없다. 지워주자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall style-loader</code></pre></div>\n<h3 id=\"4-sass-loader\"><a href=\"#4-sass-loader\" aria-label=\"4 sass loader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. sass-loader</h3>\n<p><code class=\"language-text\">sass-loader</code>는 <code class=\"language-text\">.scss</code>, <code class=\"language-text\">.sass</code> 파일을 <code class=\"language-text\">import</code>할 수 있게 하고, 이를 읽어서 <code class=\"language-text\">css</code> 파일로 컴파일 변환시킨다. 따라서 이를 적용하면 <code class=\"language-text\">.scss</code> 작성하여 스타일을 추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i sass-loader -D</code></pre></div>\n<p><code class=\"language-text\">sass-loader</code>는 .scss 파일을 읽어서 .css파일로 변환 시켜줘야 하기 때문에 <code class=\"language-text\">css-loader</code>보다 우선순위가 높다.</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(sa|sc|c)ss$/</span><span class=\"token punctuation\">,</span>\n use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sass-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">test</code>하는 파일을 <code class=\"language-text\">.sass</code>, <code class=\"language-text\">.sass</code>도 추가했고,</li>\n<li>로더의 맨 앞에 <code class=\"language-text\">sass-loader</code>를 추가했다.</li>\n</ul>\n<p><strong>node-sass</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i node-sass</code></pre></div>\n<p>추가적으로 <code class=\"language-text\">node-sass</code> 모듈도 설치하자. 공식 문서에 따르면</p>\n<blockquote>\n<p>node-sass allows you to natively compile .scss files to css at incredible speed and automatically via a connect middleware.</p>\n</blockquote>\n<p>아주 빠르게 css 파일로 컴파일 시켜준다는데 원리는 조금 더 알아봐야할 것 같다.</p>\n<br/>\n<h2 id=\"#step4\">😋 file-loader, url-loader 적용하기</h2>\n<h3 id=\"file-loader\"><a href=\"#file-loader\" aria-label=\"file loader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file-loader</h3>\n<p>webpack은 모든 파일을 모듈로 관리하는데, 이는 file도 예외가 아니다. 따라서 파일을 관리하기 위해서는 <code class=\"language-text\">file-loader</code>를 추가해줘야 한다. 추가적으로 <code class=\"language-text\">file-loader</code>는 실제로 사용되는 파일만 <strong>복사</strong>해서 적용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i file-loader -D</code></pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>생략\n<span class=\"token punctuation\">{</span>\n   test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n   use<span class=\"token punctuation\">:</span> <span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">,</span>\n   exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(sa|sc|c)ss$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sass-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|jpe?g|gif|svg|ico)$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">\"file-loader\"</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"images/[name].[ext]?[hash]\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-text\">file-loader</code>를 적용하면 file을 <code class=\"language-text\">import</code> 해서 사용할 수 있다. 예시는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> woowa <span class=\"token keyword\">from</span> <span class=\"token string\">'./woowabros.png'</span>\n\n<span class=\"token keyword\">const</span> $img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n$img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> woowa\n$img<span class=\"token punctuation\">.</span>alt <span class=\"token operator\">=</span> <span class=\"token string\">'this is woowabros png'</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>$img<span class=\"token punctuation\">)</span></code></pre></div>\n<p>추가적으로 options의 <code class=\"language-text\">name</code>값에 hash를 설정하면, rebundle시 기존의 hash된 파일을 사용해서 불필요한 복사를 막는다.</p>\n<h3 id=\"url-loader\"><a href=\"#url-loader\" aria-label=\"url loader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>url-loader</h3>\n<p><code class=\"language-text\">file-loader</code>는 파일을 복사해서 해싱한 후 사용한다. <code class=\"language-text\">url-loader</code>는 <code class=\"language-text\">file-loader</code>의 기능을 base로 작은 파일이나, 글꼴은 파일로 복사하지 않고 <code class=\"language-text\">toString(&#39;base64&#39;)</code> 로 문자열로 변환하여 bundle 파일에 넣는다. (bunlde 파일이 더 가벼워 지겠군)</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">{</span>\n  loader<span class=\"token punctuation\">:</span> <span class=\"token string\">\"url-loader\"</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"images/[name].[ext]?[hash]\"</span><span class=\"token punctuation\">,</span>\n    limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">file-loader</code>로 설정한 부분을 <code class=\"language-text\">url-loader</code>로 바꿔주기만 하면된다.</li>\n<li><code class=\"language-text\">limit</code>값의 의미는 10kb(10000) 미만의 파일을 <code class=\"language-text\">url-loader</code>로 처리하겠다는 뜻</li>\n<li><code class=\"language-text\">url-loader</code>는 <code class=\"language-text\">file-loader</code>가 있어야 동작한다. 따라서 <code class=\"language-text\">file-loader</code>를 지우면 안된다.</li>\n</ul>\n<br/>\n<h2 id=\"step5\">🎃 모듈을 절대경로로 불러오기</h2>\n<p>개발을 하다보면 상대경로로 모듈을 불러오는게 너무 보기싫다ㅜㅜ babel plugin을 이용하면 이를 절대경로로 불러올 수 있다.</p>\n<p><code class=\"language-text\">module-resolver</code>라는 plugin을 설치하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i babel-plugin-module-resolver -D</code></pre></div>\n<p><strong>babel.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">api</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> presets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        targets<span class=\"token punctuation\">:</span> <span class=\"token string\">'> 0.25%, not dead'</span><span class=\"token punctuation\">,</span>\n        useBuiltIns<span class=\"token punctuation\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n        corejs<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'module-resolver'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      root<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./src'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        imgs<span class=\"token punctuation\">:</span> <span class=\"token string\">'./public/images'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">root</code>는 사용자 정의 프로젝트 루트를 지정한다.</li>\n<li>위와같이 설정하면 <code class=\"language-text\">./src/path/subPath</code> 경로의 무언가를 가져올 때 <code class=\"language-text\">path/subPath</code> 로 가져올 수 있다.</li>\n<li>\n<p><code class=\"language-text\">alias</code>는 말그대로 별명인데 여러개의 경로에 별칭을 줘서 파일을 가져올 때 쉽게 가져올 수 있다. 위에서는 <code class=\"language-text\">imgs</code>라는 별칭으로 <code class=\"language-text\">/public/images</code> 경로를 설정했다. 만약에 예시로, <code class=\"language-text\">./public/images</code> 라는 경로에 <code class=\"language-text\">woowabros.png</code>라는 이미지가 있다면 아래와 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> woowa <span class=\"token keyword\">from</span> <span class=\"token string\">'imgs/woowabros.png'</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<h2 id=\"step6\"> 🥳 Webpack으로 개발서버 띄우기</h2>\n<p>webpack으로 빌드한 후 서버를 띄우기 위해서는 <code class=\"language-text\">webpack-dev-server</code> plugin이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i webpack-dev-server -D</code></pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'build.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(sa|sc|c)ss$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|jpe?g|gif|svg|ico)$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">'images/[name].[ext]?[hash]'</span><span class=\"token punctuation\">,</span>\n              limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* webpack-dev-server */</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// webpack-dev-server에만 쓰는 것은 아님</span>\n  devtool<span class=\"token punctuation\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// webpack-dev-server에만 쓰는 것은 아님</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token punctuation\">:</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* webpack-dev-server */</span>\n\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'style.css'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<ul>\n<li><code class=\"language-text\">mode</code>: <code class=\"language-text\">webpack-dev-server</code>에서만 쓰이는 옵션은 아니지만 넣어야할 때가 된것같다. 이 옵션은 <code class=\"language-text\">development</code>와 <code class=\"language-text\">production</code>, <code class=\"language-text\">none</code> 3개 옵션이 있는데 각 옵션마다 기본적으로 설정되는 플러그인, NODE 환경변수(process.env)가 다르다. 자세한 사항은 <a href=\"https://ibrahimovic.tistory.com/51\">여기</a> 를 참고하자</li>\n<li><code class=\"language-text\">devtool</code> : debug tool을 정해준다. source-map은 원본 소스와 난독화된 소스를 맵핑 시켜주는 하나의 방법이다. 자세한 사항은 <a href=\"https://perfectacle.github.io/2016/11/14/Webpack-devtool-option-Performance/\">여기</a> 를 참고하자</li>\n<li><code class=\"language-text\">contentBase</code> : 서버를 띄울 때 서빙할 폴더 설정</li>\n<li><code class=\"language-text\">port</code>: 서버를 띄울 port</li>\n<li><code class=\"language-text\">hot</code>: 코드가 수정되면 자동으로 re-build 한다.</li>\n<li>webpack-dev-server의 빌드 결과물은 사실, 실제 파일로 빌드되진 않고 메모리에 저장된다.</li>\n</ul>\n<p><strong>package.json</strong></p>\n<p>scripts 부분에 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">...생략\n<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --open --config webpack.config.js\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>추가한 뒤 <code class=\"language-text\">npm run build</code> 커맨드로 9000 포트에 개발 서버를 띄울 수 있다.</p>\n<br/>\n<h2 id=\"step7\"> 😸 개발서버, 실서버 환경 분리하기</h2>\n<p><code class=\"language-text\">webpack-dev-server</code>는 개발 환경에만 종속되는 plugin이기도 하고 개발서버, 실서버 환경을 분리해서 작성해주는게 좋기 때문에 나눠보자. 이때 공통된 속성을 정의해서 불러오기 위해 <code class=\"language-text\">webpack-merge</code> 모듈이 필요하다</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i webpack-merge -D</code></pre></div>\n<p><strong>webpack.common.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'build.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(sa|sc|c)ss$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sass-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|jpe?g|gif|svg|ico)$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// useRelativePath: true,</span>\n              name<span class=\"token punctuation\">:</span> <span class=\"token string\">'images/[name].[ext]?[hash]'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token comment\">// publicPath: \"./dist/\",</span>\n              limit<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'style.css'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'build.js'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p><code class=\"language-text\">webpack-dev-server</code> 관련 코드를 제거하고 <code class=\"language-text\">CleanWebpackPlugin</code> 설치하여 추가적으로 적용했다. <code class=\"language-text\">CleanWebpackPlugin</code>은 re-build될 때 기존의 결과물을 제거해준다.</p>\n<p><strong>webpack.development.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> commonConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.common'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>commonConfig<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token punctuation\">:</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>공통으로 설정한 config 모듈을 불러와서 <code class=\"language-text\">merge</code> 시켰다.</p>\n<p><strong>webpack.proud.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> commonConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.common'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> prodConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>commonConfig<span class=\"token punctuation\">,</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> prodConfig</code></pre></div>\n<p>이것은 production 환경.</p>\n<p>config 파일을 분리했으니 <code class=\"language-text\">package.json</code>의 scripts도 수정해야한다.</p>\n<p><strong>package.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">...생략\n<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --open --config webpack.dev.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"build:production\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --config webpack.prod.js\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">npm run build</code>는 webpack-dev-server로 개발서버를 띄우고 webpack.dev.js를 참조한다.</li>\n<li><code class=\"language-text\">nom run build:production</code>은 개발서버를 띄우지 않고 번들링만 한다. 그리고 webpack.prod.js를 참조한다.</li>\n</ul>\n<br/>\n<h2 id=\"step8\">👿 후기</h2>\n<p>누가 webpack은 학문을 공부하는 것이라고 했던 것 같은데, 막상 해보니까 진짜인 것 같다. 해도 해도 끝이 없이 나온다 (옵션들이..). 하지만 이번 경험을 토대로 혼자 프론트엔드 개발 환경 셋팅을 어느정도 할 줄 알게 된 것 같다. babel &#x26; wepack 설정 이라는 두려움도 없어지고 ㅎㅎ,, 개발을 하면서 그떄 그때 필요한 플러그인들을 적용하며 알아가고 일단은 여기까지만 해야겠다..</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ol>\n<li><a href=\"https://babeljs.io/docs/en/\">https://babeljs.io/docs/en/</a></li>\n<li><a href=\"https://moonformeli.tistory.com/28\">https://moonformeli.tistory.com/28</a></li>\n<li><a href=\"https://beomy.tistory.com/41\">https://beomy.tistory.com/41</a></li>\n<li><a href=\"https://github.com/parkjihwanjay/boilerplate/wiki/webpack,-babel-%EC%84%A4%EC%A0%95\">https://github.com/parkjihwanjay/boilerplate/wiki/webpack,-babel-%EC%84%A4%EC%A0%95</a></li>\n<li><a href=\"https://github.com/hg-pyun/minipack-kr/blob/master/src/minipack.js\">https://github.com/hg-pyun/minipack-kr/blob/master/src/minipack.js</a></li>\n<li><a href=\"https://github.com/jungcome7/5.Study/blob/master/dependencies%20vs.%20devDependencies.md\">https://github.com/jungcome7/5.Study/blob/master/dependencies%20vs.%20devDependencies.md</a></li>\n<li><a href=\"https://poiemaweb.com/es6-babel-webpack-1\">https://poiemaweb.com/es6-babel-webpack-1</a></li>\n<li><a href=\"https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365\">https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365</a></li>\n<li><a href=\"http://jeonghwan-kim.github.io/js/2017/05/15/webpack.html\">http://jeonghwan-kim.github.io/js/2017/05/15/webpack.html</a></li>\n<li><a href=\"https://wonism.github.io/react-native-alias/\">https://wonism.github.io/react-native-alias/</a></li>\n<li><a href=\"https://ibrahimovic.tistory.com/51\">https://ibrahimovic.tistory.com/51</a></li>\n<li><a href=\"https://perfectacle.github.io/2016/11/14/Webpack-devtool-option-Performance/\">https://perfectacle.github.io/2016/11/14/Webpack-devtool-option-Performance/</a></li>\n</ol>","frontmatter":{"title":"프론트엔드 개발환경 설정(babel & webpack)","date":"July 20, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/node/프론트엔드-개발환경-설정(babel-&-webpack)/","previous":{"fields":{"slug":"/html/태그-해부학(3)/"},"frontmatter":{"title":"태그 해부학(3)","category":"html"}},"next":null}}}