{"componentChunkName":"component---src-templates-blog-post-js","path":"/leetcode/20200525-리트코드/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"e2bd5bcc-49a7-5609-90b2-d691247bf56d","excerpt":"Add Two Numbers 입력으로 양의 정수가 저장된 가 주어질 때 각 리스트를 reverse한 값을 더하고 다시 로 만드는 문제이다. Js에서는 같은 풀이로 풀면 두 리스트의 합이 1경이 넘어간 시점부터 합을 리스트로 바꾸는 과정에서 잘못된 연산을 한다. -(2⁵³-1) 부터 2⁵³ -1 까지는 정확히 IEEE-754로 표현될 수 있지만, 그 초과와 이하 는 IEEE-754로 직접 표현될 수 없으며 가까운 수나 0으로 반올림 한다.\n라고 구글에 나와있는데 그럼…","html":"<h3 id=\"add-two-numbers\" style=\"position:relative;\"><a href=\"#add-two-numbers\" aria-label=\"add two numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Two Numbers</h3>\n<p>입력으로 양의 정수가 저장된 <code class=\"language-text\">LinkedList</code>가 주어질 때 각 리스트를 reverse한 값을 더하고 다시 <code class=\"language-text\">LinkedList</code>로 만드는 문제이다.</p>\n<p>Js에서는 같은 풀이로 풀면 두 리스트의 합이 1경이 넘어간 시점부터 합을 리스트로 바꾸는 과정에서 잘못된 연산을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">98765432198765245</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8...........</span></code></pre></div>\n<p>-(2⁵³-1) 부터 2⁵³ -1 까지는 정확히 IEEE-754로 표현될 수 있지만, 그 초과와 이하 는 IEEE-754로 직접 표현될 수 없으며 가까운 수나 0으로 반올림 한다.\n라고 구글에 나와있는데 그럼 0이 나와야하는거 아닌가,, 나중에 스터디 있을 때 리터분들한테 물어봐야겠다.</p>\n<blockquote>\n<p><a href=\"https://www.exploringbinary.com/floating-point-converter/\">https://www.exploringbinary.com/floating-point-converter/</a> 에 따르면\n98765432198765245에 가장 가까운 숫자는 98765432198765248이다. 따라서 8이 나온다</p>\n</blockquote>\n<p>그래서 일단은 파이썬으로 풀었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">*</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">converNumToListNode</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cur <span class=\"token operator\">=</span> result\n    <span class=\"token keyword\">while</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        cur<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n        num <span class=\"token operator\">//=</span> <span class=\"token number\">10</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">return</span> result\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        total <span class=\"token operator\">=</span> getSum<span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> getSum<span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> converNumToListNode<span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"20200525 리트코드","date":"May 27, 2020"}}},"pageContext":{"slug":"/leetcode/20200525-리트코드/","previous":{"fields":{"slug":"/algorithm/20200525-알고리즘/"},"frontmatter":{"title":"20200525 알고리즘","category":"algorithm"}},"next":{"fields":{"slug":"/cs/브라우저-렌더링-과정/"},"frontmatter":{"title":"브라우저 렌더링 과정","category":"cs"}}}},"staticQueryHashes":["3128451518","96099027"]}