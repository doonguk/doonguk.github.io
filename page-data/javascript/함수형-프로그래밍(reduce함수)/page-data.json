{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/함수형-프로그래밍(reduce함수)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"5d7f2a43-73f6-5f04-a8b7-a710b8c2f956","excerpt":"reduce 함수는 이러터블의 원소들을 다 더해서 하나의 값으로 만들고 싶을 때 사용한다. 1. 구현 위와 같은 기능을 하는 함수가 reduce 이다. 외부 인터페이스에서는 reduce 함수가 어떻게 사용될까? 외부 인터페이스에서는 보조함수, 시작값, 이터러블(well-formed 이터레이터) 을 인자로 받는다. 이 reduce함수가 내부적으로 동작하는 방식은 0을 시작값으로 하여 재귀적으로 add 함수가 호출되어 값을 누적시키는 구조이다.  이 구조를 구현 해보자. 코드를 보면 map…","html":"<blockquote>\n<p>reduce 함수는 이러터블의 원소들을 다 더해서 하나의 값으로 만들고 싶을 때 사용한다.</p>\n</blockquote>\n<h3 id=\"1-구현\"><a href=\"#1-%EA%B5%AC%ED%98%84\" aria-label=\"1 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> a\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 기능을 하는 함수가 reduce 이다.</p>\n<p>외부 인터페이스에서는 reduce 함수가 어떻게 사용될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>외부 인터페이스에서는 보조함수, 시작값, 이터러블(well-formed 이터레이터) 을 인자로 받는다. 이 reduce함수가 내부적으로 동작하는 방식은</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>0을 시작값으로 하여 재귀적으로 add 함수가 호출되어 값을 누적시키는 구조이다. </p>\n<p>이 구조를 구현 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    acc <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> acc\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 보면 map, filter와 비슷하게 기존에 total + a 로 값을 직접 계산 해주던 부분( <strong>어떻게 값을 축약할지 하는 부분을</strong> )을 보조함수 에게 위임 하였다.</p>\n<p>자바스크립트에서는 acc값이 없어도 reduce함수가 사용하도록 구현 되어있는데 원리는 이렇다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 이터러블에서 첫번째 원소를 자동으로 acc로 설정하여 동작하는게 그 원리이다. 그럼 이를 위에서 작성한 코드에 구현해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    iter <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// acc가 없다면 2번째 파라미터로 전달된 acc가 이터러블</span>\n    acc <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    acc <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> acc\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>초기값이 없다면 파라미터로 온 acc 값이 이터러블 인데, 이 이터러블로 이터레이터를 생성한뒤 next() 함수를 호출하여 초기값을 설정해 주었다. </p>\n<p>마지막으로 object 배열에서 가격에 해당하는 키의 value 값 을 모두 더하는 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'안경'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'안경2'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'안경3'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'안경4'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'안경5'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">]</span>\n\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       iter <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       acc <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       acc <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> acc\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n       <span class=\"token punctuation\">(</span><span class=\"token parameter\">total_price<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total_price <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span>\n       <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       products\n   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"함수형 프로그래밍(reduce)","date":"November 27, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/함수형-프로그래밍(reduce함수)/","previous":{"fields":{"slug":"/javascript/함수형-프로그래밍-(map함수)/"},"frontmatter":{"title":"함수형 프로그래밍 (map)","category":"javascript"}},"next":{"fields":{"slug":"/javascript/함수형-프로그래밍(filter함수)/"},"frontmatter":{"title":"함수형 프로그래밍(filter)","category":"javascript"}}}}}