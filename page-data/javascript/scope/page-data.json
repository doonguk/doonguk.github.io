{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/scope/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"3ab6e888-c983-50f5-bff7-80b308bf7231","excerpt":"전역변수 & 지역변수 ex 함수 바깥의 x는 전역변수 , ex 함수의 안의 x는 지역변수. 위의 상황에서 지역변수는 아무리 해도 전역변수에 영향을 끼칠 수 없다. 바로 스코프 때문이다.  스코프 (Scope) 자바스크립트는 변수의 범위를 호출한 함수의 활성객체 부터 전역객체까지 점차 넓혀가며 찾는다. 함수 ex의 범위 안에 x가 없기 때문에 현재 실행컨텍스트의 스코프체인을 통해서 상위 컨텍스트( 여기서는 GEC )를 찾게된다.   렉시컬 스코핑( Lexical Scoping…","html":"<h2 id=\"전역변수--지역변수\"><a href=\"#%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98--%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98\" aria-label=\"전역변수  지역변수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역변수 &#x26; 지역변수</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'local'</span>\n  x <span class=\"token operator\">=</span> <span class=\"token string\">'change'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// global</span></code></pre></div>\n<p>ex 함수 바깥의 x는 <strong>전역변수</strong> , ex 함수의 안의 x는 <strong>지역변수</strong>. 위의 상황에서 지역변수는 아무리 해도 전역변수에 영향을 끼칠 수 없다. 바로 <strong>스코프</strong> 때문이다. </p>\n<h2 id=\"스코프-scope\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-scope\" aria-label=\"스코프 scope permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 (Scope)</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> <span class=\"token string\">'change'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// change</span></code></pre></div>\n<p>자바스크립트는 변수의 <strong>범위</strong>를 호출한 함수의 활성객체 부터 전역객체까지 점차 넓혀가며 찾는다. 함수 ex의 범위 안에 x가 없기 때문에 현재 실행컨텍스트의 스코프체인을 통해서 상위 컨텍스트( 여기서는 GEC )를 찾게된다.  </p>\n<h2 id=\"렉시컬-스코핑-lexical-scoping-\"><a href=\"#%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%95%91-lexical-scoping-\" aria-label=\"렉시컬 스코핑 lexical scoping  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렉시컬 스코핑( Lexical Scoping )</h2>\n<ol>\n<li>변수의 범위를 호출한 함수의 지역 스코프부터 전역 변수들이 있는 전역 스코프까지 점차 넓혀가며 찾는다. ( 스코프 체인 )</li>\n<li><strong>스코프는 함수를 호출할 때가 아닌 선언할 때 생긴다(Lexical Scoping)</strong> 따라서 정적 스코프라고도 불린다.</li>\n<li>현재 실행컨텍스트의 스코프 체인이 초기화될 때 스코프 체인의 선두에는 현재 실행컨텍스트가 참조하는 활성객체를 넣는건 모든 컨텐스트가 같지만, 그 뒤에 들어오는 활성 객체들 ( 현재 실행컨텍스트가 참조 가능한 객체들 )은 <strong>함수가 선언된 시점에 의해서 결정된다.</strong> (Lexical Scoping)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> gVar <span class=\"token operator\">=</span> <span class=\"token string\">'donguk'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  gVar <span class=\"token operator\">=</span> <span class=\"token string\">'dongdong'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> gVar <span class=\"token operator\">=</span> <span class=\"token string\">'ukuk'</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>JS에서는 함수를 실행할 때가 아닌 선언할 때 스코프가 생기기 때문에 위 <code class=\"language-text\">log</code> 함수 내부의 <code class=\"language-text\">gVar</code> 변수는 글로벌 객체의 <code class=\"language-text\">gVar</code>를 참조한다. ( log 함수의 실행 컨텍스트의 스코프체인에 1번째 인덱스에 <code class=\"language-text\">wrapper</code>함수가 아닌 <code class=\"language-text\">global execution context</code>가 있기 때문. )</p>\n<h2 id=\"스코프에-따른-문제-발생--전역변수-오염\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84%EC%97%90-%EB%94%B0%EB%A5%B8-%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D--%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EC%98%A4%EC%97%BC\" aria-label=\"스코프에 따른 문제 발생  전역변수 오염 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프에 따른 문제 발생 > 전역변수 오염</h2>\n<p>무분별한 전역변수 사용은 여러 자바스크립트 파일이 참조하면서 오염될 가능성이 높다.</p>\n<p>이를 해결하기 위한 방법은? <strong>네임스페이스</strong>를 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">:</span> <span class=\"token string\">'local'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 객체로 오염될 가능성이 있는 변수를 종속시킨다. 하지만 위 방법도 <code class=\"language-text\">obj.x = &#39;hi&#39;</code> 와 같은 코드에 무너질 가능성이 높다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">another</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'local'</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> y <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> newScope <span class=\"token operator\">=</span> <span class=\"token function\">another</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와같은 방법으로 문제를 해결할 수 있다. <code class=\"language-text\">another</code> 함수를 실행시키면 <code class=\"language-text\">newScope</code>라는 <strong>네임스페이스</strong>를 통해 y를 참조할 수 있다. 하지만 x는 접근할 수 없다. ( x는 <strong>비공개 변수</strong> , y는 <strong>공개 변수</strong> )</p>\n<h3 id=\"iife--즉시-호출-함수-표현식-\"><a href=\"#iife--%EC%A6%89%EC%8B%9C-%ED%98%B8%EC%B6%9C-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D-\" aria-label=\"iife  즉시 호출 함수 표현식  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IIFE ( 즉시 호출 함수 표현식 )</h3>\n<p>위의 코드를 더 간단하게 할 수 있다. ( 함수 표현식만 가능하다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> newScope <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'local'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">y</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 패턴을 <strong>즉시 호출 함수 표현식</strong>이라고 하고, <strong>모듈 패턴</strong>이라고 한다.( 많은 라이브러리에서 사용하고 있다. ) 함수를 선언하자마자 바로 실행하는 개념이다. 즉시 호출 함수 표현식은 <strong>비공개 변수를 만들어주는 기능을 한다.</strong></p>\n<blockquote>\n<p>즉시 호출 함수 표현식을 사용하면 <strong>네임스페이스</strong>를 확보할 수 있고, 비공개 변수를 만들 수 있다</p>\n<p>그 외에도, 변수에 별칭을 줘서 <strong>전역 변수가 오염되는 것을 막을 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span></code></pre></div>\n</blockquote>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ol>\n<li><a href=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/javascript/scope.md\">https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/javascript/scope.md</a></li>\n<li><a href=\"https://www.zerocho.com/category/JavaScript/post/5740531574288ebc5f2ba97e\">https://www.zerocho.com/category/JavaScript/post/5740531574288ebc5f2ba97e</a></li>\n</ol>","frontmatter":{"title":"Scope","date":"June 07, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/scope/","previous":{"fields":{"slug":"/cs/xss-&-csrf/"},"frontmatter":{"title":"XSS & CSRF","category":"cs"}},"next":{"fields":{"slug":"/javascript/네이티브-객체-&-호스트-객체/"},"frontmatter":{"title":"네이티브 객체 & 호스트 객체","category":"javascript"}}}}}