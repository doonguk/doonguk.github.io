{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/go,pipe,reduce-비동기제어/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"26f96221-59f2-5aac-b683-52278d5ebb42","excerpt":"go, pipe, reduce 에서 비동기 제어 1. go 만약 중간에 비동기 상황이 일어난 함수가 실행 된다면 기존에 만들었던 go 함수는 정상적으로 동작하지 않는다.  하지만! 이전포스트 에서 만들었던 go1 함수처럼 비슷하게 구현이 가능하다. 우선 go함수를 보면 사용된 함수는 reduce 함수 이므로 이를 수정 해 줘야한다.  오랜만에 reduce 함수를 보면, 함수와 이터러블을 받고 만약 iter가 없다면( acc가 없다면 ) 이터레이터를 생성하여 원소를 하나 꺼내서 acc…","html":"<blockquote>\n<h1 id=\"go-pipe-reduce-에서-비동기-제어\"><a href=\"#go-pipe-reduce-%EC%97%90%EC%84%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%A0%9C%EC%96%B4\" aria-label=\"go pipe reduce 에서 비동기 제어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go, pipe, reduce 에서 비동기 제어</h1>\n</blockquote>\n<h2 id=\"1-go\"><a href=\"#1-go\" aria-label=\"1 go permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. go</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\nlog<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Object Promise]1000</span></code></pre></div>\n<p>만약 중간에 비동기 상황이 일어난 함수가 실행 된다면 기존에 만들었던 go 함수는 정상적으로 동작하지 않는다.  하지만!</p>\n<p><a href=\"%5Bhttps://doonguk.github.io/javascript/%EA%B0%92%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-promise/%5D(https://doonguk.github.io/javascript/%EA%B0%92%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-promise/)\">이전포스트</a> 에서 만들었던 go1 함수처럼 비슷하게 구현이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//go 함수</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></code></pre></div>\n<p>우선 go함수를 보면 사용된 함수는 reduce 함수 이므로 이를 수정 해 줘야한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//reduce</span>\n<span class=\"token keyword\">const</span> reduce <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    iter <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    acc <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> cur\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value\n    acc <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> acc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>오랜만에 reduce 함수를 보면, 함수와 이터러블을 받고 만약 iter가 없다면( acc가 없다면 ) 이터레이터를 생성하여 원소를 하나 꺼내서 acc의 초기 값으로 설정하고 남은 원소를 순회 하면서 acc값에 인자로 받은 f를 실행한 값을 저장하는 함수 이다. 그렇다면 맨 위의 예제에서 <code>() => Promise.resolve(a+100)</code>이라는 값은 언젠가 acc에 저장될 것 이다. ( 즉, acc가 언젠가는 Promise가 될 것이다. 라는 말이다.)</p>\n<p>먼저 간단한 프로미스를 처리하는 방법은</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span> <span class=\"token comment\">//reduce 함수</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value\n    acc <span class=\"token operator\">=</span> acc <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span> <span class=\"token operator\">?</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">acc</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이렇게 구현한다면, <strong>중간에 Promise를 만났을 때 그 이후의 함수들은 Promise 체인에 의해 프로미스에 나머지 함수들을 합성하기 때문에 연속적으로 비동기가 일어나게 된다.</strong> 그럼 당연히 성능도 떨어지게 된다.  따라서 중간에 Promise를 만나도, Promise가 아닐때는 동기적으로 while문을 통해 나아갈 수 있도록 해줘야 한다.</p>\n<p>이럴땐 <strong>재귀</strong>를 이용하면 좋다. </p>\n<ul>\n<li>구현!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reduce <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    iter <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    acc <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와같이 유명함수를 선언하고 즉시 실행을 한다. 유명함수를 선언한 이유는 언제든 재귀를 하기 위해서 이다.</p>\n<p><strong>( 참고 : 함수를 값으로 다루면서 이름을 짓는 기법을 유명함수라고 한다. )</strong></p>\n<p>함수를 즉시 실행할 때 acc를 유명함수에 전달 해 주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>여기서 받은acc를\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드처럼 즉시실행 할 때 파라미터로 값을 넣어주면, 즉시실행 되는 함수의 인자로 전달 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>생략\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> cur\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    acc <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n  \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>acc <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>recur<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> acc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">)</span></code></pre></div>\n<p>일단 f(acc, a)로 합쳐보고 acc값이 프로미스면 프로미스가 처리된 값으로 재귀함수를 호출한다. ( 만약 프로미스가 아니면 while문을 다시 순회한다. 어차피 while문은 이터레이터의 done 값을 기준, 즉 next()함수를 몇번 호출 했는가 를 기준으로 순회하기 때문에 재귀함수로 while문을 다시 시작해도 전체 순회 횟수는 같다. )</p>\n<p>하지만 위의 코드에도 커버하지 못하는 이슈가 있다. 만약에 acc의 <strong>첫번째 값으로 Promise가 들어오는 case</strong> 이다. 이 같은 경우는 <a href=\"%5Bhttps://doonguk.github.io/javascript/%EA%B0%92%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-promise/%5D(https://doonguk.github.io/javascript/%EA%B0%92%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-promise/)\">이전포스트</a> 에서 만들었던 go1 함수를 한번더 이용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>생략\n<span class=\"token keyword\">return</span> <span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">let</span> cur\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value\n    acc <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>acc <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>recur<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> acc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 애초에 처음 들어오는 acc가 Promise인 case</span></code></pre></div>\n<p>위와같이 구현하면 된다.</p>\n<ul>\n<li>Reject</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'나가자'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\nlog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>reject된 경우에는 아래 함수들이 실행되지 않고 바로 reject된다. reject된 값은 catch문으로 잡을 수 있다.</p>\n<ul>\n<li>결론</li>\n</ul>\n<p>프로미스를 값으로 다루면서 프로미스를 단순히 then~then 으로 콜백 지옥 해결 용도로만 사용하는게 아니라 프로미스라는 값을 가지고 내가 원하는 용도로 사용한다 거나, 원하는 시점에 적절한 함수를 실행하는 용도로 사용할 수 있다.</p>","frontmatter":{"title":"go,pipe,reduce 비동기제어","date":"December 24, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/go,pipe,reduce-비동기제어/","previous":{"fields":{"slug":"/javascript/모나드와-promise/"},"frontmatter":{"title":"모나드와 Promise","category":"javascript"}},"next":null}}}