{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/메모리-힙-&-콜-스택/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"93e0b9e2-093e-52b7-a7ef-a18ba075aa86","excerpt":"콜스택, 메모리힙? 자바스크립트 엔진이 구동되면서 코드를 읽고 실행하는 과정에서 중요한 두단계가 있다. 정보(ex 변수, 함수)를 특정한 장소에 저장하는 것과 현재 실행되고 있는 코드를 트래킹하는 작업이 그 두가지이다. 여기서 정보를 저장하는 공간(Memory Allocation이 발생하는 공간)을 메모리 힙(Memory Heap)이고, 실행 중인 코드를 트래킹하는 공간이 콜 스택(Call Stack…","html":"<h3 id=\"콜스택-메모리힙\"><a href=\"#%EC%BD%9C%EC%8A%A4%ED%83%9D-%EB%A9%94%EB%AA%A8%EB%A6%AC%ED%9E%99\" aria-label=\"콜스택 메모리힙 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜스택, 메모리힙?</h3>\n<p>자바스크립트 엔진이 구동되면서 코드를 읽고 실행하는 과정에서 중요한 두단계가 있다.</p>\n<p>정보(ex 변수, 함수)를 특정한 장소에 저장하는 것과 현재 실행되고 있는 코드를 트래킹하는 작업이 그 두가지이다.</p>\n<p>여기서 <strong>정보를 저장하는 공간(Memory Allocation이 발생하는 공간)을 메모리 힙(Memory Heap)이고, 실행 중인 코드를 트래킹하는 공간이 콜 스택(Call Stack)</strong>이다.</p>\n<h3 id=\"콜스택\"><a href=\"#%EC%BD%9C%EC%8A%A4%ED%83%9D\" aria-label=\"콜스택 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜스택</h3>\n<p>콜스택은 <strong>메모리에 존재하는 공간 중의 하나</strong>로, 코드를 읽어내려가면서 수행할 작업들을 밑에서부터 하나씩 쌓고, 메모리 힙에서 작업 수행에 필요한 것들을 찾아서 작업을 수행하는 공간이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">subtractTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sumTotal <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">subtractTwo</span><span class=\"token punctuation\">(</span>sumTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 코드가 있을 때 콜스택의 관점에서 살펴보면,</p>\n<p><code class=\"language-text\">anonymous</code>(GO) 라는 함수가 스택의 가장 밑에 쌓인다. 그 뒤 <code class=\"language-text\">calcaluate</code> 함수가 쌓이고 <code class=\"language-text\">calculate</code>함수가 스택에서 제거되기 전에 <code class=\"language-text\">subtractTwo</code>함수가 스택에 쌓이고 계산된 값을 리턴하면 <code class=\"language-text\">subtractTwo</code>, <code class=\"language-text\">calculate</code>, <code class=\"language-text\">anonymous</code> 순으로 스택에서 제거된다.  </p>\n<p>위와 같은 순서로 실행되면서 자바스크립트 엔진은 메모리 힙을 참고하여 코드 실행에 필요한 변수, 함수등의 위치를 참조하면서 실행한다. <strong>참고로 JS의 원시형 ( String, Number, Symbol, undefined, null, boolean)은 콜 스택에 저장되고, Object형 ( Object, Array, function )은 메모리 힙에 저장된다.</strong></p>\n</br>\n<h3 id=\"가비치-컬렉터\"><a href=\"#%EA%B0%80%EB%B9%84%EC%B9%98-%EC%BB%AC%EB%A0%89%ED%84%B0\" aria-label=\"가비치 컬렉터 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비치 컬렉터</h3>\n<p>콜스택과 메모리힙의 공간은 한정적이다. 따라서 효율적으로 관리할 필요가 있다. 자바스크립트 엔진은 이를 위해 더 이상 효용가치가 없다고 판단되는 변수, 함수등을 <strong>함수 실행 종료 후 메모리 힙에서 제거하는 동작을 수행</strong>(참조의 여부로 컬렉팅을 수행) 한다. 필요한 데이터만 메모리 힙에 저장함으로써 메모리를 더욱 여유롭게 관리한다. 따라서 자바스크립트는 <strong>Garbage Collected Language</strong>라고 말할 수 있고 이러한 역할을 수행하는 도구를 <strong>Garbage Collector</strong>라고 한다.</p>\n<p>가비치 컬렉터가 작동하는 원리는 <code class=\"language-text\">Mark and Sweep Algorithms</code>을 사용한다.</p>\n<blockquote>\n<p>Mark And Sweep Algorithm</p>\n<p>가비지 컬렉터에는 GC Root가 있다. GC Root는 말그대로 가비지 컬렉터의 Root를 의미하고 힙 외부에서 접근하는 변수나 오브젝트가 될수있다. </p>\n<ol>\n<li>GC Root에서 시작해서 참조가 가능한 값들을 가비지 컬렉터는 Mark한다.</li>\n<li>Mark가 끝나면 힙 내부를 돌면서 Mark되지 않은 메모리들을 해체한다( OS에 반환한다. ). 이를 Sweep이라고 한다.</li>\n</ol>\n</blockquote>\n<h3 id=\"메모리-누수-memory-leak-\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98-memory-leak-\" aria-label=\"메모리 누수 memory leak  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 누수( Memory Leak )</h3>\n<p>자바스크립트에서 발생할 수 있는 메모리 누수에는 몇가지 일반적인 케이스가 있다.</p>\n<h4 id=\"1-우발적으로-생성된-전역변수-그리고-캐시\"><a href=\"#1-%EC%9A%B0%EB%B0%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%BA%90%EC%8B%9C\" aria-label=\"1 우발적으로 생성된 전역변수 그리고 캐시 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 우발적으로 생성된 전역변수 그리고 캐시</h4>\n<p><code class=\"language-text\">global Object</code>에 전역 변수로 선언된 값은 <code class=\"language-text\">null</code>로 처리하거나 <strong>재할당</strong>하지 않는 한 가비지 컬렉터에 의해 수집되지 않는다. 또 <strong>캐시는 수집되지 않기 때문에 캐시사이즈가 점점 커진다면 방대한 메모리 사용을 야기시킬 수 있다.</strong></p>\n<h4 id=\"2-잊혀진-타이머와-콜백\"><a href=\"#2-%EC%9E%8A%ED%98%80%EC%A7%84-%ED%83%80%EC%9D%B4%EB%A8%B8%EC%99%80-%EC%BD%9C%EB%B0%B1\" aria-label=\"2 잊혀진 타이머와 콜백 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 잊혀진 타이머와 콜백</h4>\n<p><code class=\"language-text\">setInterval</code>, <code class=\"language-text\">addEventListener</code>와 같은 핸들러를 수집하지 않으면 이 핸들러에 의존하는 객체들도 수집되지 않게된다.  따라서 명시적으로 제거해주게 좋다.</p>\n<h4 id=\"3-dom-외부에서의-참조\"><a href=\"#3-dom-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C%EC%9D%98-%EC%B0%B8%EC%A1%B0\" aria-label=\"3 dom 외부에서의 참조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. DOM 외부에서의 참조</h4>\n<p>예를들어 JS 코드에서 특정 테이블의 셀을 참조하는 코드가 있다고 하자. 나중에 DOM에서 해당 테이블을 제거하기로 하였지만 여전히 JS코드에서 셀에대한 참조를 갖고있다. 셀은 부모요소인 table을 참조하기 때문에 테이블 전체가 메모리에 상주하게 된다. 따라서 DOM을 외부에서 참조할 때 이 점을 주의해야 한다.</p>\n<h4 id=\"4-클로져\"><a href=\"#4-%ED%81%B4%EB%A1%9C%EC%A0%B8\" aria-label=\"4 클로져 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 클로져</h4>\n<p>JS에서는 함수내부의 <code class=\"language-text\">[[Scope]]</code> 프라퍼티로 외부함수의 실행컨텍스트가 제거되어도 외부함수의 활성객체를 참조할 수 있고 메모리에는 외부함수의 변수들이 계속 상주하게 된다. 따라서 잘못된 클로져 사용은 메모리 사용을 발생시킬 수 있다.</p>\n<h3 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ol>\n<li><a href=\"https://imasoftwareengineer.tistory.com/103\">https://imasoftwareengineer.tistory.com/103</a></li>\n<li><a href=\"https://soldonii.tistory.com/53\">https://soldonii.tistory.com/53</a></li>\n<li>[https://itstory.tk/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EC%9D%98-4%EA%B0%80%EC%A7%80-%ED%98%95%ED%83%9C](</li>\n</ol>","frontmatter":{"title":"메모리 힙 & 콜 스택","date":"June 03, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/메모리-힙-&-콜-스택/","previous":{"fields":{"slug":"/leetcode/20200529-리트코드/"},"frontmatter":{"title":"20200529 리트코드","category":"leetcode"}},"next":null}}}