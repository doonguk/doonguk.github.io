{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/함수형-프로그래밍(사용자-정의-이터러블)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"5610527d-1b94-5be7-958d-5f1a19ab72a8","excerpt":"사용자 정의 이터러블, 이터레이터 구현 1.이터러블은 Symbol.iterator () 메소드를 가지고 있어야 한다. 2. Symbol.iterator () 메소드는  이터레이터를 반환해야한다. 이 이터레이터는 next ()  메소드를 가지고 있어야 한다. 3. next ()  메소드는 value와 done을 key갑으로 가지는 객체를 리턴해야 한다. 4. 만든 이터러블로 이터레이터 만들기 만든 이터러블의 Symbol.iterator…","html":"<blockquote>\n<h3 id=\"사용자-정의-이터러블-이터레이터-구현\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%EA%B5%AC%ED%98%84\" aria-label=\"사용자 정의 이터러블 이터레이터 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 정의 이터러블, 이터레이터 구현</h3>\n</blockquote>\n<h4 id=\"1이터러블은-codesymboliterator-code-메소드를-가지고-있어야-한다\"><a href=\"#1%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94%EC%9D%80-codesymboliterator-code-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"1이터러블은 codesymboliterator code 메소드를 가지고 있어야 한다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.이터러블은 <code>[Symbol.iterator] ()</code> 메소드를 가지고 있어야 한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-codesymboliterator-code-메소드는--이터레이터를-반환해야한다-이-이터레이터는-codenext--code-메소드를-가지고-있어야-한다\"><a href=\"#2-codesymboliterator-code-%EB%A9%94%EC%86%8C%EB%93%9C%EB%8A%94--%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%B4%EC%95%BC%ED%95%9C%EB%8B%A4-%EC%9D%B4-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0%EB%8A%94-codenext--code-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"2 codesymboliterator code 메소드는  이터레이터를 반환해야한다 이 이터레이터는 codenext  code 메소드를 가지고 있어야 한다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code>[Symbol.iterator] ()</code> 메소드는  이터레이터를 반환해야한다. 이 이터레이터는 <code>next () </code> 메소드를 가지고 있어야 한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-codenext--code-메소드는-value와-done을-key갑으로-가지는-객체를-리턴해야-한다\"><a href=\"#3-codenext--code-%EB%A9%94%EC%86%8C%EB%93%9C%EB%8A%94-value%EC%99%80-done%EC%9D%84-key%EA%B0%91%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%A7%80%EB%8A%94-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"3 codenext  code 메소드는 value와 done을 key갑으로 가지는 객체를 리턴해야 한다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code>next () </code> 메소드는 value와 done을 key갑으로 가지는 객체를 리턴해야 한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 여기서는 1,2,3 value를 가지는 이터러블로 진행</span>\n<span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>done <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">:</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"4-만든-이터러블로-이터레이터-만들기\"><a href=\"#4-%EB%A7%8C%EB%93%A0-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94%EB%A1%9C-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"4 만든 이터러블로 이터레이터 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 만든 이터러블로 이터레이터 만들기</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>만든 이터러블의 Symbol.iterator() 메소드를 이용하여 이터레이터를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value : 3, done : false}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value : 2, done : false}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value : 1, done : false}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {done : false}</span></code></pre></div>\n<p>이렇게 만든 이터레이터는 next() 메소드를 통해서 내부의 값을 조회 할 수 있고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iterable <span class=\"token punctuation\">)</span> <span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 2 1, iterator 조회 한거 아님!</span></code></pre></div>\n<p>for..of 문에서 순회 할 수 있다.</p>\n<p>정리하면 이터러블에 Symbol.iterator() 메소드가 구현 되어있기 때문에 for…of 문에 들어갈 수 있고, 내부적으로 next() 메소드가 실행되어 리턴되는 value값이 for…of문의 a값에 들어가게 된다.</p>\n<p>하지만 이터러블을 통해 만든 이터레이터는 for of 문 순회가 되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> b <span class=\"token keyword\">of</span> iterator <span class=\"token punctuation\">)</span> <span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// iterator is not iterable</span></code></pre></div>\n<h4 id=\"5-well-formed-이터러블-만들기\"><a href=\"#5-well-formed-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"5 well formed 이터러블 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Well-formed 이터러블 만들기</h4>\n<p>잘 구현된 이터러블은</p>\n<ul>\n<li>이터러블의 [Symbol.iterator] () 메소드를 통해 만든 이터레이터가 for..of문을 순회 할 수 있다</li>\n<li>next() 메소드를 통해 일부 진행 했을 때 진행한 이후의 값들로만 순회 할 수 있다.</li>\n</ul>\n<p>이 말은 [Symbol.iterator] () 메소드를 통해 만든 이터레이터 역시 [Symbol.iterator] () 메소드를 갖고 있다는 말이다. 그리고 이 메소드를 실행한 값은 자기 자신이라는 말이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> it2 <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it2 <span class=\"token operator\">===</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><strong>이렇게 이터레이터가 자기 자신을 반환하는 심볼 이터레이터 메소드를 가지고 있을 때 well-formed 이터레이터, well-formed 이터러블 이라고 할 수 있다.</strong></p>\n<p>이를 위 이터러블에 적용 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> done <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>value <span class=\"token punctuation\">:</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">//만들어진 iterator가 [Symbol.iterator]() 메소드를 갖고 있어야함</span>\n      <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 이터러블을 정의 한다면 이터러블을 통해 만들어진 이터레이터도 이러터블 이기 떄문에 for..of문 순회가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 2 1 </span></code></pre></div>","frontmatter":{"title":"함수형 프로그래밍(사용자 정의 이터러블)","date":"November 23, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/함수형-프로그래밍(사용자-정의-이터러블)/","previous":{"fields":{"slug":"/javascript/함수형-프로그래밍(이터러블,-이터레이터)/"},"frontmatter":{"title":"함수형 프로그래밍(이터러블, 이터레이터)","category":"javascript"}},"next":null}}}