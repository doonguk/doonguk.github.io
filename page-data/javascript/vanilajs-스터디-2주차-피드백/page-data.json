{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/vanilajs-스터디-2주차-피드백/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"2ec215ba-1aaa-5f48-943e-d7c6ab2d43b1","excerpt":"…","html":"<h3 id=\"함수가-생성자-함수로-사용된-건지-엄밀히-체크하자\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EA%B0%80-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%9C-%EA%B1%B4%EC%A7%80-%EC%97%84%EB%B0%80%ED%9E%88-%EC%B2%B4%ED%81%AC%ED%95%98%EC%9E%90\" aria-label=\"함수가 생성자 함수로 사용된 건지 엄밀히 체크하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수가 생성자 함수로 사용된 건지 엄밀히 체크하자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">window</code> 로 체크</li>\n</ol>\n<p>생성자 함수로 호출되지 않은 함수안에서 <code class=\"language-text\">this</code> 는 전역 객체를 가리킨다.  하지만 좀 더 엄밀히 체크할 필요가 있는 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new 연산자를 사용해주세요.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">new.target</code> 로 체크 </li>\n</ol>\n<p>함수가 생성자 함수로 호출되면, <code class=\"language-text\">new.target</code> 은 함수 자체를 가리킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> TodoList<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new 연산자를 사용해주세요.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">instanceof</code> 로 체크</li>\n</ol>\n<p>함수가 생성자 함수로 호출되면, <code class=\"language-text\">this</code> 는 생성자 함수의 <code class=\"language-text\">instance</code> 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TodoList</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new 연산자를 사용해주세요.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 방법으로 조금 추상화 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">arguments<span class=\"token punctuation\">.</span>callee</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new 연산자를 사용해주세요.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">arguments</code> 는 함수가 호출될 때 함수가 <code class=\"language-text\">this</code> 와 함께 암묵적으로 전달받는 값 중 하나로 <code class=\"language-text\">arguments.callee</code> 는 함수 자체를 말한다. (<code class=\"language-text\">TodoList</code>)</p>\n<h3 id=\"분리-가능한-파일은-따로-관리하자\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A6%AC-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EB%94%B0%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EC%9E%90\" aria-label=\"분리 가능한 파일은 따로 관리하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분리 가능한 파일은 따로 관리하자.</h3>\n<p>예를들어 <code class=\"language-text\">data</code> 의 유효성을 검사하는 함수, <code class=\"language-text\">debounce</code> , <code class=\"language-text\">throttle</code> 등 재사용이 가능하거나, 기능성 함수들은 <code class=\"language-text\">utils.js</code> 파일로 따로 분리하는게 좋다.  </p>\n<p>그리고 상수도 따로 관리하면 좋다고 하셨다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keypress'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 상황에서 keyCode가 13이면 <code class=\"language-text\">Enter</code> 를 의미하는건 대부분이 알고있는 사실이지만, 가독성이 떨어지기 때문에</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ENTER_KEY_CODE</span> <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token constant\">ENTER_KEY_CODE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 명시적으로 13이 Enter라는 것을 말해주고, 이 변수 자체도 따로 파일을 만들어 관리하면 좋다고 하셨다.</p>\n<h3 id=\"화살표-함수에서-code-classlanguage-textthiscode-는-상위-컨텍스트를-가리킨다\" style=\"position:relative;\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-code-classlanguage-textthiscode-%EB%8A%94-%EC%83%81%EC%9C%84-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%A8%EB%8B%A4\" aria-label=\"화살표 함수에서 code classlanguage textthiscode 는 상위 컨텍스트를 가리킨다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수에서 <code class=\"language-text\">this</code> 는 상위 컨텍스트를 가리킨다.</h3>\n<p><code class=\"language-text\">DOM Element</code> 에 이벤트를 바인드 할 때 콜백 함수로 전달되는 함수에서 <code class=\"language-text\">this</code> 는 바인딩되는 객체를 가리킨다고 알고 있었다. 근데 컴포넌트 내부에서 <code class=\"language-text\">window</code>에 화살표 함수를 이용하여 바인딩을 하면 <code class=\"language-text\">window</code> 가 아닌 해당 컴포넌트를 가리키는 이유가 궁금하였다.</p>\n<p>공부를 해보니 화살표 함수가 아닌 일반 함수로 이벤트 핸들러를 선언하면 <code class=\"language-text\">this</code> 가 가리키는 값은 해당 이벤트 핸들러가 바인딩된 <code class=\"language-text\">target</code> 이 맞지만, 화살표 함수를 사용하여 선언하면 현재 스코프의 <strong>상위 컨텍스트</strong> 를 가리키기 때문이다. ( 이를 <strong>Lexical this</strong> 라고 한다. )</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 일반 함수는 자신이 바인딩된 객체를 가리킨다. 즉 <code class=\"language-text\">window</code> 하지만 화살표 함수를 사용하면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TodoList</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>현재 스코프의 상위 컨텍스트를 가리킨다, 즉 <code class=\"language-text\">TodoList</code> </p>\n<p>생각난 김에 <code class=\"language-text\">this</code> 다시 복습헤야겠다. <a href=\"https://doonguk.github.io/javascript/javascript-this/\">링크</a></p>","frontmatter":{"title":"VanilaJS 스터디 2주차 피드백","date":"May 18, 2020"}}},"pageContext":{"slug":"/javascript/vanilajs-스터디-2주차-피드백/","previous":{"fields":{"slug":"/algorithm/20200512-알고리즘/"},"frontmatter":{"title":"20200512 알고리즘","category":"algorithm"}},"next":{"fields":{"slug":"/javascript/javascript-event/"},"frontmatter":{"title":"Javascript Event","category":"javascript"}}}},"staticQueryHashes":["3128451518","96099027"]}