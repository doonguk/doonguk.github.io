{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/함수형-프로그래밍(find)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"b83dc618-f3b5-5611-bf15-a43f5c6a04db","excerpt":"find 함수 이전 포스트에서 queryStr 함수는 reduce를 통해 만들어진 것 처럼 함수들은 어떤 계보, 계열을 통해 만들어진다. 이번에 만들어볼 find 함수는 take 함수를 통해 만들어진다. 하지만 find 함수는 조건을 만족하는 원소 한개만 찾는 함수이다. 따라서 위와 같이 구현할 수 있는데, 위 함수는 효율성에 문제가 있는 코드가 있다. 결국 find 함수는 조건을 만족하는 원소 1개만 찾으면 되는 원소인데 위와같이 구현하면 filter…","html":"<blockquote>\n<h1 id=\"find-함수\"><a href=\"#find-%ED%95%A8%EC%88%98\" aria-label=\"find 함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>find 함수</h1>\n</blockquote>\n<p>이전 포스트에서 queryStr 함수는 reduce를 통해 만들어진 것 처럼 함수들은 어떤 계보, 계열을 통해 만들어진다. 이번에 만들어볼 find 함수는 take 함수를 통해 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>age <span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>age <span class=\"token punctuation\">:</span> <span class=\"token number\">31</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>age <span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>age <span class=\"token punctuation\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>age <span class=\"token punctuation\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>age <span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\titer<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>age<span class=\"token operator\">&lt;</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 리스트</span></code></pre></div>\n<p>하지만 find 함수는 조건을 만족하는 원소 한개만 찾는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\titer<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token comment\">// take 함수는 리턴값이 리스트니 구조분해</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>따라서 위와 같이 구현할 수 있는데, 위 함수는 효율성에 문제가 있는 코드가 있다. 결국 find 함수는 조건을 만족하는 원소 1개만 찾으면 되는 원소인데 위와같이 구현하면 filter 함수에서 조건을 만족하는 원소들을 모두 찾는다.  따라서</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\titer<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>filter 함수에 지연성을 줘서 값을 계산하는 take 함수를 만날때 까지 연산을 미루고 나중에 조건을 만족하는 원소 1개만 yield 하는 방법</strong>이 좋다. 이렇게 구현한 코드에 curry 함수까지 사용 하면 완벽.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> find <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span>iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\titer<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\tusers<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">&lt;</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  log\n<span class=\"token punctuation\">)</span><span class=\"token comment\">//31</span></code></pre></div>","frontmatter":{"title":"함수형 프로그래밍(find)","date":"December 10, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/함수형-프로그래밍(find)/","previous":{"fields":{"slug":"/javascript/함수형-프로그래밍(l.map->map)/"},"frontmatter":{"title":"함수형 프로그래밍(L.map->map)","category":"javascript"}},"next":null}}}