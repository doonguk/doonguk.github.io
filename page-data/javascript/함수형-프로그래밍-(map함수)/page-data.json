{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/함수형-프로그래밍-(map함수)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"7bf6c2ba-9732-5c1b-8d85-c00014a9c769","excerpt":"Map 함수 1. 구현 products 라는 배열에서 이름 따로 가격 따로 수집 한다고 해보자. 이런 경우에 사용하는 함수가 map 함수이다. 여기서 log()는 함수 밖 외부에 직접적으로 변화를 일으킨다. 함수형 프로그래밍 에서는 인자와 리턴값으로 소통 하는것을 권장한다. 따라서 names를 변화를 일으키는 다른 함수나 메소드에 전달하는게 아니라 리턴하는 것을 권장한다. (리턴 후 개발자가 변화를 일으키는 것을 권장)  map함수는 이터러블 이터레이터 프로토콜을 따르고 products…","html":"<blockquote>\n<h2 id=\"map-함수\"><a href=\"#map-%ED%95%A8%EC%88%98\" aria-label=\"map 함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map 함수</h2>\n</blockquote>\n<h3 id=\"1-구현\"><a href=\"#1-%EA%B5%AC%ED%98%84\" aria-label=\"1 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'과자'</span><span class=\"token punctuation\">,</span> prices <span class=\"token punctuation\">:</span> <span class=\"token string\">'1000'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'사탕'</span><span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> <span class=\"token string\">'500'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'아이스크림'</span><span class=\"token punctuation\">,</span> prices <span class=\"token punctuation\">:</span> <span class=\"token string\">'1200'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>products 라는 배열에서 이름 따로 가격 따로 수집 한다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> prices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>prices<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이런 경우에 사용하는 함수가 map 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \tnames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>여기서 log()는 함수 밖 외부에 직접적으로 변화를 일으킨다. 함수형 프로그래밍 에서는 인자와 리턴값으로 소통 하는것을 권장한다. 따라서 names를 변화를 일으키는 다른 함수나 메소드에 전달하는게 아니라 리턴하는 것을 권장한다. (리턴 후 개발자가 변화를 일으키는 것을 권장)</strong> </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>map함수는 이터러블 이터레이터 프로토콜을 따르고 products 뿐만 아니라 어떠한 이터러블도 올 수 있기 때문에 파라미터에 이터레이터를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">iter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서는 어떤 값을 수집할지 a.name 이라고 명시적으로 적어 줬지만 map함수에서는 수집하는 값을 함수로 추상화 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만들어진 map 함수를 이용해서 name과 prices를 뽑는 코드를 다시 작성 해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>products<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['과자', '사탕', '아이스크림']</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token punctuation\">.</span>prices<span class=\"token punctuation\">,</span>products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['1000', '500', '1200']</span></code></pre></div>\n<p><strong>따라서 map 함수의 보조함수를 통해서 이터러블 안에 1:1로 맵핑되는 어떠한 값을 수집할지 정해준다</strong></p>\n<p>그리고 map함수는 함수를 인자로 받고 원하는 시점에서 값으로 사용하기 때문에 고차함수이다.</p>\n<h3 id=\"2-map-함수의-다형성\"><a href=\"#2-map-%ED%95%A8%EC%88%98%EC%9D%98-%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"2 map 함수의 다형성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Map 함수의 다형성</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> queries <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queries<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NodeList(4) [html, head, script, script]</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> ele<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Type Error: queries.map is not a function</span></code></pre></div>\n<p>queries이지만 (내장)map 함수를 사용하면 에러가 나온다. 이유는 document.querySelector 객체는 Array를 상속받지 않아서 프로토타입에 map함수가 없기 때문이다</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/69561130-2ecd5e00-0ff0-11ea-8031-5ac6e758e35b.png\" alt=\"image\"></p>\n<p>하지만 위에서 직접 구현한 map 함수를 구현하면 리스트를 순회 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token operator\">=></span>ele<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//[\"html\", \"head\", \"script\", \"script\"]</span></code></pre></div>\n<p>그 이유는 document.querySelectorAll이 이터러블, 이터레이터 프로토콜을 따르기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iter <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// // Array Iterator {}</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value : \"html\", done : false}</span></code></pre></div>\n<p>다른 예시로는</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token operator\">=></span>a<span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[1, 25]</span></code></pre></div>\n<p>따라서 querySelectorAll 같이 이터러블 프로토콜을 따르는 모든 값들에 map 함수를 사용할 수 있고, gen() 같이 ‘문장’ 에도 사용 가능 하다. ( 사실상 어디든 적용 가능 )</p>\n<h3 id=\"3-자료구조-map과-같이-사용\"><a href=\"#3-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-map%EA%B3%BC-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9\" aria-label=\"3 자료구조 map과 같이 사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 자료구조 Map과 같이 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>[이곳](<a href=\"https://doonguk.github.io/javascript/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D(%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94,-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0)/\">https://doonguk.github.io/javascript/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D(%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94,-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0)/</a> 에서 공부한 듯이 자료구조 Map은 이터러블 이다. 따라서 위에서 구현한 map함수의 두번째 파타미터인 이러터블로 전달이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token operator\">*</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [['a',100],['b',400],['c',900]]</span></code></pre></div>\n<p>첫번째 파라미터로 전달되는 함수에 구조 분해로 key, value를 나눠서 [k,v]로 전달 하였다.</p>\n<p>이렇게 만든 Map객체로 새로운 Map객체를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> new_map <span class=\"token operator\">=</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token operator\">*</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>new_map<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [['a',100],['b',400],['c',900]]</span></code></pre></div>","frontmatter":{"title":"함수형 프로그래밍 (Map)","date":"November 26, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/함수형-프로그래밍-(map함수)/","previous":{"fields":{"slug":"/javascript/함수형-프로그래밍(제너레이터-예제)/"},"frontmatter":{"title":"함수형 프로그래밍(제너레이터 예제)","category":"javascript"}},"next":null}}}