{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/이벤트-루프/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"dd8d6b5f-9ac2-538e-8a3d-ef16b994b5ed","excerpt":"싱글 스레드 JS는 싱글 스레드 프로그래밍 언어이다. 이 말은 싱글 스레드 런타임을 갖고있고 결국 하나의 콜 스택만 갖고 있다는 말이다. (하나의 프로그래밍은 동시에 하나의 코드만 실행할 수 있음!) JS 프로그래밍에서 느려진다는 것은 무엇일까? 정확한 개념은 존재하지 않지만 느린 동작이 스택에 남아있는 것을 보통 느려진다(Blocking) 라고 한다. 예를들면 네트워크 요청 같은 작업(실제로는 보통 비동기로 처리되지만)이 동기적으로 실행된다면 오랜시간동안 콜 스택을 Blocking…","html":"<h2 id=\"싱글-스레드\"><a href=\"#%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C\" aria-label=\"싱글 스레드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글 스레드</h2>\n<p>JS는 <strong>싱글 스레드 프로그래밍 언어</strong>이다. 이 말은 싱글 스레드 런타임을 갖고있고 결국 <strong>하나의 콜 스택</strong>만 갖고 있다는 말이다. (하나의 프로그래밍은 동시에 하나의 코드만 실행할 수 있음!)</p>\n<p>JS 프로그래밍에서 느려진다는 것은 무엇일까? 정확한 개념은 존재하지 않지만 <strong>느린 동작이 스택에 남아있는 것을 보통 느려진다(Blocking)</strong> 라고 한다. 예를들면 네트워크 요청 같은 작업(실제로는 보통 비동기로 처리되지만)이 동기적으로 실행된다면 오랜시간동안 콜 스택을 Blocking 할 것이다.</p>\n<p>이런 문제를 브라우저에서 JS는 어떻게 해결할까?</p>\n<h2 id=\"싱글-스레드-in-브라우저\"><a href=\"#%EC%8B%B1%EA%B8%80-%EC%8A%A4%EB%A0%88%EB%93%9C-in-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80\" aria-label=\"싱글 스레드 in 브라우저 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글 스레드 in 브라우저</h2>\n<p>만약 네트워크 요청이 동기적으로 실행된다면 콜 스택을 블로킹하여 비워질 때 까지 브라우저는 리렌더링을 하지 못한다. 브라우저에서는 이를 <strong>비동기 콜백</strong>으로 해결한다. 비동기 콜백의 작동방식을 알려면 <strong>Task  Queue</strong>와 <strong>이벤트 루프</strong>에 대해 알아야한다!</p>\n<p>태스크 큐는 <strong>스크립트 실행, 이벤트 핸들러, 콜백함수 등의 태스크(Task)</strong>가 담기는 공간이다. 태스크가 콜백함수라면 그 종류에 따라 두개의 큐에 나눠 담겨진다.</p>\n<ul>\n<li>태스크 큐 : setTimeout()<code class=\"language-text\">,</code>setInterval()<code class=\"language-text\">, UI 렌더링,</code>requestAnimationFrame()</li>\n<li>마이크로 태스크 큐: Promise, MutationObserver</li>\n</ul>\n<p><strong>이벤트 루프</strong>는 2개의 큐를 감시하고 있다가 콜 스택이 비게 되면, 콜백함수를 꺼내와서 실행한다. 이 때 <strong>마이크로 테스크 큐의 콜백함수가 우선순위를 갖기 때문에 마이크로 테스크 큐가 전부 비워지면 태스크 큐에서 꺼내와서 실행한다.</strong></p>\n<h3 id=\"비동기-콜백asyncronous-callback\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%9C%EB%B0%B1asyncronous-callback\" aria-label=\"비동기 콜백asyncronous callback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 콜백(asyncronous callback)</h3>\n<p>콜백 ? 함수가 call한 다른 함수..</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'콜 스택!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'태스크 큐!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'마이크로태스크 큐!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같은 코드가 있을 때 브라우저에서 어떻게 콜 스택이 동작하는지 살펴보자.</p>\n<p>그림이 어려운 관계로 글로 적어야겠다.</p>\n<ol>\n<li><code class=\"language-text\">main()</code>가 콜 스택에 쌓인다.</li>\n<li><code class=\"language-text\">console.log()</code>가 그 위에 쌓이고 콘솔 창에서 ‘콜 스택’을 출력한다. 그 뒤 함수가 종료되고 콜 스택에서 제거된다.</li>\n<li><code class=\"language-text\">setTimeout(() =&gt; console.log(&#39;태스크 큐&#39;), 1000)</code>가 콜 스택에 쌓이고 setTImout의 콜백함수인 <code class=\"language-text\">()=&gt; console.log(&#39;태스크큐&#39;)</code>가 <strong>Web API</strong> 영역에 전달된다. 전달된 시점에서 타이머가 시작된다. 그 뒤 콜 스택에 쌓인 <code class=\"language-text\">setTimeout</code> 함수는 제거된다.</li>\n</ol>\n<blockquote>\n<p>Web API 영역?</p>\n<p>자바스크립트 런타임은 하나의 프로그래밍은 하나의 코드만 실행할 수 있다. 브라우저는 Web API로 자바스크립트에서 호출할 수 있는 스레드를 효과적으로 지원한다. 노드에서는 C++ API가 있다.</p>\n</blockquote>\n<ol start=\"4\">\n<li>Promise.resolve<code class=\"language-text\">가 콜 스택에 쌓이고 콜백함수가 **마이크로 태스크 큐**에 쌓인다. 그 뒤</code>Promise.resolve` 가 스택에서 제거된다.</li>\n</ol>\n<p>4.5 <code class=\"language-text\">setTImeout</code>의 콜백함수의 타이머가 다 된 시점에 태스크 큐에 쌓인다.</p>\n<ol start=\"5\">\n<li>더 이상 실행할 함수가 없으니 콜 스택은 비워진다. </li>\n<li>이벤트 루프는 콜 스택이 비워지면 태스크 큐에서 콜백함수를 가져와서 실행한다. 이때 마이크로 태스크큐가 우선순위를 갖기 때문에 먼저 실행된다.</li>\n<li>Promise의 콜백함수가 콜 스택에 쌓이고 함수가 실행되고(마이크로태스크 큐 출력) 스택에서 제거된다.</li>\n<li>setTimeout의 콜백함수가 콜 스택에 쌓이고 함수가 실행되고(태스크 큐 출력) 스택에서 제거된다.</li>\n</ol>\n<h2 id=\"그외\"><a href=\"#%EA%B7%B8%EC%99%B8\" aria-label=\"그외 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그외..</h2>\n<h3 id=\"settimeoutcb-0을-하는-이유가-뭘까\"><a href=\"#settimeoutcb-0%EC%9D%84-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EA%B0%80-%EB%AD%98%EA%B9%8C\" aria-label=\"settimeoutcb 0을 하는 이유가 뭘까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimeout(cb, 0)을 하는 이유가 뭘까?</h3>\n<p>0초를 time으로 넣어 하는 이유는 <strong>스택이 비워진 뒤 실행</strong>을 보장하기 때문이다.</p>\n<h3 id=\"settimeout을-여러번-호출하면-원하는-대로-실행되지-않는다\"><a href=\"#settimeout%EC%9D%84-%EC%97%AC%EB%9F%AC%EB%B2%88-%ED%98%B8%EC%B6%9C%ED%95%98%EB%A9%B4-%EC%9B%90%ED%95%98%EB%8A%94-%EB%8C%80%EB%A1%9C-%EC%8B%A4%ED%96%89%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"settimeout을 여러번 호출하면 원하는 대로 실행되지 않는다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimeout을 여러번 호출하면 원하는 대로 실행되지 않는다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드의 기대치는 4번째 코드의 경우 1초뒤에 <code class=\"language-text\">hi4</code>를 실행하길 기대할 것 이다. 하지만!</p>\n<p>위에서부터 각각의 콜백함수들이 큐에서 하나씩 빠져나가면서 1초 보다 조금 늦게 실행될 수 있다. ( 동기적으로 처리되는 setTimeout 호출이 모두 끝난 뒤 비동기로 처리된 콜백들이 </p>\n<p>여기서 알 수 있는 것은 <strong>딜레이되는 최소의 시간만을 지정할 수 있다라는 점</strong>이다.</p>\n<h3 id=\"render\"><a href=\"#render\" aria-label=\"render permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render</h3>\n<p><strong>브라우저의 렌더링도 하나의 콜백처럼 행동</strong>한다. 따라서 태스크 큐에 쌓이게 되는데 콜 스택이 비어있지 않으면 렌더링을 하지 못하게 된다. 따라서 동기적으로 처리되는 코드가 blocking이 오래 지속되는 코드라면 비동기적으로 처리하는 것도 렌더링을 최적화하는 한가지 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>적절한 예시가 아니지만 forEach는 기본적으로 동기적으로 작동하기 때문에 처리하는 작업이 blocking이 지속되는 작업이라고 ‘가정’하면,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">arrrayForeach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 비동기적으로 태스크큐에 쌓아서 처리하는것도 한가지 방법이 된다!</p>\n<h2 id=\"참고\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>\n<p><a href=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/javascript/event-loop.md\">https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/javascript/event-loop.md</a></p>","frontmatter":{"title":"이벤트 루프","date":"June 09, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript/이벤트-루프/","previous":{"fields":{"slug":"/javascript/네이티브-객체-&-호스트-객체/"},"frontmatter":{"title":"네이티브 객체 & 호스트 객체","category":"javascript"}},"next":{"fields":{"slug":"/cs/tcp-&-udp/"},"frontmatter":{"title":"TCP & UDP","category":"cs"}}}}}