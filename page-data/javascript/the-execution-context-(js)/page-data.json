{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/the-execution-context-(js)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"b48cbeac-6474-545c-92bc-cf39947dd3a6","excerpt":"1. 실행 컨텍스트란? 자바스크립트는 싱글쓰레드 기반 언어이다. 하나의 콜 스택을 갖고 있고 하나의 프로그램은 동시에 하나의 코드만 실행할 수 있다. 이 기반이 되는 중요한 개념이 실행 컨텍스트이다. 실행 가능한 코드를 형상화하고 구분하는 추상적인 개념. 즉, 실행 컨텍스트는 실행 가능한 코드가 실행되기 위해 필요한 환경 이라고 말할 수 있다. 여기서 실행 가능한 코드는 아래 3가지가 있다. 전역 코드: 전역 영역에 존재하는 코드  Eval…","html":"<h2 id=\"1-실행-컨텍스트란\" style=\"position:relative;\"><a href=\"#1-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%9E%80\" aria-label=\"1 실행 컨텍스트란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 실행 컨텍스트란?</h2>\n<p>자바스크립트는 싱글쓰레드 기반 언어이다. 하나의 콜 스택을 갖고 있고 하나의 프로그램은 동시에 하나의 코드만 실행할 수 있다. 이 기반이 되는 중요한 개념이 <strong>실행 컨텍스트</strong>이다.</p>\n<p>실행 가능한 코드를 형상화하고 구분하는 추상적인 개념. 즉, <strong>실행 컨텍스트는 실행 가능한 코드가 실행되기 위해 필요한 환경</strong> 이라고 말할 수 있다. 여기서 실행 가능한 코드는 아래 3가지가 있다.</p>\n<ul>\n<li>전역 코드: 전역 영역에 존재하는 코드 </li>\n<li>Eval 코드: <code class=\"language-text\">eval()</code>로 실행되는 코드</li>\n<li>함수 코드: 함수 내에 존재하는 코드</li>\n</ul>\n<p>자바스크립트 엔진은 코드를 실행하기 위해 여러가지 정보가 필요하다. 실행에 필요한 정보는 아래 4가지가 있다.</p>\n<ul>\n<li>변수: 전역변수, 지역변수, 매개변수, 객체의 Property</li>\n<li>함수 선언</li>\n<li>변수의 유효범위 (Scope)</li>\n<li>this</li>\n</ul>\n<p>이와같이 실행에 필요한 자료를 형상화하고 구분하기 위해 <strong>자바스크립트 엔진은 실행 컨텍스트를 물리적 객체의 형태로 관리한다.</strong> ( 3가지 프로퍼티를 소유. 밑에서 설명 )</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'yyy'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token string\">'zzz'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 실행하면, <strong>실행 컨텍스트 스택이 생성하고 소멸한다.</strong></p>\n<p><strong>현재 실해중인 컨텍스트에서 이 컨텍스트와 관련없는 코드(예를들면 다른 함수)가 실행되면 새로운 컨텍스트가 생성된다. 이 컨텍스트는 스택에 쌓이게 되고 컨트롤(제어권)이 이동한다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80937691-34d23100-8e11-11ea-84cf-018266ec0c8f.png\" alt=\"image\"></p>\n<p>다음은 스택이 생성하고 소멸하는 과정이다.</p>\n<ol>\n<li>컨트롤이 실행 가능한 코드 (전역코드, 함수코드, eval 코드)로 이동하면 논리적 스택 구조를 가지는 새로운 실행 컨텍스트 스택이 생성된다.</li>\n<li>전역코드로 컨트롤이 진입하면 전역 실행 컨텍스트(<code class=\"language-text\">global EC</code>)가 생성되고 실행 컨텍스트 스택에 쌓인다. 전역 실행 컨텍스트는 어플리케이션의 종료까지 유지된다.</li>\n<li>함수를 호출하면 (현재 컨텍스트와 관련없는 코드의 실행) 해당 함수의 실행 컨텍스트가 생성되며 직전에 실행된 코드 블록의 실행 컨텍스트 위에 쌓인다.</li>\n<li>함수 실행이 끝나면 해당 함수의 실행 컨텍스트를 파기하고 직전의 실행 컨텍스트에 컨트롤을 반환한다.</li>\n</ol>\n<p><em>글로벌의 경우 실행 이전에 생성되지만 함수의 경우 호출할 때 생성된다.</em></p>\n<br/>\n<h2 id=\"2-실행-컨텍스트의-3가지-property\" style=\"position:relative;\"><a href=\"#2-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-3%EA%B0%80%EC%A7%80-property\" aria-label=\"2 실행 컨텍스트의 3가지 property permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 실행 컨텍스트의 3가지 Property</h2>\n<h3 id=\"variable-object-vo--변수객체-\" style=\"position:relative;\"><a href=\"#variable-object-vo--%EB%B3%80%EC%88%98%EA%B0%9D%EC%B2%B4-\" aria-label=\"variable object vo  변수객체  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Object (VO / 변수객체 )</h3>\n<p>실행 컨텍스트가 생성  => 자바스크립트 엔진은 <strong>실행에 필요한 여러 정보들을 담을 객체를 생성한다. 이를 Variable Object (VO)</strong> 라고 한다. 여기에는 아래의 정보가 담겨있다.</p>\n<ul>\n<li>변수</li>\n<li>매개변수(parameter)와 인수 (arguments)</li>\n<li>함수 선언(함수 표현식은 제외)</li>\n</ul>\n<p><code class=\"language-text\">Variable Object</code> 는 실행 컨텍스트의 프로퍼티이기 때문에 값을 갖는데 이 값은 다른 객체를 가리킨다. 여기서 <strong>전역 코드 실행시 실행되는 전역 컨텍스트 객체와 함수를 실행할 때 생성되는 함수 컨텍스트의 경우, 가리키는 객체가 다르다.</strong> ( 전역 코드와 함수의 내용이 다르기 때문에 )</p>\n<p><code class=\"language-text\">Variable Object</code>가  가리키는 객체는 아래와 같다.</p>\n<ul>\n<li>전역 컨텍스트의 경우</li>\n</ul>\n<p><code class=\"language-text\">Variable Object</code>는 최상위에 위치하고 모든 전역변수, 전역 함수 등을 포함하는 <strong>전역 객체(Global Object/ GO)</strong> 를 카리킨다. <strong>전역 객체는 전역에 선언된 전역 변수와 전역 함수를 프로퍼티로 소유한다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80938342-b5922c80-8e13-11ea-9d24-7fbeb513a6b9.png\" alt=\"image\"></p>\n<ul>\n<li>함수 컨텍스트의 경우</li>\n</ul>\n<p><code class=\"language-text\">Variable Object</code>는 <strong>Activation Object / AO 활성객체</strong> 를 가리키며 매개변수와 인수들의 정보를 배열의 형태로 담고 있는 객체인 <code class=\"language-text\">argument object</code>가 추가된다</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80938408-fc802200-8e13-11ea-84f3-ca7c4d42e574.png\" alt=\"image\"></p>\n<br/>\n<h3 id=\"scope-chain-sc\" style=\"position:relative;\"><a href=\"#scope-chain-sc\" aria-label=\"scope chain sc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope Chain (SC)</h3>\n<p><code class=\"language-text\">Scope Chain</code>은 일종의 리스트로서, 해당 전역 또는 함수가 참조할 수 있는 변수, 함수 선언 등의 정보를 담고있는 전역 객체 (GO) 또는 활성 객체(AO)의 리스트를 가리킨다.</p>\n<p><strong>현재 실행 컨텍스트의 활성 객체를 선두로 하여 순차적으로 상위 컨텍스트의 활성 객체를 가리키며 마지막으로 전역 객체를 가리킨다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80938696-0ce4cc80-8e15-11ea-88cb-eb11f766fc04.png\" alt=\"image\"></p>\n<p><em>스코프 체인은 변수를 검색하는 메커니즘이다. 객체의 프로퍼티나 메소드를 검색하는 메커니즘은 프로토타입 체인이다.</em></p>\n<p>스코프 체인을 통해 하위함수에서 상위함수의 스코프까지 참조가 가능하다. (<strong>함수가 중첩되어 있으면 부모함수의 Scope가 자식함수의 스코프 체인에 포함되기 때문이다.</strong>) 함수 실행 중 변수를 만나면 그 변수를 우선 현재 Scope, 즉 AO에서 검색해보고, 만약 검색에 실패하면 스코프 체인에 담겨진 순서대로 검색을 이어간다. (이것이 스코프 체인이라고 불리는 이유이다.)</p>\n<p>스코프 체인은 함수의 프로퍼티인 <code class=\"language-text\">[[Scope]]</code>로 참조할 수 있다.</p>\n<br/>\n<h3 id=\"this-value\" style=\"position:relative;\"><a href=\"#this-value\" aria-label=\"this value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this value</h3>\n<p><code class=\"language-text\">this</code> 프로퍼티는 this 값에 할당된다. 이는 함수 호출 패턴에 의해 결정된다.</p>\n<br/>\n<h2 id=\"3-실행-컨텍스트의-생성-과정\" style=\"position:relative;\"><a href=\"#3-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%83%9D%EC%84%B1-%EA%B3%BC%EC%A0%95\" aria-label=\"3 실행 컨텍스트의 생성 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 실행 컨텍스트의 생성 과정</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'yyy'</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token string\">'zzz'</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"전역-코드에-진입\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%BD%94%EB%93%9C%EC%97%90-%EC%A7%84%EC%9E%85\" aria-label=\"전역 코드에 진입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 코드에 진입</h3>\n<p>컨트롤이 실행 컨텍스트에 <strong>진입하기 이전</strong>에 유일한 <strong>전역 객체가 생성된다.</strong>  전역 객체는 다음과 같은 특징이 있다.</p>\n<ul>\n<li>객체의 프로퍼티는 코드의 어떠한 곳에서도 접근 가능</li>\n<li>초기 상태의 전역 객체에는 Built-in Object (Math, String, Array)와 BOM, DOM이 설정되어 있음</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80939125-77e2d300-8e16-11ea-8787-edad3a7db9a3.png\" alt=\"image\"></p>\n<p><strong>전역 객체가 생성된 이후</strong>, 전역 코드로 컨트롤이 진입하면 전역 실행 컨텍스트가 생성되고 실행 컨텍스트 스택에 쌓인다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80939230-e32ca500-8e16-11ea-8072-10dcefab8e1a.png\" alt=\"image\"></p>\n<p>이후 실행 컨텍스트를 바탕으로 다음의 과정이 실행된다.</p>\n<ol>\n<li>스코프 체인의 생성과 초기화</li>\n<li>Variable instantiation (변수 객체화) 실행</li>\n<li>this value 설정</li>\n</ol>\n<br/>\n<h3 id=\"스코프-체인의-생성과-초기화\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8%EC%9D%98-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"스코프 체인의 생성과 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 체인의 생성과 초기화</h3>\n<p>실행 컨텍스트 생성된 이후 <strong>가장 먼저 스코프 체인의 생성과 초기화가 일어난다.</strong> 이때 스코프 체인은 전역 객체의 레퍼런스를 포함하는 리스트가 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80939436-99908a00-8e17-11ea-99e5-9f18059eedd3.png\" alt=\"image\"></p>\n<br/>\n<h3 id=\"variable-instantiation-변수-객체화-실행\" style=\"position:relative;\"><a href=\"#variable-instantiation-%EB%B3%80%EC%88%98-%EA%B0%9D%EC%B2%B4%ED%99%94-%EC%8B%A4%ED%96%89\" aria-label=\"variable instantiation 변수 객체화 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Instantiation (변수 객체화) 실행</h3>\n<p><code class=\"language-text\">Variable Instantiation</code>은 실행 컨텍스트 객체 프로퍼티 중 하나인 <code class=\"language-text\">VO</code> 에 프로퍼티와 값을 추가하는 것을 의미한다. 이 과정에서 변수, 매개변수와 인수 정보, 함수 선언을 <code class=\"language-text\">VO</code> 에 추가하여 객체화 한다.</p>\n<p><code class=\"language-text\">Variable Instantiation</code>은 다음과 같은 순서로 <code class=\"language-text\">Variable Object</code>에 값을 설정한다. <strong>(1->2->3)순서 유지)</strong></p>\n<ol>\n<li>(함수 코드의 경우) <strong>매개변수</strong>가 VO의 프로퍼티로, 인수가 값으로 설정된다. (<code class=\"language-text\">argumetns</code>객체 초기화 )</li>\n<li>대상 코드 내의 <strong>함수</strong> 선언(함수 표현식 제외)을 대상으로 함수명이 VO의 프로퍼티로, 생성된 함수 객체가 값으로 설정된다. (<strong>함수 호이스팅</strong>)</li>\n<li>대상 코드 내의 <strong>변수</strong> 선언을 대상으로 변수명이 VO의 프로퍼티로, <code class=\"language-text\">undefined</code>가 값으로 설정된다. (<strong>변수 호이스팅</strong>)</li>\n</ol>\n<p><em>VO에 프로퍼티와 값을 설정하는 과정에서 호이스팅이 일어난다.</em></p>\n<br/>\n<h3 id=\"함수-foo의-선언-처리\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-foo%EC%9D%98-%EC%84%A0%EC%96%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"함수 foo의 선언 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 foo의 선언 처리</h3>\n<p>함수 선언은 <code class=\"language-text\">Variable Instantiation</code> 실행순서 2와 같이 함수명 foo가 VO(전역 코드인 경우 GO)의 프로퍼티로, 생성된 함수가 값으로 설정된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80940743-a3b48780-8e1b-11ea-8654-256ab6ae8c82.png\" alt=\"image\"></p>\n<p>생성된 함수 객체는 <code class=\"language-text\">[[Scrope]]</code> 프로퍼티를 가지게 된다. 이는 함수 객체만이 소유하는 내부 프로퍼티로서 <strong>함수 객체가 실행되는 환경</strong>을 가리킨다. 따라서 현재 실행 컨텍스트의 스코프 체인이 참조하고 있는 객체를 값으로 설정한다.</p>\n<p>내부 함수의 <code class=\"language-text\">[[Scope]]</code>의 프로퍼티는 자신의 실행 환경과 자신을 포함하는 외부함수의 실행 환경과 전역객체를 가리키는데 이때 자신을 포함하는 외부 함수의 실행 컨텍스트가 소멸하여도 <code class=\"language-text\">[[Scope]]</code> 프로퍼티가 가리키는 외부함수의 실행 환경(AO)는 소멸하지 않고 참조할 수 있다. 이것이 <strong>클로저</strong> 이다</p>\n<p><em>즉 <strong>클로저</strong>는 스택에서 외부함수의 실행 컨텍스트가 소멸했지만, 내부 함수의 스코프 체인에서 가리키는 외부함수의 활성 객체가 남아있는 상태라고 말할 수 있겠네</em> </p>\n<blockquote>\n<p>클로저 ? 클로저는 내부함수가 외부함수의 Context에 접근할 수 있는 것을 가리킨다.(생활코딩)</p>\n</blockquote>\n<p>여기까지 살펴본 실행 컨텍스트는 아직 코드가 실행되기 이전이다. 하지만, <strong>스코프 체인이 가리키는 VO에 이미 함수가 등록</strong> 되어 있으므로 이후 코드를 실행 할 때 함수 선언식 이전에 함수를 호출할 수 있게 되었다. <strong>(함수 호이스팅)</strong></p>\n<p><strong>함수선언식의 경우 VO에 함수 표현식과 동일하게 함수명을 프로퍼티로 함수객체를 값으로 할당 하지만</strong>,,,</p>\n<p>잠깐! 함수 선언식 vs 함수 표현식</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 선언식 (일반적인 프로그래밍 언어 방법)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 함수 표현식 (JS의 특징)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">funcExpression</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>함수 선언식</strong>은 VO에 변수와 함수객체를 <strong>즉시 할당하고</strong>, </p>\n<p><strong>함수 표현식</strong>은 <strong>일반 변수의 방식을 따른다.</strong> (즉시 할당하지 않고 코드가 실행되는 시점에 값이 할당) 이렇게 함수 선언식의 코드가 실행되기 이전 현재 실행 컨텍스트의 <code class=\"language-text\">Variable Instatiation</code> 과정에서 함수가 VO에 먼저 할당된다. 이를 <strong>함수 호이스팅</strong> 이라 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 호이스팅 </span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'function hoisting'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function hoisting'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> funcExpression\n<span class=\"token function\">funcExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Reference Error ㅜㅜ</span>\n\n<span class=\"token function-variable function\">funcExpression</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'maybe occured Reference Error....'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"변수-x의-선언-처리\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-x%EC%9D%98-%EC%84%A0%EC%96%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"변수 x의 선언 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 x의 선언 처리</h3>\n<p>변수 선언은 <code class=\"language-text\">Variable Instantiation</code> 순서3과 같이 변수명(x)가 VO의 프로퍼티로, <code class=\"language-text\">undefined</code>가 값으로 설정된다. 이 작업은 아래와 같이 세분화된다.</p>\n<ol>\n<li>선언 단계</li>\n</ol>\n<p>VO에 변수를 등록한다. 이 변수 객체는 스코프가 참조할 수 있는 대상이 된다.</p>\n<ol start=\"2\">\n<li>초기화 단계</li>\n</ol>\n<p>VO에 등록된 변수를 메모리에 할당한다. 이 단계에서 <code class=\"language-text\">undefined</code>로 초기화된다.</p>\n<ol start=\"3\">\n<li>할당 단계</li>\n</ol>\n<p><code class=\"language-text\">undefined</code>로 초기화된 변수에 실제값을 할당한다.</p>\n<p><strong><code class=\"language-text\">var</code> 키워드로 선언된 변수는 선언과 초기화가 한번에 이루어진다.</strong>  따라서 선언문 이전에 변수에 접근하여도 VO에 변수가 존재하기 때문에 에러가 발생하지 않는다. 단 <code class=\"language-text\">undefined</code>를 반환한다. 이러한 현상을 <strong>변수 호이스팅</strong> 이라 한다.</p>\n<blockquote>\n<p>호이스팅 (좀 더 자세하게 말하면)</p>\n<p>호이스팅이란 “끌어올린다”라는 뜻으로 변수 및 함수 선언문이 스코프내 상단으로 끌어올려진다고 이해할 수 있지만, 정확히는 <strong>변수 및 함수가 컴파일 과정에서 컨텍스트에 저장되는 것 이다.</strong></p>\n<p>컴파일 과정에서, 함수의 경우 ( <strong>정확하게 함수 선언식</strong>의 경우 )</p>\n<p>Variable Object에 함수를 등록하는 과정을 거친 뒤 선언문 이전에 함수를 실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error 없음</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이유는 해당 스코프의 컨텍스트에 컴파일 과정에서 이미 Variable Object에 함수가 등록 되어있기 때문이다. 따라서 <strong>런타임</strong> 환경 때 상단에서 함수를 실행해도 호출이 가능하다.</p>\n<p>하지만 <strong>함수 표현식의 경우 변수와 같은 방식으로 컴파일 과정에는 선언이 이루어진 뒤 <code class=\"language-text\">undefined</code>로 초기화 된 후 런타임 과정에서 값의 할당을 받기 때문에 값의 할당이 이루어지기 전에는 함수를 호출할 수 없다.</strong></p>\n<p>다시, 변수의 경우 컴파일 과정에서 Variable Object에 변수의 이름이 Property로 <code class=\"language-text\">undefined</code>가 값으로 선언과 동시에 초기화가 된다. 따라서 변수에 할당을 해주는 코드 이전에 변수를 참조하면 <code class=\"language-text\">undefined</code>가 리턴된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span></code></pre></div>\n<p>하지만, <strong><code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>의 경우 <code class=\"language-text\">var</code> 와 다르게 선언과 동시에 <code class=\"language-text\">undefined</code>로 초기화 되지 않는다.</strong> 따라서 초기화 구문을 만나기 전까지 참조하게 되면 Reference Error를 발생시킨다. 이 구간을 TDZ라고 한다.</p>\n<p>마지막으로!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a</code></pre></div>\n<p>위 코드는 <code class=\"language-text\">var</code>와 마찬가지로 <code class=\"language-text\">let a = undefined</code>와 같다.</p>\n</blockquote>\n<p>변수 x는 ‘xxx’로 아직 초기화되지 않았고, 이후 변수 할당문에 도달하면 값의 할당이 이루어진다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80943384-0872e080-8e22-11ea-8dac-03811af2f46f.png\" alt=\"image\"></p>\n<p><em>변수 호이스팅 샘플</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// var는 선언과 동시에 undefined로 초기화 후 VO에 등록 -> 변수 호이스팅</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> a\n\n<span class=\"token comment\">// let은 선언과 동시에 초기화 x</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Reference error</span>\n<span class=\"token keyword\">let</span> b</code></pre></div>\n<br/>\n<h3 id=\"this-value-결정\" style=\"position:relative;\"><a href=\"#this-value-%EA%B2%B0%EC%A0%95\" aria-label=\"this value 결정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this value 결정</h3>\n<p>변수 선언처리가 끝나면 다음은 this value가 결정된다. <strong>this value가 결정되기 이전에 this는 전역 객체를 가리키고 있다가 함수 호출 패턴에 의해 <code class=\"language-text\">this</code>  에 할당되는 값이 결정된다.</strong> 전역 코드의 경우 this는 전역 객체를 가리킨다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80943531-61db0f80-8e22-11ea-898a-6dbc8b95a6a1.png\" alt=\"image\"></p>\n<p><strong>전역 컨텍스트(전역 코드)의 경우 VO, SC, this의 값은 항상 GO이다.</strong></p>\n<br/>\n<h3 id=\"전역-코드의-실행\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-label=\"전역 코드의 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 코드의 실행</h3>\n<p>예제의 코드에서 변수 x에 문자열 ‘xxx’ 할당과 함수 foo의 호출이 실행된다.</p>\n<h3 id=\"변수-값의-할당\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\"변수 값의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 값의 할당</h3>\n<p>전역 변수 x에 문자열 ‘xxx’를 할당할 때, <strong>현재 실행 컨텍스트의 스코프 체인을 0번 인덱스 부터 가리키고 있는 VO를 검색하여 변수명에 해당하는 프로퍼티가 있는지 찾는다.</strong> 발견하면 ‘xxx’를 할당한다.</p>\n<h3 id=\"함수-foo의-실행\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-foo%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-label=\"함수 foo의 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 foo의 실행</h3>\n<p>전역코드의 함수 foo가 실행되면 <strong>새로운 함수 실행 컨텍스트가 생성된다.</strong> 함수 foo의 실행 컨텍스트로 컨트롤이 이동하면 전역 코드의 경우와 마찬가지로 </p>\n<ol>\n<li>스코프 체인의 생성과 초기화</li>\n<li>Variable Instantiation 실행</li>\n<li>this value 결정</li>\n</ol>\n<p>이 순차적으로 실행된다. 단, 전역 코드와 다르게 <strong>함수 코드</strong>가 실행되기 때문에 전역 코드의 룰이 아닌 함수코드의 룰이 적용된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80943976-6c49d900-8e23-11ea-90d7-ba98400ae691.png\" alt=\"image\"></p>\n<h3 id=\"스코프-체인의-생성과-초기화-1\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8%EC%9D%98-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%B4%88%EA%B8%B0%ED%99%94-1\" aria-label=\"스코프 체인의 생성과 초기화 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 체인의 생성과 초기화</h3>\n<p>함수 코드의 <strong>스코프 체인의 생성과 초기화</strong>는 Activation Object를 생성하고 이 객체를 스코프 체인의 선두에 설정하는 것으로 시작한다.</p>\n<p>Activation Object는 우선 <strong>arguments 프로퍼티의 초기화</strong>를 실행한다. 그 후 <code class=\"language-text\">Variable Instantiation</code> 가 실행된다. ( AO에는 프로그램이 직접 접근할 수 없다. 하지만 프로퍼티에는 접근 가능하다.)</p>\n<p><em>잠깐.. <code class=\"language-text\">arguments</code> 객체란 함수에 전달된 인수에 해당하는 <code class=\"language-text\">Array</code> 형태의 객체이다.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80944471-a1a2f680-8e24-11ea-9e9a-06fa7e040a1f.png\" alt=\"image\"></p>\n<p>그 후, <code class=\"language-text\">Caller ( 이 시점에서는 전역 컨텍스트 )</code> 의 SC이 참조하고 있는 객체(GO)가 현재 실행 컨텍스트의 스코프 체인에 <code class=\"language-text\">push</code> 된다. </p>\n<p>따라서 함수 foo를 실행한 직후, 현재 실행 컨텍스트의 스코프 체인은 AO-1 과 GO 를 순차적으로 참조한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80944653-052d2400-8e25-11ea-897d-36576300f159.png\" alt=\"image\"></p>\n<br/>\n<h3 id=\"variable-instantiation-실행\" style=\"position:relative;\"><a href=\"#variable-instantiation-%EC%8B%A4%ED%96%89\" aria-label=\"variable instantiation 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Instantiation 실행</h3>\n<p><strong>스코프 체인의 생성과 초기화</strong>에서 생성된 AO를 VO로서 <code class=\"language-text\">Variable Instantiation</code>이 실행된다. 이 과정을 제외하고는 전역 코드와 같은 처리가 실행된다. ( VO에 함수 설정 -> VO에 변수 설정 ) 따라서 VO에 프로퍼티 bar 값은 새로 생성된 Function Object 로 설정되고, <code class=\"language-text\">[[Scopes]</code>]는 현재 실행 컨테스트의 SC 리스트를 가리키게 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80945115-0a3ea300-8e26-11ea-808b-147bb5ea9c6d.png\" alt=\"image\"> </p>\n<p>다음으로 변수 y를 프로퍼티로 추가하고 값은 <code class=\"language-text\">undefined</code>로 초기화 한다. ( <code class=\"language-text\">var</code>로 선언 했으니까 동시에 함)</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80945182-31957000-8e26-11ea-9b46-8c58557fdfe5.png\" alt=\"image\"></p>\n<br/>\n<h3 id=\"this-value-설정\" style=\"position:relative;\"><a href=\"#this-value-%EC%84%A4%EC%A0%95\" aria-label=\"this value 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this value 설정</h3>\n<p>변수 처리가 끝나면 다음은 this value가 결정된다. (처음에는 다 GO 가리킴) this에 할당되는 값은 함수 호출 패턴에 의해 결정된다. <strong>내부 함수의 경우 this의 value는 전역 객체이다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80945316-846f2780-8e26-11ea-9cf9-46359e779c62.png\" alt=\"image\"> </p>\n<br/>\n<h3 id=\"foo-함수-코드의-실행\" style=\"position:relative;\"><a href=\"#foo-%ED%95%A8%EC%88%98-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-label=\"foo 함수 코드의 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>foo 함수 코드의 실행</h3>\n<p>foo함수 내부에서는 변수 y에 문자열 ‘yyy’의 할당과 함수 bar가 실행된다.</p>\n<h3 id=\"변수-값의-할당-1\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9-1\" aria-label=\"변수 값의 할당 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 값의 할당</h3>\n<p>지역변수 ‘y’에 문자열 ‘yyy’를 할당할 때, 현재 실행 컨텍스트의 스코프 체인을 0번 인덱스 부터 순회하여 참조하고 있는 VO에 변수 y가 있다면 값 ‘yyy’를 할당한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80945532-f6e00780-8e26-11ea-9e00-ffcfd7f1c309.png\" alt=\"image\"></p>\n<h3 id=\"함수-bar의-실행\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-bar%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-label=\"함수 bar의 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 bar의 실행</h3>\n<p>함수 bar가 실행되기 시작하면 새로운 실행 컨텍스트가 생성되고 컨트롤이 함수 bar의 실행 컨테스트로 넘어가면 함수 foo의 코드와 같이 </p>\n<ol>\n<li>스코프 체인의 생성과 초기화 ( 활성객체 생성, SC 리스트 0번 인덱스가 VO 가리킴 )</li>\n<li>Variable Instantiation 실행 </li>\n<li>this value 결정</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/80945743-71a92280-8e27-11ea-919a-7210e2a338c1.png\" alt=\"image\"></p>\n<p>마지막 단계에서 <code class=\"language-text\">console.log(x + y + z)</code> 결과는 아래와 같은 과정을 거친다.</p>\n<p>스코프 체인 변수 검색</p>\n<ol>\n<li>x :  AO-2에서 x 검색 실패 -> AO-1에서 변수 검색 실패 -> GO에서 성공</li>\n<li>y : AO-2에서 검색 실패 -> AO-1에서 검색 성공</li>\n<li>z : AO-2 에서 검색 성공</li>\n</ol>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ol>\n<li><a href=\"https://poiemaweb.com/js-execution-context\">https://poiemaweb.com/js-execution-context</a></li>\n<li><a href=\"https://jee-goo.tistory.com/54\">https://jee-goo.tistory.com/54</a></li>\n</ol>","frontmatter":{"title":"실행 컨텍스트","date":"May 04, 2020"}}},"pageContext":{"slug":"/javascript/the-execution-context-(js)/","previous":{"fields":{"slug":"/algorithm/20200502-알고리즘/"},"frontmatter":{"title":"20200502 알고리즘","category":"algorithm"}},"next":{"fields":{"slug":"/algorithm/20200504-알고리즘/"},"frontmatter":{"title":"20200504 알고리즘","category":"algorithm"}}}},"staticQueryHashes":["3128451518","96099027"]}