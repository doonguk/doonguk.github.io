{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/woowahan-typescript-세미나-정리(1)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"aeeb723b-f8be-566a-8062-03fced4d1a75","excerpt":"목차 작성자와 사용자 interface 와 type alias 서브 타입과 슈퍼 타입  타입 추론 이해하기 Type Guard 로 안전함을 파악하기 Class 를 안전하게 만들기 Type System? Typescript의 Type System 타입이란 해당 변수가 할 수 있는 일을 결정한다. 자바스크립트는 함수 사용법에 대해 오해를 야기한다. 타입스크립트의 추론에 의지하는 경우 이런 경우, error…","html":"<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<ol>\n<li><a href=\"#1\">작성자와 사용자</a></li>\n<li><a href=\"#2\">interface 와 type alias</a></li>\n<li><a href=\"#3\">서브 타입과 슈퍼 타입 </a></li>\n<li><a href=\"#4\">타입 추론 이해하기</a></li>\n<li><a href=\"#5\">Type Guard 로 안전함을 파악하기</a></li>\n<li><a href=\"#6\">Class 를 안전하게 만들기</a></li>\n</ol>\n<br/>\n<br/>\n<h2 id=\"1\">작성자와 사용자</h2>\n<ol>\n<li>Type System?</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 컴파일러에게 사용하는 타입을 명시적으로 지정하는 시스템\n- 컴파일러가 자동으로 타입을 추론하는 시스템</code></pre></div>\n<ol start=\"2\">\n<li><strong>Typescript의 Type System</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 타입을 명시적으로 지정할 수 있다.\n- 타입을 명시적으로 지정하지 않으면, 타입스크립트 컴파일러가 자동으로 타입을 추론한다.</code></pre></div>\n<ol start=\"3\">\n<li><strong>타입이란 해당 변수가 할 수 있는 일을 결정한다.</strong></li>\n<li>자바스크립트는 함수 사용법에 대해 오해를 야기한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> <span class=\"token number\">38</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용자는 사용법을 숙지하지 않은 채, 문자열을 사용하여 함수를 실행했다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<ol start=\"5\">\n<li>타입스크립트의 추론에 의지하는 경우</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> <span class=\"token number\">38</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 사용자는 a가 any 이기 때문에, 사용법에 맞게 문자열을 사용하여 함수를 실행했다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>이런 경우, error를 방출하지 않지만 사용자 입장에서 예측하지 못한 결과를 얻는다.</p>\n<p>이때! <strong><code class=\"language-text\">noImplicityAny</code> 옵션을 사용하면</strong>, 타입을 명시적으로 지정하지 않는 경우, <strong>타입스크립트가 추론 중 <code class=\"language-text\">any</code> 라고 판단하게 되면, 컴파일 에러를 발생시켜 명시적으로 지정하도록 유도한다.</strong></p>\n<ol start=\"6\">\n<li><code class=\"language-text\">number</code> 타입으로 추론된 리턴 타입</li>\n</ol>\n<p>매개변수의 타입은 명시적으로 지정했다. 명시적으로 지정하지 않은 (아래)함수의 리턴 타입은 <code class=\"language-text\">number</code> | <code class=\"language-text\">undefined</code> 로 추론된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">f4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> <span class=\"token number\">38</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>사용자는 음수를 넣으면 <code class=\"language-text\">undefined</code> + 5가 실행되어 예측하지 못한 결과를 얻는다. 즉 여기서는 함수내에 return이 되지 않는 것 까지 타이핑이 되어있다(런타임과 컴파일 타임의 타입이 다르네)</p>\n<p>이때! <strong><code class=\"language-text\">strictNullChecks</code> 옵션을</strong> 사용하면, <strong>모든 타입에 자동으로 포함되어 있는 <code class=\"language-text\">null</code> 과 <code class=\"language-text\">undefined</code> 를 제거해준다.</strong> 따라서 위와 같은 코드에서, 타이핑에 따른 연산을 바로 할 수 없게된다.</p>\n<p>추가적으로 <strong><code class=\"language-text\">noImplicitReturns</code> 옵션</strong> 을 켜면, <strong>함수 내에서 모든 코드가 값을 리턴하지 않으면( 위 코드의 경우 <code class=\"language-text\">if</code> 문 아래에서 return이 없음) 컴파일 에러를 발생</strong>시킨다.</p>\n<br/>\n<h2 id=\"2\">interface 와 type alias</h2>\n<ol>\n<li>structual type system : 구조가 같으면, 같은 타입이다.</li>\n<li>nominal type system : 구조가 같아도 이름이 다르면, 다른 타입이다.</li>\n<li><code class=\"language-text\">function</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">EatType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>food<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IEat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>food<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li><code class=\"language-text\">array</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonList</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPersonList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// indexable 타입이라고 부름</span></code></pre></div>\n<ol start=\"5\">\n<li><code class=\"language-text\">intersection</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ErrorHandling</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ArtistsData</span> <span class=\"token punctuation\">{</span>\n  artists<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// type alias</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ArtistResponseType</span> <span class=\"token operator\">=</span> ArtistsData <span class=\"token operator\">&amp;</span> ErrorHandling\n<span class=\"token comment\">// interface</span>\n<span class=\"token class-name\"><span class=\"token keyword\">interface</span></span> IArtistsResponse <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArtistsData</span><span class=\"token punctuation\">,</span> ErrorHandling <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> art<span class=\"token operator\">:</span> ArtistsResponseType\n<span class=\"token keyword\">let</span> iar<span class=\"token operator\">:</span> IArtistsResponse</code></pre></div>\n<ol start=\"6\">\n<li><code class=\"language-text\">union types</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fish</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function\">layEggs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PetType</span> <span class=\"token operator\">=</span> Bird <span class=\"token operator\">|</span> Fish</code></pre></div>\n<p><code class=\"language-text\">union type</code> 으로 만들어진 것에 이름을 붙일 때에는, <code class=\"language-text\">type alias</code> 를 쓴다. 주의할 점은!</p>\n<p><code class=\"language-text\">interface IPet extends PetType</code> 와 같이 <code class=\"language-text\">interface</code>가 상속 받거나, <code class=\"language-text\">class Pet implements PetType {}</code> 처럼 class가 구현하는 것은 허용되지 않는다.</p>\n<ol start=\"7\">\n<li><code class=\"language-text\">Declaration Merging - interface</code></li>\n</ol>\n<p><code class=\"language-text\">interface</code> 에는 같은 이름으로 타입이 선언 되어있으면, 기본적으로 Merge 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MergingInterface</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MergingInterface</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> mi<span class=\"token operator\">:</span> MergingInterface <span class=\"token comment\">// mi 는 a 와 b 모두 타입으로 갖고있다.</span></code></pre></div>\n<p><strong>단, 이 merging 기능은 <code class=\"language-text\">type alias</code> 에서는 지원되지 않는다(오류 뱉음)</strong></p>\n<ol start=\"8\">\n<li>강연자님은, 보통 새로운 타입을 만들 때 <code class=\"language-text\">interface</code> 를 <code class=\"language-text\">union type</code> 이이나 <code class=\"language-text\">intersection type</code> 또는 말 그대로 무언가에 ‘별칭’을 줘야 할 때 <code class=\"language-text\">type alias</code>를 사용하심.</li>\n</ol>\n<br/>\n<h2 id=\"3\">서브 타입과 슈퍼 타입 </h2>\n<ul>\n<li>case1</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> sub1<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> sup1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> sub1\nsub1 <span class=\"token operator\">=</span> sup1 <span class=\"token comment\">// error</span></code></pre></div>\n<p>sub1은 <strong>리터럴 타입</strong>이다. 여기선 1 말고 다른 어떤 것(2, 3 등등)도 할당 될 수 없다. 1은 number의 부분집합이다.</p>\n<ul>\n<li>case2</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> sub2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> sup2<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> sub2\nsub2 <span class=\"token operator\">=</span> sup2 <span class=\"token comment\">// error</span></code></pre></div>\n<p><code class=\"language-text\">array</code>는 <code class=\"language-text\">object</code>의 한 종류이다. 따라서 <code class=\"language-text\">sup2 = sub2</code> 는 가능하다.</p>\n<ul>\n<li>case3</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> sub3<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> sup3<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sub3\nsub3 <span class=\"token operator\">=</span> sup3 <span class=\"token comment\">// error</span></code></pre></div>\n<p>sub3은 <code class=\"language-text\">number</code> 타입 원소 2개를 갖는 <strong>튜플</strong>이다. 따라서 <code class=\"language-text\">number</code> 를 원소로 갖는 <code class=\"language-text\">array</code>의 부분집합이다.</p>\n<ul>\n<li>case4</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> sub5<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">never</span>\n<span class=\"token keyword\">let</span> sup5<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> sub5\nsub5 <span class=\"token operator\">=</span> sup5 <span class=\"token comment\">// error</span></code></pre></div>\n<p><code class=\"language-text\">never</code> 타입은 절대로 발생하지 않는 값의 타입을 나타낸다(<a href=\"https://infoscis.github.io/2017/05/14/TypeScript-handbook-basic-types/\">여기</a>를 참고하자.) <code class=\"language-text\">never</code> 는 모든 타입의 서브 타입이며, 모든 타입에 assign 가능하다. 하지만 어떤 타입도 <code class=\"language-text\">never</code>의 서브 타입이 아니고 assign 할 수 없다.</p>\n<p><code class=\"language-text\">never</code> 타입 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Function returning never must have unreachable end point</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Inferred return type is never</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something failed'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Function returning never must have unreachable end point</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">infiniteLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>case5</li>\n</ul>\n<p>자식 클래스는 부모 클래스의 서브 타입이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubDog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> sub6<span class=\"token operator\">:</span> SubDog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> sup6<span class=\"token operator\">:</span> Animal <span class=\"token operator\">=</span> sub6\nsup6 <span class=\"token operator\">=</span> sub6 <span class=\"token comment\">// error</span></code></pre></div>\n<h3 id=\"그래서-법칙은-같거나-서브-타입인-경우-할당이-가능하다--공변성\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%B2%95%EC%B9%99%EC%9D%80-%EA%B0%99%EA%B1%B0%EB%82%98-%EC%84%9C%EB%B8%8C-%ED%83%80%EC%9E%85%EC%9D%B8-%EA%B2%BD%EC%9A%B0-%ED%95%A0%EB%8B%B9%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4--%EA%B3%B5%EB%B3%80%EC%84%B1\" aria-label=\"그래서 법칙은 같거나 서브 타입인 경우 할당이 가능하다  공변성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 법칙은? 같거나 서브 타입인 경우, 할당이 가능하다. => 공변성</h3>\n<ul>\n<li>case6</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> sub8<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> sup8<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> sub8\n\n<span class=\"token keyword\">let</span> sub9<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> sup9<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> sub9</code></pre></div>\n<p><strong><code class=\"language-text\">object</code> 에서는 각각의 프로퍼티가 대응하는 프로퍼티와 같거나 서브타입이어야 한다.</strong> 여기서는 sub8의 a 프로퍼티가 <code class=\"language-text\">string</code>으로 <code class=\"language-text\">string | number</code>의 서브타입 이기 때문에 assign이 가능하다.</p>\n<ul>\n<li>case7</li>\n</ul>\n<p><strong>함수의 매개변수 타입만 같거나 슈퍼타입인 경우, 할당이 가능하다.(반병)</strong> 서브 타입은 안된다!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Developer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StartupDeveloper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Developer</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tellme</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Developer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Developer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// okay</span>\n<span class=\"token function\">tellme</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">dToD</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Developer<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Developer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// okay</span>\n<span class=\"token function\">tellme</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">pToD</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Developer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// so..so..</span>\n<span class=\"token function\">tellme</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">sToD</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> StartupDeveloper<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Developer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>3번째 케이스의 경우 오류를 뱉어야 하지만, 컴파일러 옵션 설정을 해주지 않으면 그냥 지나간다. 이때!</p>\n<p><strong><code class=\"language-text\">strictFunctionTypes</code> 옵션을 켜면</strong> 3번째 케이스는 <strong>sub type을 assign 해서 오류를 뱉는다.</strong></p>\n<ul>\n<li>any</li>\n</ul>\n<p>입력은 마음대로, 함수 구현이 자유롭게 (자유가 항상 좋은건 아니다.) 어떤 값이든 허용하기에 작성자의 실수 가능성이 높다.</p>\n<ul>\n<li><strong>any 대신 unknown</strong></li>\n</ul>\n<p>입력은 마음대로, 함수 구현은 문제 없도록.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">funknown</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error! Obejct is of type 'unknown'</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> <span class=\"token number\">38</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">funknown</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 380</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">funknown</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello Mark</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">funknown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p><code class=\"language-text\">a.toString()</code> 을 하면 일단 <code class=\"language-text\">error</code>를 뱉는다. 하지만 그 밑에 코드처럼 <code class=\"language-text\">type</code>을 분기처리 하여 구현할 수 있다.</p>\n<br/>\n<h2 id=\"4\">타입 추론 이해하기</h2>\n<ul>\n<li>Let 과 const의 타입 추론 그리고 <code class=\"language-text\">as const</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Mark'</span> <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'Mark'</span> <span class=\"token comment\">// 'Mark' => literal type</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">38</span> <span class=\"token comment\">// number</span>\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token number\">38</span> <span class=\"token comment\">// 38 => literal type</span>\n\n<span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// boolean</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// false => literal type</span></code></pre></div>\n<p>원시형 값을 할당 했을 때 타입을 지정하지 않으면 <code class=\"language-text\">let</code> 은 할당된 값을 기준으로 타입이 지정되고, <code class=\"language-text\">const</code>는 리터럴 타입으로 지정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Haeun'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// string[]</span>\n<span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Haeun'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// string[]</span></code></pre></div>\n<p><code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 모두 <code class=\"language-text\">array</code> 원소의 공통된 타입을 추론해서(Mark도 <code class=\"language-text\">string</code>, Haeun 도 <code class=\"language-text\">string</code>) 타입을 만들어낸다.</p>\n<p>위와 같은 추론이 싫다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Haeun'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bokdang'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span></code></pre></div>\n<p><code class=\"language-text\">as const</code> 타입 assertion을 이용해서 <code class=\"language-text\">readonly [&#39;Mark&#39;, &#39;Haeun&#39;, &#39;Bokdang&#39;]</code> 리터럴 타입을 만드는 방법도 있다.</p>\n<ul>\n<li>Best common type (가장 공통적인 타입을 추론해낸다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// (number | null)[]</span>\n<span class=\"token keyword\">const</span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// (number | null)[]</span></code></pre></div>\n<p>각각을 정확하게 타입하고 싶다면 <code class=\"language-text\">as const</code> 이용하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rhino</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Elephant</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Snake</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// (Rhino | Elephant | Snake)[]</span>\n<span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// (Rhino | Elephant | Snake)[]</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Animal[]</span>\n<span class=\"token keyword\">const</span> o<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Animal[]</span></code></pre></div>\n<p>Class에서도 Best common type 추론이 사용되는데, n 같은 경우 <code class=\"language-text\">Animal</code>이 Best Common Type으로 추론되어 <code class=\"language-text\">Animal[]</code> 로 타이핑된다.</p>\n<ul>\n<li>Contextual Typing - 위치에 따라 추론을 다르게 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">click</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  e <span class=\"token comment\">// any</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> click<span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">e</code>는 <code class=\"language-text\">any</code> 지만,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  e <span class=\"token comment\">// MouseEvent</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서는 <code class=\"language-text\">MouseEvent</code>로 추론한다!</p>\n<br/>\n<h2 id=\"5\">Type Guard 로 안전함을 파악하기</h2>\n<ul>\n<li><code class=\"language-text\">typeof</code> Type Guard - 보통 Primitive 타입일 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  value <span class=\"token comment\">// number | string</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token comment\">// number</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span>\n  value <span class=\"token comment\">// string</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">if</code> 문 안의 <code class=\"language-text\">return value</code>에 의해서(+ Type Guard에 의해서) <code class=\"language-text\">number</code> 타입이 떨어져 나간다. 따라서 아래에서는 <code class=\"language-text\">string</code> 타입만 남는다. 만약 <code class=\"language-text\">return</code>을 하지 않으면 아래에서 당연히(?) <code class=\"language-text\">number, string</code> 둘 다 남겠지..</p>\n<ul>\n<li><code class=\"language-text\">instanceof</code> Type Guard - 보통 Error 객체 구분에 많이 쓰인다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NegativeNumberError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> NegativeNumberError <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NegativeNumberError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NegativeNumberError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  num <span class=\"token comment\">// number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main</code> 함수 내에 <code class=\"language-text\">num</code> 을 보면, 런타임 과정에서는 <code class=\"language-text\">num</code> 이 Error 객체인걸 알 수 있지만, <strong>컴파일 단계</strong> 에서는 알 수 없다. 따라서 <code class=\"language-text\">instanceof</code> 를 통해 type guard를 했다.</p>\n<ul>\n<li><code class=\"language-text\">in</code> operator Type Guard - Object의 프로퍼티 유무로 처리하는 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  role<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> Admin <span class=\"token operator\">|</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'role'</span> <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">routeToAdminPage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">routeToHomePage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Literal Type Guard - Object의 프로퍼티가 같고, 타입이 다른 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMaching</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMachine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'CAR'</span>\n  wheel<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Boat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMachine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'BOAT'</span>\n  motor<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getWhellOrMotor</span><span class=\"token punctuation\">(</span>machine<span class=\"token operator\">:</span> Car <span class=\"token operator\">|</span> Boat<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'CAR'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>wheel\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>motor\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Redux</code>의 <code class=\"language-text\">reducer</code>에서 자주 사용되는 기법</p>\n<ul>\n<li>Custom Type Guard - 앞에 소개 된 Type Guard가 먹히지 않을 때!</li>\n</ul>\n<p>직접 Type Guard를 만드는 방식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getWheelOrMotor</span><span class=\"token punctuation\">(</span>machine<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCar</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>wheel\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBoat</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> machine<span class=\"token punctuation\">.</span>motor\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isCar</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> arg <span class=\"token keyword\">is</span> Car <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'CAR'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isBoat</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> arg <span class=\"token keyword\">is</span> Boat <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'BOAT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">isCar</code> 함수 내부에서, <code class=\"language-text\">arg is Car</code>의 의미는 함수가 return 하는 값이 <code class=\"language-text\">true</code>라면 <code class=\"language-text\">arg</code>의 type은 Car로 타이핑 된다.</p>\n<p>이를 <code class=\"language-text\">type predicate</code>이라고 한다. <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\">여기</a> 참고하자!</p>\n<h2 id=\"6\">Class 를 안전하게 만들기</h2>\n<p><strong>v3.9.7</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square2</span> <span class=\"token punctuation\">{</span>\n  area <span class=\"token comment\">// error! implicit any</span>\n  sideLength <span class=\"token comment\">// error! implicit any</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">noImplicitAny</code> 옵션에 의해 타입을 지정하지 않으면 error를 발생</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square2</span> <span class=\"token punctuation\">{</span>\n  area<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> squre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>squre<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">console.log</code> 에서 <code class=\"language-text\">squre.area</code>는 컴파일 단계에서는 <code class=\"language-text\">number</code>인데 런타임 단계에서는 <code class=\"language-text\">undefined</code>이다. 따라서 에러를 발생</p>\n<p>이를 방지하기 위해 <strong>strictPropertyInitialization</strong> 옵션을 켜면 <strong><code class=\"language-text\">class</code>의 프로퍼티가 생성자 혹은 선언에서 값이 지정되지 않으면, 컴파일 에러를 발생시켜 주의를 준다.</strong></p>\n<br/>\n<p><strong>v4.0.2</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  area\n  sideLength\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> sideLength\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> sideLength <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>4버전 부터는 클래스 내부의 프로퍼티의 선언부에 타입을 지정하지 않아도, any로 평가되지 않고 생성자에 의해 추론된다.</p>\n<p>이건 다른 예시,</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  sideLength<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* conditional */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> sideLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">sideLength</code>는 생성자에서 <code class=\"language-text\">number</code> 또는 <code class=\"language-text\">undefined</code>로 추론된다(if 문에 안들어 올 수 있으니) 따라서 <code class=\"language-text\">getter</code> 부분에서 에러를 발생시킨다.( 컴파일 단계에서 알려주는 듯? <code class=\"language-text\">error! Object is possibly undefined</code>)</p>\n<p>그리고 한계가 있음. <strong>여전히 생성자를 벗어나면 추론되지 않는다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  sideLength <span class=\"token comment\">// !로 의도를 표현</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> sideLength\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성자를 벗어나면 추론이 안되기 때문에 위 코드에서는 <code class=\"language-text\">!</code>로 주의를 나타냈다. 여기서의 의도는 ‘생성자에서 초기화는 안되지만, 어딘가에서 초기화가 될거야’이다.</p>","frontmatter":{"title":"Woowahan Typescript 세미나 정리(1)","date":"October 19, 2020"}}},"pageContext":{"slug":"/typescript/woowahan-typescript-세미나-정리(1)/","previous":{"fields":{"slug":"/cs/html-궁금했던-개념들/"},"frontmatter":{"title":"HTML 궁금했던 개념들","category":"cs"}},"next":{"fields":{"slug":"/typescript/woowahan-typescript-세미나-정리(진행중)/"},"frontmatter":{"title":"Woowahan Typescript 세미나 정리(진행중)","category":"typescript"}}}},"staticQueryHashes":["3128451518","96099027"]}