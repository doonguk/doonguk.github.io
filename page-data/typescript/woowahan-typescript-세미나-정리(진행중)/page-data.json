{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/woowahan-typescript-세미나-정리(진행중)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"9f3f7e6a-642a-58c4-a5e9-28158b957495","excerpt":"Conditional Type 을 활용하기 목표는 T가 이면 StringContainer,  면 NumberContainer를 사용 첫번째 방법, 를 조건부 타입에서 사용한다면 ‘T 가  이면’ 와 같이 이해하면 좋다. 핸드북에 의하면,  는 T가 K에 서브타입이면 A 아니면 B라고 설명한다. 그 밖에도  는 제약사항 을 주기 위해 자주 사용된다. 예시로  에서  은 Generic…","html":"<h2 id=\"conditional-type-을-활용하기\" style=\"position:relative;\"><a href=\"#conditional-type-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"conditional type 을 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Type 을 활용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringContainer</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NumberContainer</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  nearestPrime<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Item<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  container<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token comment\">// 이러지 말자.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>목표는 T가 <code class=\"language-text\">string</code>이면 StringContainer, <code class=\"language-text\">number</code> 면 NumberContainer를 사용</p>\n<p>첫번째 방법,</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Item<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n  container<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">?</span> StringContainer <span class=\"token operator\">:</span> NumberContainer\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> item<span class=\"token operator\">:</span> Item<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Type 'null' is not assignable to type StringContainer</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">extends</code>를 조건부 타입에서 사용한다면 ‘T 가 <code class=\"language-text\">string</code> 이면’ 와 같이 이해하면 좋다.</p>\n<blockquote>\n<p>핸드북에 의하면, <code class=\"language-text\">T extends K ? A : B</code> 는 T가 K에 서브타입이면 A 아니면 B라고 설명한다.</p>\n<p>그 밖에도 <code class=\"language-text\">extneds</code> 는 <strong>제약사항</strong> 을 주기 위해 자주 사용된다. 예시로</p>\n<p><code class=\"language-text\">type MyReturnType&lt;T extneds (...args: any) =&gt; any&gt; = ...</code> 에서 <code class=\"language-text\">MyReturnType</code> 은 Generic으로 함수 타입만 받는다고 제약을 걸었다.</p>\n</blockquote>\n<p>더 타입을 자세하게 준다면!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Item<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n  container<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span>\n    <span class=\"token operator\">?</span> StringContainer\n    <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span>\n    <span class=\"token operator\">?</span> NumberContainer\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> item<span class=\"token operator\">:</span> Item<span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Type boolean is not assignable to type 'never',</span>\n  container<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Type 'null' is not assignable to type 'never'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">never</code>를 이용해서 <code class=\"language-text\">string</code>도 <code class=\"language-text\">number</code> 도 아니면 사용 불가능하게 구현할 수 있다.</p>\n<blockquote>\n<p><code class=\"language-text\">never</code>는 모든 타입의 sub type 이지만, 어떤 타입에도 할당 될 수 없다.</p>\n</blockquote>\n<p><strong>never의 또다른 이용 ArrayFilter<T> 만들기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ArrayFilter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringsOrNumbers</span> <span class=\"token operator\">=</span> ArrayFilter<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>여기서 <code class=\"language-text\">T extends any[]</code> 의 의미는 ‘T가 배열이면’과 같다. <code class=\"language-text\">StringsOrNumbers</code> 타입은 아래와 같은 과정으로 컴파일된다.</p>\n<ol>\n<li>string | number | string[] | number[]</li>\n<li>never | never | string[] | number[]</li>\n<li>string[] | number[]</li>\n</ol>\n<p><strong>Generic을 이용해서 제약사항 걸기 (마치 never 처럼)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">World</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token generic-function\"><span class=\"token function\">getItem</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">?</span> Table <span class=\"token operator\">:</span> Dino\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> what <span class=\"token operator\">=</span> world<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>T는 <code class=\"language-text\">string</code> | <code class=\"language-text\">number</code> 인데 boolean을 넣었으므로 에러 발생.</p>\n<p><strong>Flatten<T> 구현하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token comment\">// primitive형</span></code></pre></div>\n<p>우선 Array의 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ArrayFlattened</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> array<span class=\"token operator\">></span></code></pre></div>\n<p>이 부분은 질문 해야하는 부분인데 array의 타입이 [number]와 함께 <code class=\"language-text\">(number | string)[][number]</code>로 추론되어 array의 각 인덱스를 참조한 값 즉 배열의 각 원소의 타입 <code class=\"language-text\">number | string</code> 으로 추론된다.</p>\n<p>Object인 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">38</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ObjectFlattened</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> person<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">keyof</code>는 Object의 프로퍼티를 열거한다. 즉 위 코드에서는 <code class=\"language-text\">name | age</code> 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">keyof T =&gt; &#39;name&#39; | &#39;age&#39;\nT[&#39;name&#39; | &#39;age&#39;] =&gt; T[&#39;name&#39;] | T[&#39;age&#39;] =&gt; string | number</code></pre></div>\n<p><strong>infer</strong></p>\n<p>단어의 의미와 비슷하게 <code class=\"language-text\">infer</code> 를 이용하면 타입을 추론할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UnpackPromise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">K</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">UnpackPromise</code> 는 Generic으로 받은 타입을 <code class=\"language-text\">infer</code> 로 추론하여 T가 Promise의 Array라면 추론한 K로 타이핑하고 아니면 any로 타이핑한다. 위에서 <code class=\"language-text\">promisese</code> 의 타입은 <code class=\"language-text\">(Promise&lt;string&gt; | Promise&lt;number&gt; )[]</code> 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Expected</span> <span class=\"token operator\">=</span> UnpackPromise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> promises<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">promises</code> 를 unpack 하게 되면, <code class=\"language-text\">infer</code>에 의해 <code class=\"language-text\">string</code> 과 <code class=\"language-text\">number</code> 가 추론되고 K는 <code class=\"language-text\">string | number</code> 가 된다.</p>\n<p><strong>함수의 리턴 타입 알아내기 - MyReturnType</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>seed<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> seed <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수의 Return 타입은 딱 봐도 <code class=\"language-text\">number</code> 지만 어떤 함수든 리턴타입을 알아낼 수 있는 <code class=\"language-text\">MyReturnType</code> 타입을 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">R</span>\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></code></pre></div>\n<p><code class=\"language-text\">MyReturnType</code> 은 Generic으로 함수만 받겠다고 제약사항을 걸었다. 그리고 함수를 받아서 <code class=\"language-text\">infer</code> 키워드를 통해 리턴값을 추론했다.</p>\n<h3 id=\"helper-conditional-type-만들어보기--이미-있는것들임-ㅎㅎ-\" style=\"position:relative;\"><a href=\"#helper-conditional-type-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0--%EC%9D%B4%EB%AF%B8-%EC%9E%88%EB%8A%94%EA%B2%83%EB%93%A4%EC%9E%84-%E3%85%8E%E3%85%8E-\" aria-label=\"helper conditional type 만들어보기  이미 있는것들임 ㅎㅎ  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Helper Conditional Type 만들어보기 ( 이미 있는것들임 ㅎㅎ )</h3>\n<p><strong>Excluded( diff )</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Excluded<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Excluded<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></code></pre></div>\n<p>Excluded 는 T, U를 받아서 T가 U의 Sub Type 이라면 <code class=\"language-text\">never</code> 로 배제시킨다. (위에 ArrayFilter 만들 때 같은 논리) 따라서 A는 <code class=\"language-text\">string</code> 이다.</p>\n<p>추가적으로, 이 코드에서 T는 유니온 타입을 받는다. <strong>타입스크립트 컴파일러는 T가 유니온 타입이면 <code class=\"language-text\">extends</code> 키워드를 연산할 때 유니온 타입 각각에 대해서 연산한다. 즉 <code class=\"language-text\">string extends U, number extends U</code> 를 계산한다!</strong></p>\n<p>실제로 사용할 땐 <code class=\"language-text\">Exclude&lt;T, U&gt;</code> 를 사용하면 된다.</p>\n<p><strong>Extracted( filter )</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Extracted<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Extracted<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// number</span></code></pre></div>\n<p>Exclude와 반대로 U에 맞지 않으면 타입을 filter 한다. 실제로 사용할 땐 <code class=\"language-text\">Extract&lt;T, U&gt;</code>를 사용하면 된다.</p>\n<p><strong>Pick</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>내가 원하는 Key를 갖는 Object의 타입을 알고 싶을 때 사용한다. 이 역시 이미 있는 헬퍼라서 그냥 <code class=\"language-text\">Pick&lt;T, U&gt;</code> 로 쓰면 된다.</p>\n<p><strong>Omit</strong></p>\n<p>원하지 않는 Key를 뺀 타입을 얻고 싶을 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Exclude</code> 내장 헬퍼를 사용해서 U가 아닌 T의 key들만 P로 받아서 구하는 방법이다. 위에서 만들었던 <code class=\"language-text\">Pick</code> 을 활용하면 좀 더 간단해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">>></span></code></pre></div>\n<p>이 역시 이미 있는 헬퍼라서 그냥 <code class=\"language-text\">Omit&lt;T, U&gt;</code> 로 쓰면 된다.</p>\n<p><strong>NonNullable</strong></p>\n<p>타입에 있는 <code class=\"language-text\">null</code> 이나 <code class=\"language-text\">undefined</code> 를 제거해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">null</span></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<p><strong>Parameters</strong></p>\n<p>함수의 파라미터 타입을 튜플 형태로 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Parameters<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n\t\t <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> infer <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>Generic의 제약사항에 함수만 받게 걸어놓고 <code class=\"language-text\">infer</code> 를 이용해서 파라미터를 추론했다.</p>","frontmatter":{"title":"Woowahan Typescript 세미나 정리(진행중)","date":"November 03, 2020"}}},"pageContext":{"slug":"/typescript/woowahan-typescript-세미나-정리(진행중)/","previous":{"fields":{"slug":"/typescript/woowahan-typescript-세미나-정리(1)/"},"frontmatter":{"title":"Woowahan Typescript 세미나 정리(1)","category":"typescript"}},"next":null}},"staticQueryHashes":["3128451518","96099027"]}