{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"2020 02 24 오늘은 알고리즘 공부 다시 할겸 JS로 큐, 스택 구현을 해보았다. 문제도 풀고.. Queue Stack Stack으로 Queue 구현 Stack으로 10 -> 2진수","fields":{"slug":"/playground/2020-02-24/"},"frontmatter":{"date":"February 24, 2020","title":"2020 02 24","category":"playground"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다. 예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발…","fields":{"slug":"/algorithm/20200127---탑/"},"frontmatter":{"date":"January 27, 2020","title":"20200127 - 탑","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.\n※ 트럭이 다리에 완전히 오르지 않은 경우, 이…","fields":{"slug":"/algorithm/20200126---다리를-지나는-트럭/"},"frontmatter":{"date":"January 26, 2020","title":"20200126 - 다리를 지나는 트럭","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 여러 개의 쇠막대기를 레이저로 절단하려고 합니다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자릅니다. 쇠막대기와 레이저의 배치는 다음 조건을 만족합니다. 아래 그림은 위 조건을 만족하는 예를 보여줍니다. 수평으로 그려진 굵은 실선은 쇠막대기이…","fields":{"slug":"/algorithm/20200126---쇠-막대기/"},"frontmatter":{"date":"January 26, 2020","title":"20200126 - 쇠 막대기","category":"algorithm"}}},{"node":{"excerpt":"알고리즘을 풀다가 내가 몰랐던 함수들에 대해 알게 되었다. 정리하자! some 배열 요소에서 하나라도 특정 조건을 만족하는지 알아볼 때 유용한 메소드이다. 다른 배열 메소드와 비슷하게 요소들에  함수들을 적용시켜 하나라도 를 반환하면 함수를 즉시 중단한다. 만약 모든 요소를 순회 했는데 를 반환 하지 않았다면 를 반환한다.  함수의 파라미터로 전달되는 값…","fields":{"slug":"/javascript/javascript-some,-every-함수/"},"frontmatter":{"date":"January 26, 2020","title":"javascript some, every 함수","category":"javascript"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다. 예를 들어, 4개의 문서(A, B…","fields":{"slug":"/algorithm/20200126---프린터/"},"frontmatter":{"date":"January 26, 2020","title":"20200126 - 프린터","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 H-Index는 과학자의 생산성과 영향력을 나타내는 지표입니다. 어느 과학자의 H-Index를 나타내는 값인 h를 구하려고 합니다. 위키백과1에 따르면, H-Index는 다음과 같이 구합니다. 어떤 과학자가 발표한 논문 편 중, 번 이상 인용된 논문이 편 이상이고 나머지 논문이 h번 이하 인용되었다면 가 이…","fields":{"slug":"/algorithm/20200126---h-index/"},"frontmatter":{"date":"January 26, 2020","title":"20200126 - H Index","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 가장 큰 수 0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요. 예를 들어, 주어진 정수가 6, 10, 2라면 6102, 6210, 1062, 1026, 2610, 2106를 만들 수 있고, 이중 가장 큰 수는 6210입니다. 0 또는 양의 정수가 담긴 배열 numbers…","fields":{"slug":"/algorithm/20200124---가장-큰-수/"},"frontmatter":{"date":"January 24, 2020","title":"20200124 - 가장 큰 수","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다. 예를 들어 array가 1, 5, 2, 6, 3, 7, 4, i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 5, 2, 6, 3입니다. 1에서 나온 배열을 정렬하면 2…","fields":{"slug":"/algorithm/20200124---k번째-수/"},"frontmatter":{"date":"January 24, 2020","title":"20200124 - K번째 수","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다. 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solut…","fields":{"slug":"/algorithm/20200124---마라톤-경주/"},"frontmatter":{"date":"January 24, 2020","title":"20200124 - 마라톤 경주","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다. 속한 노래가 많이 재생된 장르를 먼저 수록합니다. 장르 내에서 많이 재생된 노래를 먼저 수록합니다. 장르 내에서 재생 횟수가 같은 노래…","fields":{"slug":"/algorithm/20200124---베스트앨범/"},"frontmatter":{"date":"January 24, 2020","title":"20200124 - 베스트앨범","category":"algorithm"}}},{"node":{"excerpt":"출처 : 프로그래머스 Question 문제 설명 직사각형 종이를 n번 접으려고 합니다. 이때, 항상 오른쪽 절반을 왼쪽으로 접어 나갑니다. 다음은 n = 2인 경우의 예시입니다. image 먼저 오른쪽 절반을 왼쪽으로 접습니다. image 다시 오른쪽 절반을 왼쪽으로 접습니다. image 종이를 모두 접은 후에는 종이를 전부 펼칩니다. 종이를 펼칠 때는 …","fields":{"slug":"/algorithm/20200124---종이접기/"},"frontmatter":{"date":"January 24, 2020","title":"20200124 - 종이접기","category":"algorithm"}}},{"node":{"excerpt":"Start React With TypeScript 1. 프로젝트 생성 기존 리액트 프로젝트를 생성하는 CLI에서 옵션으로  주면 된다. ( 만 해도 가능 ) 생성 후 프로젝트를 확인 해보면 typescript 기반 리액트 컴포넌트는  를 확장자로 갖는다. 2. React.FC   파일을 보면 App 이라는 함수형 컴포넌트를  타입을 이용하여 선언 해 주었…","fields":{"slug":"/react/typescript---react-component/"},"frontmatter":{"date":"January 15, 2020","title":"TypeScript - React Component","category":"react"}}},{"node":{"excerpt":"TypeScript 기초 연습 TypeScript HandBook(한글) 참조 Velopert님 블로그 참조 1. 타입스크립트 설정파일 생성 프로젝트 폴더에서 yarn init을 통해 package.json 을 생성 해준다. y 옵션은 그냥 yarn init 했을 경우 나오는 질문들을 yes 하는 옵션 typescript를 글로벌로 설치 후 tsc —in…","fields":{"slug":"/react/typescript---기초/"},"frontmatter":{"date":"January 15, 2020","title":"TypeScript - 기초","category":"react"}}},{"node":{"excerpt":"지연평가 + Promise 1. L.map, map, take 이 코드에서 go 함수의 첫번째 인자가 Promise라면? 보이는 결과 같이 코드가 제대로 동작하지 않는다. Promise도 처리할 수 있게 코드를 수정 해 보자! 기존에 작성했던 L.map함수를 먼저 보겠다. 여기서 a 값이 Pormise인 경우 인데 이전 포스트에서 작성했던 go1함수를 이…","fields":{"slug":"/javascript/지연성+promise(map)/"},"frontmatter":{"date":"December 26, 2019","title":"지연성+Promise(map)","category":"javascript"}}},{"node":{"excerpt":"Linked List 1. 설명 linked list는 노드들이 링크된 data structure 따라서 기본적으로 노드들이 정의된 data structure를 정의 해줘야 한다. Node 클래스는 data, next 2개의 멤버를 갖는다. data 멤버는 받은 item을 저장하고 next는 다음 노드를 가리키는 역할을 갖는다. 2. 구현 add cur.…","fields":{"slug":"/cs/linkedlist/"},"frontmatter":{"date":"December 26, 2019","title":"LinkedList","category":"cs"}}},{"node":{"excerpt":"Stack 1. 설명 입력과 출력이 한 방향으로 제한된 자료구조 가장 나중에 들어온 것이 가장 나중에 나옴 ( LIFO ) stack과 queue에는 search가 없다. stack overflow 는 스택이 꽉차서 더이상 데이터를 받지 못하는 상태 stack underflow는 스택이 비어서 꺼낼 데이터가 없는 상태 2. 언제 사용할까? 브라우저의 ba…","fields":{"slug":"/cs/stack/"},"frontmatter":{"date":"December 25, 2019","title":"Stack","category":"cs"}}},{"node":{"excerpt":"큐 1. 설명 입력과 출력을 한쪽 끝으로 제한한 자료구조. 먼저 들어온 원소가 먼저 나가기 때문에 FIFO(First In First Out) 이다. 큐의 가장 첫번째 원소를 front, 가장 끝원소를 rear 라고 한다. 큐는 들어올 때 rear로 들어오지만, 나갈때는 front부터 나가는 특성을 갖는다.  ( 놀이공원 대기줄 생각!! ) 접근 방법은 …","fields":{"slug":"/cs/queue/"},"frontmatter":{"date":"December 24, 2019","title":"Queue","category":"cs"}}},{"node":{"excerpt":"go, pipe, reduce 에서 비동기 제어 1. go 만약 중간에 비동기 상황이 일어난 함수가 실행 된다면 기존에 만들었던 go 함수는 정상적으로 동작하지 않는다.  하지만! 이전 포스트 에서 만들었던 go1 함수처럼 비슷하게 구현이 가능하다. 우선 go함수를 보면 사용된 함수는 reduce 함수 이므로 이를 수정 해 줘야한다.  오랜만에 reduc…","fields":{"slug":"/javascript/go,pipe,reduce-비동기제어/"},"frontmatter":{"date":"December 24, 2019","title":"go,pipe,reduce 비동기제어","category":"javascript"}}},{"node":{"excerpt":"1. 모나드 ( 개념 이해 ) 함수를 안전하게 합성하기 위한 도구. 자바스크립트 에서는 모나드를 자세하게 설명하지는 않지만, Array나 Promise 같은거로 모나드가 무엇인지는 설명이 가능하다.  모나드는 어떤 박스( Container ) 라고 생각하면 된다. 이 박스에 어떤 값이 들어있다. 이 박스를 이용해서 함수 합성을 안전하게 하는 것이라고 볼 …","fields":{"slug":"/javascript/모나드와-promise/"},"frontmatter":{"date":"December 21, 2019","title":"모나드와 Promise","category":"javascript"}}},{"node":{"excerpt":"값으로서의 Promise 위 예제에서 go1이 제대로 동작 하려면 f 라는 함수는 동기적으로 동작해야 하는 함수이고, a라는 값도 동기적으로 값을 알 수 있어야 한다. 다른말로는 비동기 상황이 일어난 일급값이 아닌 일반값 즉 프로미스가 아닌 값이어야 한다. 만약 a라는 값이 어떤 상황 이후에 알 수 있는 값이라면? 정상적으로 동작하지 않는다. 여기서 10…","fields":{"slug":"/javascript/값으로서의-promise/"},"frontmatter":{"date":"December 21, 2019","title":"값으로서의 Promise","category":"javascript"}}},{"node":{"excerpt":"Callback 과 Promise 자바스크립트에서 비동기 동시성 프로그래밍을 하는 방법으로는 크게 Callback과 Promise 가 있다. 1. Callback 선언부 100ms 이후에 받은 인자 a에 10을 더한 값을 콜백 함수에 전달 하였다. 실행부 2. Promise 선언부 프로미스 에서는 함수에서 사용할 인자만 받고 콜백함수 같은건 받지 않는다.…","fields":{"slug":"/javascript/callback과-promise/"},"frontmatter":{"date":"December 19, 2019","title":"Callback과 Promise","category":"javascript"}}},{"node":{"excerpt":"Bubble Sort 시간복잡도 O(n2), 공간복잡도 O(1) 현재 처리되는 원소와 다음 인덱스의 원소를 비교하여 현재 원소가 더 크면 서로 교체 Selection Sort (worst, best, average ) 시간복잡도 O(n2)  인자로 받은 배열의 첫번째 원소를 minum value로 설정 두번째 원소부터 배열의 끝 까지 반복문을 순회하며 m…","fields":{"slug":"/cs/정렬(1)/"},"frontmatter":{"date":"December 19, 2019","title":"정렬(1)","category":"cs"}}},{"node":{"excerpt":"L.flatMap 1. Array.prototype.flatMap L.flatMap 함수를 구현하기 전에 자바스크립트에 내장된 Array.prototype.flatMap 함수에 대해 알고 지나가 보자. flatMap 함수는 map 함수와 비교하여 생각하며 이해하기 쉽다. map 함수는 array의 각 원소를 파라미터로 전달된 함수의 return 값에 맞게…","fields":{"slug":"/javascript/함수형-프로그래밍(l.flatmap)/"},"frontmatter":{"date":"December 16, 2019","title":"함수형 프로그래밍(L.flatMap)","category":"javascript"}}},{"node":{"excerpt":"L.flatten L.flatten 함수는 다음과 같은 기능을 갖는다. 위 와 같은 2차원 배열을 depth가 1인 1차원 배열로 펼쳐주는 함수이다.  그럼 구현을 해보자. 먼저 L.flatten 함수는 지연성을 갖기 때문에 제너레이터를 사용하고, 인자로 이터러블을 받는다. 이터러블을 인자로 받아서 for of문을 순회 한다. 만약 순회되는 이터레이터의 …","fields":{"slug":"/javascript/함수형-프로그래밍(l.flatten)/"},"frontmatter":{"date":"December 15, 2019","title":"함수형 프로그래밍(L.flatten)","category":"javascript"}}},{"node":{"excerpt":"find 함수 이전 포스트에서 queryStr 함수는 reduce를 통해 만들어진 것 처럼 함수들은 어떤 계보, 계열을 통해 만들어진다. 이번에 만들어볼 find 함수는 take 함수를 통해 만들어진다. 하지만 find 함수는 조건을 만족하는 원소 한개만 찾는 함수이다. 따라서 위와 같이 구현할 수 있는데, 위 함수는 효율성에 문제가 있는 코드가 있다. …","fields":{"slug":"/javascript/함수형-프로그래밍(find)/"},"frontmatter":{"date":"December 10, 2019","title":"함수형 프로그래밍(find)","category":"javascript"}}},{"node":{"excerpt":"L.map 으로 map 만들기 기존의 map 과 L.map 함수이다. map 함수의 단점(?)은 만약 인자로 받은 이터러블의 원소 전체를 맵핑 하지 않고 일부를 맵핑 한다고 해도 for of 문을 끝까지 순회하며 전체 원소가 맵핑된 결과값을 리턴한다는 것 이다. 하지만 결과 값이 값 그 자체이다. ( 예를들면 1, 2, 3, 4, 5 ) L.map 함수의…","fields":{"slug":"/javascript/함수형-프로그래밍(l.map->map)/"},"frontmatter":{"date":"December 10, 2019","title":"함수형 프로그래밍(L.map->map)","category":"javascript"}}},{"node":{"excerpt":"function 1.  구조 2. 기본 예제 3. 다중 반환 파이썬은 다중반환을 쉽게 가능하다! 다중 반환을 하였으니 받을 때도 다중으로 받자. 팩킹, 언팩킹을 사용한다면? (중요) 4. 언패킹 예제 별 한개 *args 는 여러개의 원소를 튜플로 받는다는 뜻이다. 예를들어 라면 args 는 (1,2,3,4,5) 이고 라면 args는 (1,2,3,) 이다.…","fields":{"slug":"/python/파이썬-기초-정리(함수)/"},"frontmatter":{"date":"December 09, 2019","title":"파이썬 기초 정리(함수)","category":"python"}}},{"node":{"excerpt":"map, filter 계열 함수 vs reduce, take 함수 1.  map, filter map, filter 계열 함수는 이터러블 같은 모나딕한 값의 안쪽에 있는 원소에 함수를 합성 지연성을 갖는다. 2. reduce, take 실제로 값의 계산이 일어나는 함수 지연성을 갖지 않는다. take 같은 함수는 지연성을 줄 수 있지만, 배열을 축약 하는…","fields":{"slug":"/javascript/함수형-프로그래밍(querystr,-join)/"},"frontmatter":{"date":"December 09, 2019","title":"함수형 프로그래밍(queryStr, join)","category":"javascript"}}},{"node":{"excerpt":"조건문 1. True, False 파이썬에서는 빈 문자열, 리스트, 튜플, 딕셔너리를 False로 취급 ( 자바스크립트랑 다르군. ) 2. 관계 연산자 파이썬에서 사용하는 관계연산자는 >, >=, <, <=, ==, != 가 있다. 3. 논리 연산자 파이썬에서 사용하는 논리연산자는 and, or, not 이 있다. 4. 산술, 관게, 논리 연산자 우선순위…","fields":{"slug":"/python/파이썬-기초-정리(조건문,-반복문)/"},"frontmatter":{"date":"December 08, 2019","title":"파이썬 기초 정리(조건문, 반복문)","category":"python"}}},{"node":{"excerpt":"연속된 제너레이터의 계산 순서를 알아보기 전에 map 함수와 filter 함수도 제너레이터를 이용하여 구현해보자. L.map 기존 map함수와 다른 점은  위와 같이 이터레이터를 생성한 것 만으로는 내가 원하는 값을 구할 수 없고 next() 함수를 호출 한 만큼의 값만 얻을 수 있다. 따라서 array를 직접 생성하지 않기 때문에 내가 원하는 대로 평가…","fields":{"slug":"/javascript/함수형-프로그래밍(엄격vs느긋)-(1)/"},"frontmatter":{"date":"December 07, 2019","title":"(중요) 함수형 프로그래밍(연속된 제너레이터)","category":"javascript"}}},{"node":{"excerpt":"take 함수와 지연평가 take 함수 take 함수는 파라미터로 받은 length 만큼 이터러블을 자르는 간단한 함수이다. 이전 포스트에서 공부했던 range 함수와 같이 사용한다면, 위와 같은 결과를 얻는다. 다음으로 지연성에 관한 설명을 한다면 만약 range에 무한수열이 들어간다고 생각해보자. range 함수에 위와같이 무한수열이 들어가면 rang…","fields":{"slug":"/javascript/함수형-프로그래밍(take,-지연성-평가)/"},"frontmatter":{"date":"December 06, 2019","title":"함수형 프로그래밍(take, 지연성 평가)","category":"javascript"}}},{"node":{"excerpt":"인자로 받은 값 만큼 길이를 가지는 range 함수와 L.range 함수(느긋한 range) 구현 1. range 뒤에 구현할 L.range 함수와 차이점을 알아보기 위해 배열 원소들의 총합을 구해보자 2. L.range 제너레이터 함수를 이용해서 i가 증가하는대로 yield를 하게 했다. 원소의 총합을 구해보면 결과는 range 함수와 같다. 3. 차이…","fields":{"slug":"/javascript/함수형-프로그래밍(range,-l.range)/"},"frontmatter":{"date":"December 05, 2019","title":"함수형 프로그래밍(range, L.range)","category":"javascript"}}},{"node":{"excerpt":"집합 자료형 (Sets) 순서x, 중복x, 추가 삭제 o 선언 선언을 할 때 중복된 원소는 파이선 인터프리터가 자동으로 제거한다. 형 변환 집합 => 튜플 튜플로 형 변환을 하였으니 slice 가능 집합 => 리스트 길이 집합의 활용 ( 사기.. ) 자바스크립트에도 이런거 있으면 좋겠다. 교집합 합집합 차집합 중복되는 원소인 4,5,6을 제거하고 1,2,…","fields":{"slug":"/python/파이썬-기초-정리(자료형-집합)/"},"frontmatter":{"date":"December 04, 2019","title":"파이썬 기초 정리(자료형-집합)","category":"python"}}},{"node":{"excerpt":"Curry 커리함수는 함수를 리턴하는 함수인데, 받아둔 함수를 원하는 시점에 평가하여 값을 리턴하는 기능을 갖는다. 커리 함수는 함수를 리턴 함수를 받아서 원하는 시점에 평가 인자가 2개 이상이면 받아둔 함수를 인자와 함께 즉시 실행 시키고 인자가 2개 미만 이라면 인자를 더 받아 후에 실행 시키는 함수를 리턴한다. curry함수는 다음과 같이 사용된다.…","fields":{"slug":"/javascript/함수형-프로그래밍(curry함수)/"},"frontmatter":{"date":"December 03, 2019","title":"함수형 프로그래밍(curry)","category":"javascript"}}},{"node":{"excerpt":"go, pipe go 함수형 프로그래밍에서는 코드를 값으로 다루는 아이디어를 많이 사용한다. 코드인 함수를 받아서 평가하는 시점을 원하는대로 다룰 수 있다. 따라서 코드의 표현력, 가독성을 높일 수 있다. 이전 포스트 에서 가격이 2만원 미만인 물건의 총 합을 계산하는 코드로 다음과 같이 작성 하였다. 위와 같이 작성하면 원하는 값을 얻을 수는 있지만 여…","fields":{"slug":"/javascript/함수형-프로그래밍(go함수)/"},"frontmatter":{"date":"December 02, 2019","title":"함수형 프로그래밍(go, pipe)","category":"javascript"}}},{"node":{"excerpt":"map, filter, reduce 응용 가격들만 뽑아보기 map함수를 이용하여 가격만 뽑았다. 특정 가격 이하의 가격만 뽑기 map함수의 파라미터로 받는 이터러블을 fliter 함수로 축약하여 ( 가격이 2만원 미만  ) 전달 하였다. 특정 가격 이하에 해당하는 물품의 가격을 모두 합치기 위와 같은 기능을 하는 코드로 다음과 같이 작성할수도 있다. 위 …","fields":{"slug":"/javascript/함수형-프로그래밍(map,filter,reduce-응용)/"},"frontmatter":{"date":"November 27, 2019","title":"함수형 프로그래밍(map,filter,reduce 응용)","category":"javascript"}}},{"node":{"excerpt":"Filter 함수는 이러터블의 원소들에서 특정한 원소들만 걸러내고 싶을 때 사용한다. 1. 구현 위 처럼 이터러블의 원소들에서 특정한 원소만 걸러내고 싶을 때 사용한다. 이를 좀 더 추상화 시켜보자. filter 함수의 파라미터로 어떻게 원소를 필터링 할지 체크하는 역할을 갖는 보조함수와 이터러블을 받는다. 특징 이라면 map, reduce 함수와 비슷하…","fields":{"slug":"/javascript/함수형-프로그래밍(filter함수)/"},"frontmatter":{"date":"November 27, 2019","title":"함수형 프로그래밍(filter)","category":"javascript"}}},{"node":{"excerpt":"reduce 함수는 이러터블의 원소들을 다 더해서 하나의 값으로 만들고 싶을 때 사용한다. 1. 구현 위와 같은 기능을 하는 함수가 reduce 이다. 외부 인터페이스에서는 reduce 함수가 어떻게 사용될까? 외부 인터페이스에서는 보조함수, 시작값, 이터러블(well-formed 이터레이터) 을 인자로 받는다. 이 reduce함수가 내부적으로 동작하는 …","fields":{"slug":"/javascript/함수형-프로그래밍(reduce함수)/"},"frontmatter":{"date":"November 27, 2019","title":"함수형 프로그래밍(reduce)","category":"javascript"}}},{"node":{"excerpt":"Map 함수 1. 구현 products 라는 배열에서 이름 따로 가격 따로 수집 한다고 해보자. 이런 경우에 사용하는 함수가 map 함수이다. 여기서 log()는 함수 밖 외부에 직접적으로 변화를 일으킨다. 함수형 프로그래밍 에서는 인자와 리턴값으로 소통 하는것을 권장한다. 따라서 names를 변화를 일으키는 다른 함수나 메소드에 전달하는게 아니라 리턴하…","fields":{"slug":"/javascript/함수형-프로그래밍-(map함수)/"},"frontmatter":{"date":"November 26, 2019","title":"함수형 프로그래밍 (map)","category":"javascript"}}},{"node":{"excerpt":"제너레이터 예제 1. 목표 제너레이터( 홀수만 리턴하는 제너레이터 ) 2. 제너레이터 함수의 파라미터로 limit 값 설정 제너레이터를 하나만 사용 했지만 더 많은 제너레이터를 함께 사용 해보자. 3. Infinity 제너레이터 생성 infinity 제너레이터는 파라미터로 받은 값이 없다면 0 있다면 그 값 부터 무한히 값을 yield하는 제너레이터다. …","fields":{"slug":"/javascript/함수형-프로그래밍(제너레이터-예제)/"},"frontmatter":{"date":"November 26, 2019","title":"함수형 프로그래밍(제너레이터 예제)","category":"javascript"}}},{"node":{"excerpt":"제너레이터와 이터레이터 제너레이터는 이터레이터이자 이터러블을 생성(리턴)하는 함수이다. 제너레이터 선언 제너레이터는 일반함수에 *을 붙여서 선언한다. 제너레이터 사용 위와 같이 제너레이터를 통해 이터레이터를 쉽게 만들 수 있고 yield 를 통해 몇번의 next() 함수를 호출 할지 정해줄 수 있다. 제너레이터를 통해 만들어진 이터레이터는 심볼 이터레이터…","fields":{"slug":"/javascript/함수형-프로그래밍(제너레이터와-이터레이터)/"},"frontmatter":{"date":"November 23, 2019","title":"함수형 프로그래밍(제너레이터와 이터레이터)","category":"javascript"}}},{"node":{"excerpt":"사용자 정의 이터러블, 이터레이터 구현 1.이터러블은 Symbol.iterator () 메소드를 가지고 있어야 한다. 2. Symbol.iterator () 메소드는  이터레이터를 반환해야한다. 이 이터레이터는 next ()  메소드를 가지고 있어야 한다. 3. next ()  메소드는 value와 done을 key갑으로 가지는 객체를 리턴해야 한다. 4…","fields":{"slug":"/javascript/함수형-프로그래밍(사용자-정의-이터러블)/"},"frontmatter":{"date":"November 23, 2019","title":"함수형 프로그래밍(사용자 정의 이터러블)","category":"javascript"}}},{"node":{"excerpt":"기존과 달라진 ES6 리스트 순회 Array, Set, Map 자바스크립트에는 Array, Set, Map 이라는 내장값 들을 가지고 있고 이를 for of문 으로 순회 가능하다. Array Array 문은 내부적으로 ES5의 for문이 동작하는 것과 같은 방식으로 for of 문이 동작한다. ( 인덱스로 인덱싱이 가능 ) Set for of 문을 동작 …","fields":{"slug":"/javascript/함수형-프로그래밍(이터러블,-이터레이터)/"},"frontmatter":{"date":"November 23, 2019","title":"함수형 프로그래밍(이터러블, 이터레이터)","category":"javascript"}}},{"node":{"excerpt":"평가와 일급 그리고 고차 함수 평가 평가랑 코드가 계산( Evaluation ) 되어 값을 만드는 것 일급 값으로 다룰 수 있다. 변수에 담을 수 있다. 함수의 인자로 사용될 수 있다. 함수의 결과로 사용될 수 있다. 함수의 일급 함수를 값으로 다룰 수 있다. 조합성과 추상화의 도구( 위 4가지 특성 생각 ) 고차 함수 함수를 값으로 다루는 함수 Case…","fields":{"slug":"/javascript/함수형-프로그래밍(평가,일급,고차함수)/"},"frontmatter":{"date":"November 21, 2019","title":"함수형 프로그래밍(평가,일급,고차함수)","category":"javascript"}}},{"node":{"excerpt":"딕셔너리 범용적으로 가장 많이 사용! ( JSON 과 비슷 ) 딕셔너리 자료형은 순서X, 키 중복X, 수정O, 삭제O 선언 자주 쓰이는 형태는 아니지만 dict() 함수 안에 리스트를 넣고 그 안에 원소로 key와 value를 갖는 튜플을 넣어주면 딕셔너리 선언이 가능하다. 또 다른 방법으로는 위와 같은 방법이 있다. ( 이게 가장 편한듯 ) 출력 key…","fields":{"slug":"/python/파이썬-기초-정리(자료형-딕셔너리)/"},"frontmatter":{"date":"November 20, 2019","title":"파이썬 기초 정리(자료형-딕셔너리)","category":"python"}}},{"node":{"excerpt":"튜플 리스트와 비교하여 생각하자. 튜플 자료형은 ( 순서 O, 중복 O, 수정X, 삭제X ) 즉, 한번 선언하면 끝까지 쓴다. 변하면 안 되는 데이터를 정의해놓으면 좋다. 선언 마지막 f처럼 가로가 없어도 튜플 선언이 된다. 인덱싱 리스트 자료형과 같은 방법으로 인덱싱이 가능하다. 튜플에서 리스트로 형 변환을 하게 되면, 불변성이 사라지고 리스트 자료형의…","fields":{"slug":"/python/파이썬-기초-정리(자료형-튜플)/"},"frontmatter":{"date":"November 19, 2019","title":"파이썬 기초 정리(자료형-튜플)","category":"python"}}},{"node":{"excerpt":"리스트 리스트 자료형은 순서 있고, 중복, 수정, 삭제가 가능한 유일한 자료형 이다. 리스트 선언 리스트 인덱싱 인덱싱은 내가 원하는 데이터를 꺼내오는 과정  문자열은 시퀀스 이기 때문에 리스트로 형 변환을 하게 되면 한글자 한글자 리스트 형태로 분해가 된다. 리스트 슬라이싱 리스트 연산 리스트 + 리스트 = 리스트, 리스트의 연산은 리스트가 나온다. 리…","fields":{"slug":"/python/파이썬-기초-정리(리스트)/"},"frontmatter":{"date":"November 18, 2019","title":"파이썬 기초 정리(자료형-리스트)","category":"python"}}},{"node":{"excerpt":"문자열 len() : 문자열의 길이를 구할 때 사용 빈 문자열을 선언할 때 str() 사용하자 \\ : 이스케이프 문자열, 자주 사용하는 이스케이프 문자열은 \\n ( 개행 처리 ), \\t( tab 처리 )  Raw string ( r’ ’ )은 이스케이프 문자열을 있는 그대로 출력. Python에서 = 뒤에오는 \\ 는 변수에 값을 바인딩 한다는 의미 문자열…","fields":{"slug":"/python/파이썬-기초-정리(문자열)/"},"frontmatter":{"date":"November 17, 2019","title":"파이썬 기초 정리(자료형-문자열)","category":"python"}}},{"node":{"excerpt":"Group user(소유자) 도 other도 아닌 어떤 사용자들을 그룹화 해보자 /var 폴더의 소유자는  image . 부분을 확인 해보면 root 이다. 따라서 /var 디렉토리에 mkdir 프로그램을 실행 하기 위해서는 access mode의 other부분에 쓰기(w) 권한이 있어야 한다. 첫번째 방법은 root 사용자로 로그인 ( su - root…","fields":{"slug":"/linux/생활코딩-리눅스-강좌(group)/"},"frontmatter":{"date":"November 16, 2019","title":"생활코딩 리눅스 강좌(Group)","category":"linux"}}},{"node":{"excerpt":"Permission 의 예시 ls -l  의 Standard output 중에서 왼쪽 donguk이 나타내것은 소유자가 donguk 이라는 뜻 , 마지막 코드는 echo ‘hi’ 의 출력 값이 perm.txt에 출력 되어 저장이 된다. ( 물론 nano, vi 등 에디터를 이용해서 perm.txt 수정 가능 ) perm.txt의 소유자가 donguk인데 …","fields":{"slug":"/linux/생활코딩-리눅스-강좌(permission)/"},"frontmatter":{"date":"November 16, 2019","title":"생활코딩 리눅스 강좌(Permission)","category":"linux"}}},{"node":{"excerpt":"id, who 유닉스는 다중사용자 시스템 uid는 user의 id, gid는 group의 id 즉 내가 staff라는 group에 속해 있다는 뜻 현재 내 맥북에는 hong 이라는 유저만 접속 해 있다. 관리자와 일반 사용자 ( super user(root) vs user ) Shell에서 $는 일반사용자를 나타내고 #은 관리자( root) 를 나타낸다.…","fields":{"slug":"/linux/생활코딩-리눅스-강좌(user)/"},"frontmatter":{"date":"November 16, 2019","title":"생활코딩 리눅스 강좌(user)","category":"linux"}}},{"node":{"excerpt":"CRON CRON 기본 명령어 정기적으로 명령을 실행시켜주는 소프트웨어 ( ex 백업, 정기적인 데이터 전송, 정기적으로 인터넷으로 시간조정? ) crontab -e  : 정기적으로 실행 시키고 싶은 작업을 설정 할 수 있음.  crontab -l : 처리한 cron 들을 확인 할 수 있다. crontab -r  : cron 삭제 CRON 주기 설정 ta…","fields":{"slug":"/linux/생활코딩-리눅스-강좌(cron,-.bashrc)/"},"frontmatter":{"date":"November 16, 2019","title":"생활코딩 리눅스 강좌(cron, .bashrc)","category":"linux"}}},{"node":{"excerpt":"Daemon 의 개념 데몬에 해당하는 프로그램은 항상  켜져 있음. ls, mkdir, cd 이런 프로그램들은 데몬이 아님. 소위 server ( 예를들어 web server ) 라고 불리는 프로그램은 데몬에 해당한다. 이런 데몬에 해당하는 프로그램을 service 라고도 부른다. Daemon의 예시 컴퓨터가 부팅될 때 자동으로 Start 시키려면? 맨 …","fields":{"slug":"/linux/생활코딩-리눅스-강좌(daemon)/"},"frontmatter":{"date":"November 14, 2019","title":"생활코딩 리눅스 강좌(Daemon)","category":"linux"}}},{"node":{"excerpt":"컴퓨터 구조, 프로세스 모니터링, 백그라운드 실행 컴퓨터 구조 Storage SSD, HDD 같은 저장공간을 의미 가격이 낮고, 용량이 크지만 저장하고 읽는데 시간이 오래걸린다 Memory RAM Storage와 반대의 특성을 지닌다. ( 가격이 높고, 용량 작지만 저장하고 읽는데 소요되는 시간이 적음) Processor ( * Process 아님 ) C…","fields":{"slug":"/linux/생활코딩-리눅스-강좌(프로세스와-실행)/"},"frontmatter":{"date":"November 13, 2019","title":"생활코딩 리눅스 강좌(프로세스와 실행)","category":"linux"}}},{"node":{"excerpt":"Directory Structure https://www.thegeekstuff.com/2010/09/linux-file-system-structure/ 참고 / : 최상위 디렉토리 ( root ) /bin : binary 줄임말, 컴퓨터에서는 실행가능한 프로그램을 binary라고함 > 프로그램들이 모여있는 directory /sbin : 시스템 관리자가…","fields":{"slug":"/linux/생활코딩-리눅스-강좌(directory,-find)/"},"frontmatter":{"date":"November 10, 2019","title":"생활코딩 리눅스 강좌(directory, find)","category":"linux"}}},{"node":{"excerpt":"자료형 종류 파이썬 지원 자료형 int : 정수, float : 실수, complex : 복소수, bool : 불린 str : 문자열(시퀀스), list : 리스트(시퀀스), tuple : 튜플(시퀀스) set : 집합, dict : 사전 m은 내부적으로 int형 객체(<class ‘int’>)를 생성하고, n은 float형 객체(<class ‘float…","fields":{"slug":"/python/파이썬-기초-정리(자료형-숫자형)/"},"frontmatter":{"date":"November 09, 2019","title":"파이썬 기초 정리(자료형-숫자형)","category":"python"}}},{"node":{"excerpt":"print variables type(variable) : variable의 자료형 보여주는 함수 x=y=z=100 : 동시선언 가능 위 print구문이 내부적으로 300이라는 값을 출력하는 과정은 300 에 맞는 Object(<class ‘int’>)를 생성 하고 값을 생성하고(int(300)) 이 값을 출력 한다. 그리고 변수 생성도 이와 같은 절차를…","fields":{"slug":"/python/파이썬-기초-정리(print,-variable)/"},"frontmatter":{"date":"November 09, 2019","title":"파이썬 기초 정리(print, variable)","category":"python"}}},{"node":{"excerpt":"Shell harware - 컴퓨터의 기계적인 부분들 ( 메모리, 하드디스크 ,SSD, CPU 등등..) Kernel - 하드웨어를 제어하는 프로그램 ( 운영체제에서 코어역할을 한다.) Shell - 우리가 입력한 명령을 Kernel이 이해할수 있게 kernel에게 전달해줌. Kernel은 이를 하드웨어에 이해할 수 있게 전달한다.  echo $0 : 현…","fields":{"slug":"/linux/생활코딩-리눅스-강좌(shell)/"},"frontmatter":{"date":"November 09, 2019","title":"생활코딩 리눅스 강좌(Shell)","category":"linux"}}},{"node":{"excerpt":"IO Redirection IO Redirection ( Input Ouput Redirection ) : input 과 output의 방향을 바꾼다 UNIX 계열의 시스템은 Standard Input( Command ) 이 주어지면 Unix process를 거쳐 Standard output을 내보냄 ls -l 1> result.txt : ls -l 의 …","fields":{"slug":"/linux/생활코딩-리눅스-강좌(IO-Redirection)/"},"frontmatter":{"date":"November 09, 2019","title":"생활코딩 리눅스 강좌(IO Redirection)","category":"linux"}}},{"node":{"excerpt":"cp source target dir : source 파일을 target dir에 복사 ls -l dir name :  dir name 안에 있는 파일 정보 확인 mv source target dir : source 파일을 target dir로 이동시킨다.  target dir 와 현재위치가 같다면 파일이름을 변경 시킨다.  sudo : ( super u…","fields":{"slug":"/linux/생활코딩-리눅스-강좌( 기초-2 )/"},"frontmatter":{"date":"November 08, 2019","title":"생활코딩 리눅스 강좌(기초-2)","category":"linux"}}},{"node":{"excerpt":"repository : https://github.com/net-lmcd/apollo-graphql-tutorial React Apollo client에서 GraphQL를 사용해보는 튜토리얼 입니다. 프로젝트는 CRA기반 으로 구성하였고 graphql endpoint는 https://api.github.com/graphql 입니다. 1-1. Client …","fields":{"slug":"/react/react-apollo-with-graphql-tutorial/"},"frontmatter":{"date":"November 07, 2019","title":"react apollo with graphql tutorial","category":"react"}}},{"node":{"excerpt":"명령어로 컴퓨터를 제어하는 방식을 CLI ( Command Line Interface ) 라고 한다. ls  현재 디렉토리의 파일목록 확인 ( 자세하게 보기는 ls -l) ls -l 했을때 맨 앞에 d 붙어 있으면 디렉토리, 아니면 파일 유닉스나 리눅스에서는 .으로 시작하는 파일은 기본적으로 감춰진 파일, 확인 하려면? ls -a .으로 시작하는 파일 출…","fields":{"slug":"/linux/생활코딩-리눅스-강좌( 기초-1 )/"},"frontmatter":{"date":"November 07, 2019","title":"생활코딩 리눅스 강좌(기초-1)","category":"linux"}}},{"node":{"excerpt":"1. 프로토콜 버퍼란? 프로토콜 버퍼는 XML, JSON과 같은  직렬화 데이터 구조 이다. 여기서 직렬화 데이터 구조의 예시를 잠깐 들면, hello를 ‘문자열 직렬화’ 할 경우 8(h) 65(e) 6C(l) 6C(l) 6F(o) 로 표현되고, 어떤 객체를 ‘JSON 포맷 직렬화’ 할 경우 {‘something’ : ‘something value’} 처…","fields":{"slug":"/cs/프로토콜-버퍼(protocol-buffer)/"},"frontmatter":{"date":"November 07, 2019","title":"프로토콜 버퍼(Protocol Buffer)","category":"cs"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}