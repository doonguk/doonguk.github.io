{"componentChunkName":"component---src-templates-blog-post-js","path":"/cs/queue/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"660efa2b-bedd-51ca-8e73-a0f29f3d0261","excerpt":"큐 1. 설명 입력과 출력을 한쪽 끝으로 제한한 자료구조. 먼저 들어온 원소가 먼저 나가기 때문에 FIFO(First In First Out) 이다. 큐의 가장 첫번째 원소를 front, 가장 끝원소를 rear 라고 한다. 큐는 들어올 때 rear로 들어오지만, 나갈때는 front부터 나가는 특성을 갖는다.  ( 놀이공원 대기줄 생각!! ) 접근 방법은 front와 rear로만 가능하다. stack 과 queue는 search가 없다. queue overflow…","html":"<blockquote>\n<h1 id=\"큐\"><a href=\"#%ED%81%90\" aria-label=\"큐 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>큐</h1>\n</blockquote>\n<h3 id=\"1-설명\"><a href=\"#1-%EC%84%A4%EB%AA%85\" aria-label=\"1 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 설명</h3>\n<ul>\n<li>입력과 출력을 한쪽 끝으로 제한한 자료구조. 먼저 들어온 원소가 먼저 나가기 때문에 FIFO(First In First Out) 이다.</li>\n<li>큐의 가장 첫번째 원소를 <strong>front</strong>, 가장 끝원소를 <strong>rear</strong> 라고 한다. 큐는 <strong>들어올 때 rear로 들어오지만, 나갈때는 front부터 나가는 특성을 갖는다.</strong>  ( 놀이공원 대기줄 생각!! )</li>\n<li>접근 방법은 front와 rear로만 가능하다.</li>\n<li>stack 과 queue는 search가 없다.</li>\n<li><strong>queue overflow</strong> : 큐가 꽉 차서 더 이상 자료를 넣을 수 없는 경우</li>\n<li><strong>queue underflow</strong> 큐가 비어 있어 자료를 꺼낼 수 없는 경우</li>\n</ul>\n<h3 id=\"2-언제-사용할까\"><a href=\"#2-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C\" aria-label=\"2 언제 사용할까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 언제 사용할까?</h3>\n<p>버퍼, 프린트, 마구 입력된 것을 처리하고 있지 못하는 상황, BFS</p>\n<h3 id=\"3-인터페이스\"><a href=\"#3-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"3 인터페이스 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 인터페이스</h3>\n<ul>\n<li>front( head ) : 데이터를 큐에서 dequeue 할 수 있는 위치</li>\n<li>rear( tail ) : 데이터를 큐에 enqueue 할 수 있는 위치</li>\n<li>\n<p>메소드</p>\n<ul>\n<li>enqueue : 큐에 데이터를 넣는다. ( insert )</li>\n<li>dequeue : 큐를 데이터에서 꺼낸다. ( delete )</li>\n<li>is_empty() : 큐가 비었는지 확인 </li>\n<li>peek : 맨 앞의 값 반환만 하고 삭제는 하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/71406881-ce781d80-267c-11ea-8f05-3345dd06c37b.png\" alt=\"image\"></p>\n<p><a href=\"https://wayhome25.github.io/cs/2017/04/18/cs-21/\">이미지 출처</a></p>\n<h3 id=\"4-구현\"><a href=\"#4-%EA%B5%AC%ED%98%84\" aria-label=\"4 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 구현</h3>\n<ul>\n<li>\n<h4 id=\"방법1\"><a href=\"#%EB%B0%A9%EB%B2%951\" aria-label=\"방법1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법1</h4>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>items <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">print_queue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<h4 id=\"중요-방법2--노드를-활용-head-와-tail-이용-\"><a href=\"#%EC%A4%91%EC%9A%94-%EB%B0%A9%EB%B2%952--%EB%85%B8%EB%93%9C%EB%A5%BC-%ED%99%9C%EC%9A%A9-head-%EC%99%80-tail-%EC%9D%B4%EC%9A%A9-\" aria-label=\"중요 방법2  노드를 활용 head 와 tail 이용  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(중요) 방법2 ( 노드를 활용, <strong>head 와 tail 이용</strong> )</h4>\n</li>\n<li>Node 클래스 구현</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> item\n    self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code></pre></div>\n<ol start=\"2\">\n<li>Queue 클래스 구현 ( 생성자 )</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code></pre></div>\n<ol start=\"3\">\n<li>is_empty 메소드 구현</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\"># 생략</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>head</code></pre></div>\n<p>head가 Node객체가 없다면 True 리턴 아니면 False 리턴</p>\n<ol start=\"4\">\n<li>enqueue 메소드 구현</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    nodeData <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>isEmptty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> nodeData\n      self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> nodeData\n\n    self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> nodeData <span class=\"token comment\"># self.head.next 값도 설정</span>\n    self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> nodeData </code></pre></div>\n<p>큐에 데이터를 삽입 할 때에는 Node 객체를 생성하여 데이터를 넣는데,</p>\n<p>만약 비어있는 큐에 데이터를 넣을 때 에는 head와 tail에 같은 Node 객체를 넣어준다. <strong>파이썬에서는 다른 변수에 같은 값을 넣게되면 두 변수는 같은 id 를 같게 된다. 즉 한쪽이 변경되면 다른 한쪽도 변경되게 된다.</strong> enque를 함으로써 Queue 클래스에는 겉으로 보기에는 3가지 값이 있게 된다.</p>\n<ol start=\"5\">\n<li>dequeue 구현</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span>\n    dequeue_data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data\n    self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">return</span> dequeue_data</code></pre></div>\n<ol start=\"6\">\n<li>전체 코드</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> item\n    self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \n  <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>head\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    node_data <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> node_data\n      self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node_data\n    self<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node_data\n    self<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> node_data\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span>\n    out_data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data\n    self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">return</span> out_data\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>data</code></pre></div>","frontmatter":{"title":"Queue","date":"December 24, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/cs/queue/","previous":{"fields":{"slug":"/javascript/go,pipe,reduce-비동기제어/"},"frontmatter":{"title":"go,pipe,reduce 비동기제어","category":"javascript"}},"next":null}}}