{"componentChunkName":"component---src-templates-blog-post-js","path":"/cs/tcp-&-udp/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"704ed77f-7324-5d06-a3d3-42ebcf3f9e16","excerpt":"OSI 7계층의 전송 계층은 송신자와 수신자를 연결하는 통신서비스를 제공하는 계층으로, 쉽게 말해 데이터 전달을 담당한다. 이때, 데이터를 보내기 위해 사용되는 프로토콜(상호 간에 정의한 규칙)이 , 이다. image TCP (Transmission Control Protocol) TCP는 인터넷상에서 데이터를 메시지의 형태(패킷 단위)로 보내기 위해 IP…","html":"<p>OSI 7계층의 <strong>전송 계층</strong>은 송신자와 수신자를 연결하는 통신서비스를 제공하는 계층으로, 쉽게 말해 <strong>데이터 전달을 담당</strong>한다. 이때, 데이터를 <strong>보내기 위해</strong> 사용되는 프로토콜(상호 간에 정의한 규칙)이 <code class=\"language-text\">TCP</code>, <code class=\"language-text\">UDP</code>이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/84148796-700ff180-aa9a-11ea-950e-42b980449ee3.png\" alt=\"image\"></p>\n<div style=\"width: 100%; text-align: center;\">OSI 7계층(네트워크에서 통신이 일어나는 과정을 7단계로 나눔)</div>\n<h2 id=\"tcp-transmission-control-protocol\"><a href=\"#tcp-transmission-control-protocol\" aria-label=\"tcp transmission control protocol permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP (Transmission Control Protocol)</h2>\n<p>TCP는 <strong>인터넷상에서 데이터를 메시지의 형태(패킷 단위)로 보내기 위해 IP와 함께 사용하는 프로토콜</strong></p>\n<blockquote>\n<p>패킷?</p>\n<p>인터넷 내에서 데이터를 보내기 위한 라우팅을 효율적으로 하기 위해서 데이터를 <strong>여러개의 조각들로 나누어 전송을 하는데 이 조각을 패킷</strong>이라고 한다.</p>\n</blockquote>\n<p>일반적으로 TCP와 IP를 함께 사용하는데 IP는 데이터의 배달을 처리한다면, TCP는 <strong>패킷을 추적 및 관리</strong>하게 된다.</p>\n<blockquote>\n<p>어떻게 패킷을 추적할까?</p>\n<p>패킷에 번호를 부여하여 패킷의 분실 확인과 같은 처리를 한 뒤 목적지에서 재조립 한다. </p>\n</blockquote>\n<h3 id=\"특징\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ul>\n<li>\n<p><strong>연결형 서비스(Connection-Oriented)</strong>를 지원하는 프로토콜로 2개의 호스트가 통신을 하기 전 연결이 이루어져야 한다. 이때 가상 회선 방식을 사용한다. </p>\n<blockquote>\n<p>가상 회선 방식?</p>\n<p>발신지와 수신지를 연결하여 패킷을 전송하기 위한 논리적 경로를 배정한다는 말이다.</p>\n</blockquote>\n</li>\n<li>목적지와 수신지를 확실히 하여 정확한 전송을 보장하기 위해서 세션을 수립하는데 이때 <strong>3-way handshaking</strong> 과정을 거친다. 그리고 연결을 끊을 때는 4-way handshaking 과정을 거친다.</li>\n<li><strong>높은 신뢰성</strong>과 <strong>순서대로 전송하는 것</strong>을 보장한다.</li>\n</ul>\n<blockquote>\n<p><strong>흐름 제어</strong>를 통해 송신자의 데이터 양을 조절한다.</p>\n<p><strong>혼잡 제어</strong>를 통해 네트워크 상황을 판단하여 송신자의 데이터 양을 조절한다.</p>\n<p><strong>에러 감지</strong>를 통해 잘못 전송되었을 경우 <strong>재전송</strong>한다.</p>\n</blockquote>\n<ul>\n<li>하지만 위와 같은 기능때문에 <strong>UDP보다 속도가 느리다.</strong></li>\n<li>두 호스트 모두 송신자와 수신자가 될 수 있다.</li>\n<li><strong>바이트 스트림</strong>을 사용하여 데이터를 연속적인 바이트로 보고, <strong>세그먼트</strong>라는 단위의 패킷으로 쪼개서 보낸다.</li>\n<li>HTTP, FTP, SMTP, TELNET 등에서 사용된다.</li>\n</ul>\n<p>즉, <strong>TCP는 연속성보다 신뢰성있는 전송이 중요할 때 사용하는 프로토콜</strong>이다.</p>\n<h3 id=\"3-way-handshaking\"><a href=\"#3-way-handshaking\" aria-label=\"3 way handshaking permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-way handshaking</h3>\n<p>TCP가 호스트 간에 연결을 설정하는 방법은 SYN/ACK 패킷을 통해 이루어진다. SYN 패킷은 동기화(SYNchronize)를 의미하는 패킷이며 ACK 패킷은 확인(ACKnowledgement)을 의미하는 패킷이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/84155011-c2eda700-aaa2-11ea-9055-cdc63e156fe4.png\" alt=\"image\"></p>\n<ol>\n<li>LISTEN : 서버는 클라이언트의 연결요청을 기다리고 있다.</li>\n<li>SYN_SENT : 클라이언트는 능동적으로 서버에게 연결요청을 하자고 시퀀스 번호를 생성하여 SYN 패킷에 담아 보낸다. (능동 개방)</li>\n<li>SYN_RECEIVED : SYN 패킷을 받은 서버는 자신만의 번호를 생성하여 자신의 SYN 패킷에 담고 클라이언트가 보낸 SYN패킷의 번호에 1을 더한 값을 ACK 패킷에 담아서 클라이언트에게 전송한다.</li>\n<li>ESTABLISHED : SYN + ACK 패킷을 받은 클라이언트는 ACK 패킷에 담긴 번호가 자신이 보낸 번호의 + 1 인지 확인하고 맞다면 연결되었다고 판단하고 서버에서 보낸 SYN 패킷의 번호에 1을 더한 값을 ACK 패킷에 담아 전송한다.</li>\n<li>ESTABLISHED : ACK 패킷에 담긴 번호가 자신이 보낸 SYN 패킷에 담긴 번호의 +1 이라면 연결이 되었다고 판단한다. 이때부터 본격적인 통신을 할 수 있게 된다.</li>\n</ol>\n<h3 id=\"4-way-handshaking\"><a href=\"#4-way-handshaking\" aria-label=\"4 way handshaking permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-way handshaking</h3>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/84341120-53300700-abdd-11ea-8c15-30ba9d5efafb.png\" alt=\"image\"></p>\n<ol>\n<li>클라이언트는 연결을 종료하겠다는 <code class=\"language-text\">FIN</code> 플래그를 서버에 보낸다.</li>\n<li><code class=\"language-text\">FIN</code> 플래그를 받은 서버는 알았다는 의미로 <code class=\"language-text\">ACK</code> 패킷을 보낸다.</li>\n<li>그리고 데이터를 모두 받을 때 까지 잠시 <code class=\"language-text\">TIME_OUT</code>이 된다. ( 대기한다. )</li>\n<li>데이터 전송이 완료되면 서버는 전송이 끝났다는 것을 알리기 위해 <code class=\"language-text\">FIN</code> 플래그를 보낸다.</li>\n<li>클라이언트는 이를 받고 확인 메시지로 <code class=\"language-text\">ACK</code>를 보낸다.</li>\n<li><code class=\"language-text\">ACK</code> 패킷을 받은 서버는 TCP 소켓을 <code class=\"language-text\">close</code> 한다.</li>\n<li>클라이언트는 잉여 데이터가 남아있는 것을 생각해 일정 시간 동안 세션을 유지하고 패킷을 기다리는 과정을 거친다. (<code class=\"language-text\">TIME_OUT</code>)</li>\n</ol>\n<br/>\n<h2 id=\"udp-user-datagram-protocol-\"><a href=\"#udp-user-datagram-protocol-\" aria-label=\"udp user datagram protocol  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UDP (User Datagram Protocol )</h2>\n<p>UDP는 데이터를 데이터그램 단위로 처리하는 프로토콜이다.</p>\n<blockquote>\n<p>데이터그램?</p>\n<p>위에서 라우팅을 효율적으로 하기위해 데이터를 여러개의 조각으로 나눠 보낸다고 했고 이 조각들을 패킷이라고 했다. 데이터 그램은 이 패킷 중 <strong>독립적인 관계를 지닌</strong> 패킷을 말한다.</p>\n</blockquote>\n<h3 id=\"특징-1\"><a href=\"#%ED%8A%B9%EC%A7%95-1\" aria-label=\"특징 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ul>\n<li><strong>비연결형</strong>으로 연결을 설정하고 해체하는 과정이 없다. ( 논리적인 경로가 없다.)</li>\n<li><strong>신뢰성이 없고 전송되는 데이터의 순서를 보장하지 않는다</strong>. ( 흐름제어, 혼잡제어가 없다. )</li>\n<li>에러감지는 헤더의 체크섬을 이용한 정도밖에 없다.</li>\n<li>패킷의 단위가 <strong>데이터그램</strong>으로 경계가 분명하여 수신자는 송신자가 보낸 데이터를 그대로 받게된다.</li>\n<li>서버와 클라이언트는 유니캐스트(1:1), 브로드캐스트(1:N), 멀티캐스트(1:M)가 가능하다. (N은 전체, M은 일부, TCP는 1:1만 가능)</li>\n<li>TCP에 비해서 하는 작업들이 굉장히 적기 때문에 속도가 빠르다.</li>\n<li>DNS, 비디오/오디오 스트리밍 등에 사용된다.</li>\n</ul>\n<h2 id=\"결론\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/84158860-5032fa80-aaa7-11ea-80ba-43c106bc89a0.png\" alt=\"image\"></p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ol>\n<li><a href=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/network/tcp-udp.md\">https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/network/tcp-udp.md</a></li>\n<li><a href=\"https://mangkyu.tistory.com/15\">https://mangkyu.tistory.com/15</a></li>\n<li><a href=\"https://asfirstalways.tistory.com/356\">https://asfirstalways.tistory.com/356</a></li>\n</ol>","frontmatter":{"title":"TCP & UDP","date":"June 09, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/cs/tcp-&-udp/","previous":{"fields":{"slug":"/javascript/이벤트-루프/"},"frontmatter":{"title":"이벤트 루프","category":"javascript"}},"next":{"fields":{"slug":"/cs/http-&-https/"},"frontmatter":{"title":"HTTP & HTTPS","category":"cs"}}}}}