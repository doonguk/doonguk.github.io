{"componentChunkName":"component---src-templates-blog-post-js","path":"/cs/sop/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"d63070f7-19d5-5e29-9038-3f52689e4957","excerpt":"동일 출처 정책 (Same Origin Policy) 어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 보안 방식. 잠재적으로 해로울 수 있는 문서를 분리해, 공격받을 수 있는 경로를 줄인다. 즉,  동일 출처 정책은 웹 브라우저 보안을 위해 프로토콜, 호스트, 포트가 동일한 서버로만 ajax 요청을 주고 받을 수 있도록 한 정책 예시 http://www.same-domain.com -> http://www.same-domain.com  ( same…","html":"<h2 id=\"동일-출처-정책-same-origin-policy\"><a href=\"#%EB%8F%99%EC%9D%BC-%EC%B6%9C%EC%B2%98-%EC%A0%95%EC%B1%85-same-origin-policy\" aria-label=\"동일 출처 정책 same origin policy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동일 출처 정책 (Same Origin Policy)</h2>\n<ul>\n<li>어떤 출처에서 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 보안 방식.</li>\n<li>잠재적으로 해로울 수 있는 문서를 분리해, 공격받을 수 있는 경로를 줄인다.</li>\n<li>즉,  동일 출처 정책은 웹 브라우저 보안을 위해 <strong>프로토콜, 호스트, 포트</strong>가 동일한 서버로만 ajax 요청을 주고 받을 수 있도록 한 정책</li>\n</ul>\n<h3 id=\"예시\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<ul>\n<li><a href=\"http://www.same-domain.com\">http://www.same-domain.com</a> -> <a href=\"http://www.same-domain.com\">http://www.same-domain.com</a>  ( same-origin )</li>\n<li><a href=\"http://www.same-domain.com\">http://www.same-domain.com</a> -/-> <a href=\"http://www.cross-domain.com\">http://www.cross-domain.com</a> ( cross-domain )</li>\n</ul>\n<p>여기서 <strong>origin이란 요청을 보낸 도메인</strong>을 의미. 두번째 예시는 <strong>같은 도메인으로 요청을 보낸 것이 아니기 때문에</strong> </p>\n<blockquote>\n<p>XMLHttpRequest cannot load ’<a href=\"http://localhost:3000&#x27;/\">http://localhost:3000’</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ’<a href=\"http://localhost:8080/\">http://localhost:8080</a>’ is therefore not allowed access.</p>\n</blockquote>\n<p>위와같은 에러를 만나게된다. 그러나.. 개발을 하다보면 다른 서버의 API를 요청하는 일이 번번히 발생한다. 이런 상황에서 불편을 해결하기 위해 등장한 것이 <strong>Cross Origin Resource Sharing(CORS)</strong> 정책이다.</p>\n<h2 id=\"cross-origin-resource-sharingcors\"><a href=\"#cross-origin-resource-sharingcors\" aria-label=\"cross origin resource sharingcors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross Origin Resource Sharing(CORS)</h2>\n<ul>\n<li>CORS 정책은 추가적인 HTTP 헤더를 사용하여 origin이 다른 서버에 요청할 때 요청한 웹 어플리케이션에 접근권한을 주는 메커니즘이다.</li>\n<li>즉, <strong>출처가 다른 도메인에서의 AJAX요청이라도 서버 단에서 데이터 접근 권한을 허용하는 정책</strong>이다.</li>\n</ul>\n<h3 id=\"in-server\"><a href=\"#in-server\" aria-label=\"in server permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In Server</h3>\n<p>클라이언트는 서버에 HTTP 요청을 보낼 때 HTTP 헤더의 <code class=\"language-text\">Origin</code> 속성에 자동으로 값이 할당된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">Origin<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//example.com</span></code></pre></div>\n<p>이 도메인에서 다른 출처의 자원을 사용하기 위해 ajax 요청을 했다고 하면 SOP 정책 때문에 에러가 발생한다. 따라서 서버는 <code class=\"language-text\">response</code> 헤더에 <code class=\"language-text\">Access-Control-Allow-Origin</code> 를 추가하여 요청을 허용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 모든 도메인 허용</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 특정 도메인 허용</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"proxy-server\"><a href=\"#proxy-server\" aria-label=\"proxy server permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy Server</h3>\n<ul>\n<li>다양한 이유로( 주로 <strong>보안</strong>의 문제로 ) 직접 통신하지 못하는 두 개의 컴퓨터 사이에서 서로 통신할 수 있도록 돕는 역할을 가리켜 프록시  라고한다.  </li>\n<li>리소스를 요청하고자 하는 서버에서 <code class=\"language-text\">origin</code>을 열어주지 못할 때 사용하면 유용하다.</li>\n<li>프록시 서버가 실제 서버에 요청을 보내서 받아온 다음 그걸 <code class=\"language-text\">Access-Control-Allow-Origin</code> 설정을 적절히 하여 클라이언트에게 돌려주는 방법이다.</li>\n<li>단, 이방법의 경우 기존의 로직보다 프록시 서버를 거쳐야 하기 때문에 (상대 적으로)느리다는 단점이 있다.</li>\n</ul>\n<h2 id=\"jsonp--json-with-padding\"><a href=\"#jsonp--json-with-padding\" aria-label=\"jsonp  json with padding permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSONP ( JSON with Padding)</h2>\n<p>CORS가 나오기 이전에 사용하던 방식으로, <code class=\"language-text\">&lt;script&gt;</code> 태그를 사용하면 SOP 정책을 피할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://company.com/example.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>최신 브라우저에서는 거의 사용 안하고 오래된 브라우저에서 사용하는데 보안문제가 있어서 CORS를 권장한다.</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ol>\n<li><a href=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/security/sop.md\">https://github.com/baeharam/Must-Know-About-Frontend/blob/master/Notes/security/sop.md</a></li>\n<li><a href=\"https://velog.io/@yejinh/CORS-4tk536f0db\">https://velog.io/@yejinh/CORS-4tk536f0db</a></li>\n</ol>","frontmatter":{"title":"SOP","date":"June 06, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/cs/sop/","previous":{"fields":{"slug":"/javascript/모듈(module)/"},"frontmatter":{"title":"모듈(Module)","category":"javascript"}},"next":{"fields":{"slug":"/javascript/ajax/"},"frontmatter":{"title":"AJAX","category":"javascript"}}}}}