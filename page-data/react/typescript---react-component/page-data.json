{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/typescript---react-component/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"ad07dd25-abed-5cbb-b7a0-5184c6f3767b","excerpt":"Start React With TypeScript 1. 프로젝트 생성 기존 리액트 프로젝트를 생성하는 CLI에서 옵션으로  주면 된다. ( 만 해도 가능 ) 생성 후 프로젝트를 확인 해보면 typescript 기반 리액트 컴포넌트는  를 확장자로 갖는다. 2. React.FC   파일을 보면 App 이라는 함수형 컴포넌트를  타입을 이용하여 선언 해 주었다.  이렇게 선언하는 것은 장단점이 존재 한다. 장단점을 살펴보기 위해 Hello라는 컴포넌트를 만들어 보자. Hello.tsx…","html":"<h1 id=\"start-react-with-typescript\"><a href=\"#start-react-with-typescript\" aria-label=\"start react with typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start React With TypeScript</h1>\n<h3 id=\"1-프로젝트-생성\"><a href=\"#1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"1 프로젝트 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로젝트 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ create-react-app start-react-with-ts --template typescript</code></pre></div>\n<p>기존 리액트 프로젝트를 생성하는 CLI에서 옵션으로 <code class=\"language-text\">--template typescript</code> 주면 된다. ( <code class=\"language-text\">--typescript</code>만 해도 가능 )</p>\n<p>생성 후 프로젝트를 확인 해보면 typescript 기반 리액트 컴포넌트는 <code class=\"language-text\">.tsx</code> 를 확장자로 갖는다.</p>\n<h3 id=\"2-reactfc\"><a href=\"#2-reactfc\" aria-label=\"2 reactfc permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. React.FC</h3>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App: React.FC = () =&gt; {\n  return (\n   {...}\n  );\n}</code></pre></div>\n<p> <code class=\"language-text\">App.tsx</code> 파일을 보면 App 이라는 함수형 컴포넌트를 <code class=\"language-text\">React.FC</code> 타입을 이용하여 선언 해 주었다.  이렇게 선언하는 것은 장단점이 존재 한다. 장단점을 살펴보기 위해 Hello라는 컴포넌트를 만들어 보자.</p>\n<h5 id=\"hellotsx\"><a href=\"#hellotsx\" aria-label=\"hellotsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello.tsx</h5>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">type helloProps = {\n  name: string\n  say: string\n}\n\nconst Hello: React.FC&lt;helloProps&gt; = ({name, say}) =&gt; {\n  return(\n  \t&lt;div&gt;Hi my name is {name}. {say}!&lt;/div&gt;\n  )\n}</code></pre></div>\n<p><code class=\"language-text\">React.FC</code> 타입은 <code class=\"language-text\">Generic</code> 으로 컴포넌트가 받아야 할 props 들을 타입으로 받는다. 예제 에서는 <code class=\"language-text\">type alias</code> 를 이용하여 props의 타입을 지정 해 줬는데, <code class=\"language-text\">interface</code> 를 사용해도 상관 없다. 단, 일관성 있게만 사용하자.</p>\n<p><code class=\"language-text\">React.FC</code> 타입의 첫번째 장점은</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/72000745-4ce0dc00-3287-11ea-89fd-8745c4578100.png\" alt=\"image\"></p>\n<p>props의 default 값으로 children이 들어가 있다는 것 이다. ( 근데 사실 크게 장점이라고 말하기 좀 그렇다… )</p>\n<p>두번째 장점은 <code class=\"language-text\">defaultProps, propTypes, contextTypes</code> 를 지정할 때 자동완성이 된다는 점이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/72000887-9e896680-3287-11ea-89ec-d1e53cb3dc87.png\" alt=\"image\"></p>\n<p>하지만 <code class=\"language-text\">defaultProps</code> 를 지정할 때 문제가 있다.<strong><code class=\"language-text\">React.FC</code>를 이용한 타입 지정은 defaultProps가 동작하지 않는다.</strong>  예시로 name props는 값을 부모 컴포넌트에서 받고 defaultProps로 say 값만 지정한다고 한다고 할 때 타입이 올바르지 않다고 컴파일 에러가 발생한다.</p>\n<p>따라서 <code class=\"language-text\">React.FC</code> 는 별로 좋지 않은 것 같다. <code class=\"language-text\">React.FC</code> 를 지워서 같은 기능을 하는 Nice 컴포넌트를 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">type niceProps = {\n  name: string\n  say: string\n}\n\nconst Nice = ({name, say}: niceProps) =&gt; {\n  return(\n     &lt;div&gt;Hi my name is {name}. {say}!&lt;/div&gt;\n  )\n}\n\nNice.defaultProps = {\n  name:&#39;donguk&#39;,\n  say:&#39;thank you&#39;\n}</code></pre></div>\n<p><code class=\"language-text\">React.FC</code> 를 지우고 객체(<code class=\"language-text\">props</code>)에 타입을 지정하였다. 이렇게 하면 <code class=\"language-text\">defaultProps</code> 를 지정해도 잘 동작한다. </p>\n<h3 id=\"2-생략할-수-있는-props-설정\"><a href=\"#2-%EC%83%9D%EB%9E%B5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-props-%EC%84%A4%EC%A0%95\" aria-label=\"2 생략할 수 있는 props 설정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 생략할 수 있는 Props 설정</h3>\n<p>생략 할 수 있는 <code class=\"language-text\">props</code>를 설정 할 때에는 ? 를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">type niceProps = {\n  name: string\n  say: string\n  options?: string\n}\n\nconst Nice = ({name, say, options}: niceProps) =&gt; {\n  return(\n    &lt;&gt;\n    \t&lt;div&gt;Hi my name is {name}. {say}!&lt;/div&gt;\n    \t{options &amp;&amp; &lt;div&gt;Here is {options}&lt;/div&gt;}\n    &lt;/&gt;\n  )\n}\n\nNice.defaultProps = {\n  name:&#39;donguk&#39;,\n  say:&#39;thank you&#39;\n}</code></pre></div>\n<h3 id=\"3-함수를-props로-받기\"><a href=\"#3-%ED%95%A8%EC%88%98%EB%A5%BC-props%EB%A1%9C-%EB%B0%9B%EA%B8%B0\" aria-label=\"3 함수를 props로 받기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 함수를 props로 받기</h3>\n<h5 id=\"nicetsx\"><a href=\"#nicetsx\" aria-label=\"nicetsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nice.tsx</h5>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">type niceProps = {\n  name: string\n  say: string\n  options?: string\n  func: (name: string) =&gt; void // return nothing\n}\n  \n  const Nice = ({name, say, options, func}: niceProps) =&gt; {\n  return(\n    &lt;&gt;\n    \t&lt;div&gt;Hi my name is {name}. {say}!&lt;/div&gt;\n    \t{options &amp;&amp; &lt;div&gt;Here is {options}&lt;/div&gt;}\n      &lt;button onClick={()=&gt;func(name)}&gt;Click&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n\nNice.defaultProps = {\n  name:&#39;donguk&#39;,\n  say:&#39;thank you&#39;\n}</code></pre></div>\n<h4 id=\"apptsx\"><a href=\"#apptsx\" aria-label=\"apptsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App.tsx</h4>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App: React.FC = () =&gt; {\n    const handleClick = (name: string) =&gt; {\n        console.log(&#39;name name&#39;, name)\n    }\n    return (\n        &lt;&gt;\n            &lt;Hello name=&quot;donguk&quot; say=&quot;thank you&quot;/&gt;\n            &lt;Nice func={handleClick}/&gt;\n        &lt;/&gt;\n    );\n}</code></pre></div>","frontmatter":{"title":"TypeScript - React Component","date":"January 15, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react/typescript---react-component/","previous":{"fields":{"slug":"/react/typescript---기초/"},"frontmatter":{"title":"TypeScript - 기초","category":"react"}},"next":{"fields":{"slug":"/algorithm/20200124---종이접기/"},"frontmatter":{"title":"20200124 - 종이접기","category":"algorithm"}}}}}