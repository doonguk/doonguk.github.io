{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/typescript---기초/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"72a6127d-4768-575e-b05f-dd3f10599ebe","excerpt":"TypeScript 기초 연습 TypeScript HandBook(한글) 참조 Velopert님 블로그 참조 1. 타입스크립트 설정파일 생성 프로젝트 폴더에서 yarn init을 통해 package.json 을 생성 해준다. y 옵션은 그냥 yarn init 했을 경우 나오는 질문들을 yes 하는 옵션 typescript를 글로벌로 설치 후 tsc —init 으로 타입스크립트 설정파일 tsconfig.json을 생성한다. target…","html":"<h1 id=\"typescript-기초-연습\"><a href=\"#typescript-%EA%B8%B0%EC%B4%88-%EC%97%B0%EC%8A%B5\" aria-label=\"typescript 기초 연습 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 기초 연습</h1>\n<blockquote>\n<p><a href=\"https://typescript-kr.github.io/\">TypeScript HandBook(한글)</a> 참조</p>\n<p><a href=\"https://velog.io/@velopert/typescript-basics\">Velopert님 블로그</a> 참조</p>\n</blockquote>\n<h3 id=\"1-타입스크립트-설정파일-생성\"><a href=\"#1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"1 타입스크립트 설정파일 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 타입스크립트 설정파일 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> init -y </code></pre></div>\n<p>프로젝트 폴더에서 yarn init을 통해 package.json 을 생성 해준다. y 옵션은 그냥 yarn init 했을 경우 나오는 질문들을 yes 하는 옵션</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> typescript\n$ tsc --init</code></pre></div>\n<p>typescript를 글로벌로 설치 후 <code>tsc —init</code> 으로 타입스크립트 설정파일 tsconfig.json을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code>target</code> : 컴파일된 코드를 어떤 환경에서 실행할 지 정해준다. 예를들어 화살표 함수를 사용하고 es5로 설정한다면 function키워드로 바꿔준다. es6로 하면 화살표 함수를 유지한다.</li>\n<li><code>module</code> : 컴파일된 코드가 어떤 모듈 시스템을 적용할 지 정해준다. export default target 으로 코드를 작성하고 commonjs로 설정 하면 module.export = target 으로 변경 해준다. es2015로 한다면 export default가 유지 된다.</li>\n<li><code>strict</code>: 모든 타입 체킹 옵션을 활성화 해준다는 의미.</li>\n<li><code>esModuleInterop</code> : commonjs 모듈 형태로 이루어진 파일을 es2015 모듈 형태로 불러 올 수 있게 해준다.</li>\n<li><code>forceConsistentCasingInFileNames</code> : 파일명에 대소문자 구분하지 않아도 되는지 여부 체크</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"outDIr\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"/dist\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴파일된 코드를 확인하기 위해 출력 저장소 옵션을 추가 해준다.</p>\n<br/>\n<h3 id=\"타입스크립트-파일-생성\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"타입스크립트 파일 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 파일 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//test.ts</span>\n<span class=\"token keyword\">const</span> test<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this variable must be string\"</span></code></pre></div>\n<ul>\n<li>타입스크립트 파일의 확장자는 ts 이다.</li>\n<li>타입의 선언은 <code>const 변수:type = value</code> 와 같은 형식이다.</li>\n<li>test 변수에 string 타입이 아닌 다른 타입의 값이 들어가면 오류가 뜬다.</li>\n</ul>\n<h3 id=\"타입스크립트-컴파일\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC\" aria-label=\"타입스크립트 컴파일 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 컴파일</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> typescript</code></pre></div>\n<p>컴파일을 위해 프로젝트 내에 typescript 패키지를 설치한다. ( 굳이 로컬로 설치하지 않아도 됌. )</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//package.json</span>\n...\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"build\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입스크립트의 컴파일 CLI 명령어는 <code>tsc</code> 이다.  추후 빌드를 위해 package.json에 build 스크립트로 tsc를 추가 해줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// dist/test.js</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token string\">\"this variable must be string\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>컴파일을 하면 아까 tsconfig.json에 지정한 옵션에 의해 dist 폴더 내부에 js파일이 생성된다.</p>\n<br/>\n<h3 id=\"기본타입\"><a href=\"#%EA%B8%B0%EB%B3%B8%ED%83%80%EC%9E%85\" aria-label=\"기본타입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본타입</h3>\n<blockquote>\n<p><a href=\"https://typescript-kr.github.io/pages/Basic%20Types.html\">기본타입 자세히 알아보기</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> test<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this variable must be string type\"</span> <span class=\"token comment\">// 문자열</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> count<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\ncount <span class=\"token operator\">+=</span><span class=\"token number\">1</span> <span class=\"token comment\">// 숫자</span>\n\n<span class=\"token keyword\">let</span> isTrue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// boolean</span>\n\n<span class=\"token keyword\">let</span> numbers<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 숫자배열</span>\n\n<span class=\"token keyword\">let</span> messages<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 문자열 배열</span>\n\nmessages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//숫자 넣으려고 하면 안돼</span>\n\n<span class=\"token keyword\">let</span> mightBeUndefined<span class=\"token punctuation\">:</span> undefined <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>  <span class=\"token operator\">=</span> undefined <span class=\"token comment\">// 숫자 or undefined</span>\n\n<span class=\"token keyword\">let</span> nullableNumber<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 숫자 or null</span>\n\n<span class=\"token keyword\">let</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'orange'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'blue'</span> <span class=\"token comment\">// 셋 중 하나</span>\ncolor <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span>\ncolor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>타입이 잘못 된 상태에서 컴파일을 하려고하면 에러 때문에 컴파일이 되지 않는다.( Good.. )</p>\n<h3 id=\"함수에서-타입\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%ED%83%80%EC%9E%85\" aria-label=\"함수에서 타입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에서 타입</h3>\n<blockquote>\n<p><a href=\"https://typescript-kr.github.io/pages/Functions.html\">함수타입 자세히 알아보기</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>변수의 선언과 비슷하게 파라미터들의 타입을 지정 한다. 중괄호 옆에 <code>: number</code>는 함수 리턴값의 타입을 지정한다. 만약에 위와 같은 코드에서 리턴 값이 null 이면 오류가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">noReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi void'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 함수에서 아무것도 반환하지 않는다면 리턴 타입을 void로 지정해 주면 된다.</p>\n<br/>\n<h3 id=\"interface\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>interface</h3>\n<p><code>interface</code>는 객체나 클래스의 타입을 지정할 때 사용한다.</p>\n<h4 id=\"1-class\"><a href=\"#1-class\" aria-label=\"1 class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Class</h4>\n<ul>\n<li>클래스에서 interface를 implements 하는 것은 클래스가 특정 interface의 요구사항을 구현하는 것을 명시한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token comment\">// Shape 인터페이스에는 getArea 함수가 꼭 있어야 하며 이 함수의 리턴값은 number이다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">{</span>\n    radius<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    height<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> shapes<span class=\"token punctuation\">:</span> Shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//shapes를 인터페이스[] 타입으로 지정</span>\nshapes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">shape</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>interface를 implements 하여 구현한 클래스를 통해 생성된 객체는 타입을 해당 interface로 지정해 줄 수 있다.</strong> 그리고 </p>\n<p>타입스크립트 에서는 <code>public, priavte accessor</code>를 이용하면 클래스 내부 멤버변수를 선언할 때 위와 같이 하나하나 지정해 주지 않아도 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> radius<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> width<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> height<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 멤버변수를 private로 설정하게 되면 클래스 외부에서 멤버변수 조회가 불가능하다!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token comment\">//error</span></code></pre></div>\n<p>private 멤버변수를 조회 하려고 하면 컴파일 단계에서 오류가 발생한다. </p>\n<h4 id=\"2-일반-객체\"><a href=\"#2-%EC%9D%BC%EB%B0%98-%EA%B0%9D%EC%B2%B4\" aria-label=\"2 일반 객체 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 일반 객체</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Developer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n    skills<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> donguk<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token punctuation\">:</span><span class=\"token string\">'donguk'</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token punctuation\">:</span> <span class=\"token number\">27</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> velopert<span class=\"token punctuation\">:</span> Developer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token punctuation\">:</span> <span class=\"token string\">'velopert'</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    skills <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Javascript'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Developer interface는 Person interface를 상속 받았다. Person interface의 age옆 ? 는 설정을 해도 안해도 된다는 의미이다.</p>\n<br/>\n<h3 id=\"type-alias\"><a href=\"#type-alias\" aria-label=\"type alias permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Alias</h3>\n<p><strong><code>type</code>은 특정 타입에 별칭을 붙이는 용도로 사용한다.</strong> 이를 사용하여 객체를 위한 타입을 설정 할 수 있고, 배열, 또는 어떤 타입이든 별칭을 지어 줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n    age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Developer2 <span class=\"token operator\">=</span> Person2 <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    skills<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> person<span class=\"token punctuation\">:</span> Person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'배민'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> developer<span class=\"token punctuation\">:</span> Developer2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'김배민'</span><span class=\"token punctuation\">,</span>\n    skills<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> People <span class=\"token operator\">=</span> Person2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Person2[] 을 People 타입으로 사용 가능.</span>\n<span class=\"token keyword\">const</span> people<span class=\"token punctuation\">:</span> People <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>person<span class=\"token punctuation\">,</span> developer<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> Color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'red'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'orange'</span>\n<span class=\"token keyword\">const</span> c<span class=\"token punctuation\">:</span> Color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span>\n\n<span class=\"token keyword\">const</span> colors<span class=\"token punctuation\">:</span> Color<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code>&#x26;</code> 는 두개 이상의 타입을 합칠 때 사용한다.  Type alias 를 사용할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> People <span class=\"token operator\">=</span> Person2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Person2[] 을 People 타입으로 사용 가능.</span></code></pre></div>\n<p>위와같은 선언도 가능하다.</p>\n<p><strong>type alias와 interface 중 무엇을 사용하든 일관성 있게만 사용하면 된다. 단 외부 라이브러리의 타입을 지정 해야 할 때에는 interface를 사용하자.</strong></p>\n<h3 id=\"generic\"><a href=\"#generic\" aria-label=\"generic permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic</h3>\n<h4 id=\"1-generic-이란\"><a href=\"#1-generic-%EC%9D%B4%EB%9E%80\" aria-label=\"1 generic 이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Generic 이란,</h4>\n<p>제네릭(Generics)은 타입스크립트에서 함수, 클래스, <code class=\"language-text\">interface</code>, <code class=\"language-text\">type</code>을 사용하게 될 때 여러 종류의 타입에 대하여 호환을 맞춰야 하는 상황에서 사용하는 문법이다. <code class=\"language-text\">any type</code>을 사용 할 수 있지만 이러면 타입이 깨진거나 다름이 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> sampleGeneric<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span><span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>b<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> sampleResult <span class=\"token operator\">=</span> <span class=\"token function\">sampleGeneric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>bar <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Generic은 위와 같이 <code class=\"language-text\">&lt;A&gt;</code> 꺽쇠 안에 타입을 지정하여 사용한다. 이렇게 하면 타입이 깨지지 않게 되고 어떤 타입이든 활용 할 수 있게된다. 그리고 Generic의 타입은 실제 함수의 파라미터로 주입한 값의 타입을 따라간다.</p>\n<h4 id=\"2-interface--generic\"><a href=\"#2-interface--generic\" aria-label=\"2 interface  generic permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Interface + Generic</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Items</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> items<span class=\"token punctuation\">:</span> Items<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 <code class=\"language-text\">Items&lt;string&gt;</code> 타입을 갖는다면 이 타입을 가지는 list라는 배열은 <code class=\"language-text\">string[]</code> 타입을 갖게 된다. 만약 <code class=\"language-text\">Items&lt;number&gt;</code> 이라면 list는 <code class=\"language-text\">number[]</code> 타입을 갖게된다. 이와 같이 Generic <code class=\"language-text\">&lt;T&gt;</code>의 타입으로 number나 다른 어떤 타입을 전달 하여 하나의 인터페이스를 재사용 할 수 있다. </p>\n<h4 id=\"3-type-alias--generic\"><a href=\"#3-type-alias--generic\" aria-label=\"3 type alias  generic permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. type alias + Generic</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Items2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> items2<span class=\"token punctuation\">:</span> Items2<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>list <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Interface + Generic 구조와 같다.</p>\n<h4 id=\"4-class--generic\"><a href=\"#4-class--generic\" aria-label=\"4 class  generic permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Class + Generic</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Generic + Class를 이용하여 구현한 자료구조 Queue이다.</p>","frontmatter":{"title":"TypeScript - 기초","date":"January 15, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react/typescript---기초/","previous":{"fields":{"slug":"/FP/지연성+promise(map)/"},"frontmatter":{"title":"지연성+Promise(map)","category":"FP"}},"next":{"fields":{"slug":"/react/typescript---react-component/"},"frontmatter":{"title":"TypeScript - React Component","category":"react"}}}}}