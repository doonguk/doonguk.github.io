{"componentChunkName":"component---src-templates-blog-post-js","path":"/playground/redis-훑어보기/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"a1ac4aab-6404-52b5-a9ad-4314f448631d","excerpt":"Redis 훑어 보기 인트로 Redis 는 Remote Dictionary Server의 약자. Redis는 key-value 형식의 Map 데이터 저장소. (NoSQL) 인터넷 통신의 80%가 불과 20%의 사이트에 대한 엑세스로 추정되며, 이  20%의 웹 사이트 데이터를 캐시해두면 효율을 극적으로 향상 가능 ( 파레토의 법칙 ) -> Redis는 캐시솔루션으로 자주 사용됌 Redis는 In-Memory 데이터베이스 , 기존 RDB는 디스크에 접근하기 때문에 속도가 느림.  Redis…","html":"<h2 id=\"redis-훑어-보기\"><a href=\"#redis-%ED%9B%91%EC%96%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"redis 훑어 보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redis 훑어 보기</h2>\n<br/>\n<h3 id=\"인트로\"><a href=\"#%EC%9D%B8%ED%8A%B8%EB%A1%9C\" aria-label=\"인트로 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인트로</h3>\n<ol>\n<li>Redis 는 Remote Dictionary Server의 약자.</li>\n<li>Redis는 key-value 형식의 Map 데이터 저장소. (NoSQL)</li>\n<li>인터넷 통신의 80%가 불과 20%의 사이트에 대한 엑세스로 추정되며, 이  20%의 웹 사이트 데이터를 캐시해두면 효율을 극적으로 향상 가능 ( 파레토의 법칙 ) -> Redis는 캐시솔루션으로 자주 사용됌</li>\n<li>Redis는 <strong>In-Memory 데이터베이스</strong> , 기존 RDB는 디스크에 접근하기 때문에 속도가 느림.  Redis는 메모리에 상주하여 돌아가기 때문에 빠름.</li>\n<li>하지만 빠른건 특징 중 일부분. 다른 In-Memory 데이터 베이스와 다른점은 <strong>다양한 자료구조</strong> 를 지원 한다는 점!</li>\n</ol>\n<br/>\n<h3 id=\"그래서-장점이-뭐냐면\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%A5%EC%A0%90%EC%9D%B4-%EB%AD%90%EB%83%90%EB%A9%B4\" aria-label=\"그래서 장점이 뭐냐면 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 장점이 뭐냐면,,</h3>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/76722704-23ad6200-6788-11ea-8cb5-ae14d1bb1899.png\" alt=\"image\"></p>\n<ol>\n<li>\n<p>만약 실시간 랭킹 서버를 구현 한다면?</p>\n<p>RDB는 데이터 저장 -> 저장된 데이터 SCORE 값으로 정렬 -> 읽기</p>\n<p>Redis는 Sorted-Set 자료구조 이용 ( <strong>RDB보다 더 빠르고 간단</strong>한 방법이 될 것 -> 개발 편의성 생산성 UPUPUP )</p>\n</li>\n<li>\n<p>Redis는 트랜잭션의 문제도 해결 해준다.</p>\n<p>Redis는 싱글 스레드 기반으로 동작하기 때문에 <strong>atomic</strong> 함. </p>\n</li>\n</ol>\n<br/>\n<h3 id=\"redis-서버가-down-되면-어떻게-대처-하지\"><a href=\"#redis-%EC%84%9C%EB%B2%84%EA%B0%80-down-%EB%90%98%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8C%80%EC%B2%98-%ED%95%98%EC%A7%80\" aria-label=\"redis 서버가 down 되면 어떻게 대처 하지 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redis 서버가 down 되면 어떻게 대처 하지?</h3>\n<p>Redis는 데이터를 disk에 저장 할 수 있음. 여기에 2가지 방식이 있음</p>\n<h5 id=\"첫번째는-snapshot-방식\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8%EB%8A%94-snapshot-%EB%B0%A9%EC%8B%9D\" aria-label=\"첫번째는 snapshot 방식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째는 Snapshot 방식</h5>\n<ol>\n<li>사용자가 지정한 interval 마다 스냅샷을 찍어서 디스크에 .rdb파일로 저장</li>\n<li>특정 시점의 데이터를 파일로 저장하기 때문에 빠른 백업 가능</li>\n<li>하지만 interval 사이에 들어온 데이터는 보존 할 수 없음</li>\n</ol>\n<h5 id=\"두번째는-aof-방식\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8%EB%8A%94-aof-%EB%B0%A9%EC%8B%9D\" aria-label=\"두번째는 aof 방식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째는 AOF 방식</h5>\n<ol>\n<li>Write operation에 대한 로그를 파일로 남김</li>\n<li>Redis가 Setup 될 때 로그를 읽어서 원본 dataset을 복구하는 방식</li>\n<li>하지만 일반적으로 Snapshot 방식 보다 느림</li>\n</ol>\n<p>그럼 둘 중에 뭘 사용해야 하지? 레디스 공식문서는 <strong>두 방식을 혼용해서 사용하기를 권장</strong>. 주기적으로 Snapshot 방식으로 백업하고 interval 사이에 AOF 방식으로 로깅</p>\n<br/>\n<h3 id=\"그럼-redis-서버는-어떤-방식으로-구성할까\"><a href=\"#%EA%B7%B8%EB%9F%BC-redis-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%96%B4%EB%96%A4-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%ED%95%A0%EA%B9%8C\" aria-label=\"그럼 redis 서버는 어떤 방식으로 구성할까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼 Redis 서버는 어떤 방식으로 구성할까?</h3>\n<p><img src=\"/Users/hong/Library/Application%20Support/typora-user-images/image-20200316140336733.png\" alt=\"image-20200316140336733\"></p>\n<ul>\n<li>Redis Topology</li>\n</ul>\n<p>Redis는 <strong>Master-Slave</strong>형태로 데이터를 복제해서 운영 가능 -> 데이터 복제는 non-blocking 상태로 이루어짐</p>\n<ul>\n<li>Redis Sharding</li>\n</ul>\n<p>데이터를 샤딩하여 각 Redis 서버에 나누어 저장하여 각 서버에 있는 부하를 줄일 수 있음.</p>\n<ul>\n<li><strong>Redis Cluster</strong></li>\n</ul>\n<blockquote>\n<p>잠깐..cluster란?</p>\n<ol>\n<li>각기 다른 서버를 하나로 묶어 하나의 시스템처럼 동작하게 함으로써 클라이언트에게 고가용성을 제공하는 것을 말함.</li>\n<li>여러대의 서버에 데이터가 분산되어 저장되므로 트레픽이 분산되는 효과를 얻을 수 있음.</li>\n<li>특정 서버에 장애가 일어나더라도 백업 서버의 보완을 통해 데이터의 유실없이 서비스를 이어나갈 수 있음.</li>\n</ol>\n</blockquote>\n<ol>\n<li>Cluster를 구축 할 때에는 master 노드만 이용하면 안된다. > 한 노드에 장애가 발생하면 그 노드는 gg</li>\n<li>Slave 노드를 함께 구성하면 master 노드의 데이터를 복제하여 갖고 있기 때문에 master 노드가 장애가 발생 하더라도 slave 노드가 master로 승격하여 중단없이 서비스를 제공 할 수 있음.</li>\n<li><strong>Master와 Slave를 한 서버에 구성 하면 안된다.</strong> 만약 한 서버에 구성하면 서버가 터졌을 때 둘다 사망하기 때문에 데이터 복구 할 수 없기 때문</li>\n</ol>\n<h4 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h4>\n<ul>\n<li><a href=\"https://meetup.toast.com/posts/224?fbclid=IwAR21cLpXvgQAJg0ljXdsy-hh7C7NR_cWByVAZiN-JdUIuGSuaouYtAk32Tk\">https://meetup.toast.com/posts/224?fbclid=IwAR21cLpXvgQAJg0ljXdsy-hh7C7NR_cWByVAZiN-JdUIuGSuaouYtAk32Tk</a></li>\n<li><a href=\"https://engkimbs.tistory.com/869\">https://engkimbs.tistory.com/869</a></li>\n<li><a href=\"https://nakjunizm.com/2017/10/10/Redis_Backup_And_Restore/\">https://nakjunizm.com/2017/10/10/Redis_Backup_And_Restore/</a></li>\n<li><a href=\"https://daddyprogrammer.org/post/1601/redis-cluster/\">https://daddyprogrammer.org/post/1601/redis-cluster/</a></li>\n</ul>","frontmatter":{"title":"레디스(Redis) 훑어보기","date":"March 16, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/playground/redis-훑어보기/","previous":{"fields":{"slug":"/algorithm/20200308-알고리즘/"},"frontmatter":{"title":"20200308 알고리즘","category":"algorithm"}},"next":{"fields":{"slug":"/algorithm/20200316-알고리즘/"},"frontmatter":{"title":"20200316 알고리즘","category":"algorithm"}}}}}