{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/함수형-프로그래밍(go함수)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"8ded8bfa-7484-552a-8bc0-88e4c3ee8cd0","excerpt":"go, pipe go 함수형 프로그래밍에서는 코드를 값으로 다루는 아이디어를 많이 사용한다. 코드인 함수를 받아서 평가하는 시점을 원하는대로 다룰 수 있다. 따라서 코드의 표현력, 가독성을 높일 수 있다. 이전 포스트 에서 가격이 2만원 미만인 물건의 총 합을 계산하는 코드로 다음과 같이 작성 하였다. 위와 같이 작성하면 원하는 값을 얻을 수는 있지만 여러 함수를 중첩하여 사용하였기 때문에 가독성이 떨어진다. go 함수를 만들어서 가독성을 높여보자! go…","html":"<blockquote>\n<h2 id=\"go-pipe\"><a href=\"#go-pipe\" aria-label=\"go pipe permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go, pipe</h2>\n</blockquote>\n<h2 id=\"go\"><a href=\"#go\" aria-label=\"go permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go</h2>\n<p>함수형 프로그래밍에서는 코드를 값으로 다루는 아이디어를 많이 사용한다.</p>\n<p>코드인 함수를 받아서 평가하는 시점을 원하는대로 다룰 수 있다. 따라서 코드의 표현력, 가독성을 높일 수 있다.</p>\n<p><a href=\"https://doonguk.github.io/javascript/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D(map,filter,reduce-%EC%9D%91%EC%9A%A9)/\">이전 포스트</a> 에서 가격이 2만원 미만인 물건의 총 합을 계산하는 코드로</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\n<span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>  \n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'반팔티'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'흰티'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'긴팔티'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'남방'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'바지'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">25000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> \n             <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>rice<span class=\"token punctuation\">,</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같이 작성 하였다. 위와 같이 작성하면 원하는 값을 얻을 수는 있지만 여러 함수를 중첩하여 사용하였기 때문에 가독성이 떨어진다.</p>\n<p>go 함수를 만들어서 가독성을 높여보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 0이 a로</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이전 파라미터의 결과가 a로</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  log<span class=\"token punctuation\">)</span></code></pre></div>\n<p>go 라는 함수는 파라미터로 받은 함수들을 하나씩 실행 시키는데 실행된 파라미터 함수의 결과가 다음 파라미터 함수의 인자로 사용되는 구조이다.</p>\n<p>go 함수의 파라미터로 list를 받는다고 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, f, f, f, f]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 파라미터로 받는 함수들을 축약하기 위해서는 reduce를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 구현 한다면 0이 a => a+1 함수의 파라미터로 전달되어 1을 리턴하고 이 값이 다음 파라미터인 a => a+10에 전달되어 값을 평가할 것이다.</p>\n<p>이처럼 reduce를 사용하면 특정 리스트의 코드를 축약해 나가는 코드를 작성할 때 쉽게 코딩이 가능하다.</p>\n<h2 id=\"pipe\"><a href=\"#pipe\" aria-label=\"pipe permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipe</h2>\n<p>pipe 함수는 go함수 와 다르게 함수를 리턴하는 함수이다. go 함수는 파라미터로 전달된 함수들이 즉시 평가되지만, <strong>pipe함수는 함수들이 나열되어 있는 합성된 함수를 만드는 함수이다.</strong></p>\n<p>pipe함수는 함수를 리턴하기 때문에 다음과 같이 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>pipe함수는 나열된 함수들의 축약형을 리턴하는 함수를 리턴한다. 따라서 내부적으로 go 함수를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fs<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> \n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 111, f()함수의 인자가 pipe함수의 a에 전달된다.</span></code></pre></div>\n<p>만약 pipe함수가 리턴하는 함수에 인자를 여러개 주고 싶다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>fs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>as</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>as<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fs<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> \n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>pipe함수의 첫번째 함수를 꺼내서( <code>(f, …fs)</code> ) go 함수의 파라미터로 오는 첫번째 함수에 여러개의 인자를 전달해 주면된다.</p>\n<p>위 예제에서는 2개의 인자 전달만 가능하다. 2개이상을 하고 싶다면 pipe함수의 인자로 전달되는 첫번째 함수를 수정해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>fs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>as</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fs<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>as</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> \n  <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 125</span></code></pre></div>\n<h2 id=\"go-함수-응용\"><a href=\"#go-%ED%95%A8%EC%88%98-%EC%9D%91%EC%9A%A9\" aria-label=\"go 함수 응용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go 함수 응용</h2>\n<p>이전 포스트에서 map, filter, reduce를 사용하여 작성한 코드를 go함수를 이용해 가독성을 높여보자</p>\n<p>기존의 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'반팔티'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'흰티'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'긴팔티'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'남방'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'바지'</span><span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">:</span> <span class=\"token number\">25000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">,</span> \n            <span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>pice<span class=\"token punctuation\">,</span> \n               <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>pice <span class=\"token operator\">&lt;</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드를 go 함수를 이용해 나타낸다면 다음과 같이 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token parameter\">add</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b\n<span class=\"token function\">go</span><span class=\"token punctuation\">(</span>\n\tproducts<span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">products</span> <span class=\"token operator\">=></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;</span><span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">products</span> <span class=\"token operator\">=></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">prices</span> <span class=\"token operator\">=></span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  log\n<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"함수형 프로그래밍(go, pipe)","date":"December 02, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/FP/함수형-프로그래밍(go함수)/","previous":{"fields":{"slug":"/FP/함수형-프로그래밍(map,filter,reduce-응용)/"},"frontmatter":{"title":"함수형 프로그래밍(map,filter,reduce 응용)","category":"FP"}},"next":{"fields":{"slug":"/FP/함수형-프로그래밍(curry함수)/"},"frontmatter":{"title":"함수형 프로그래밍(curry)","category":"FP"}}}}}