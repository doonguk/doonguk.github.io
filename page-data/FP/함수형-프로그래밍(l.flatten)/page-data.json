{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/함수형-프로그래밍(l.flatten)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"cb62ad1f-4d42-58dd-95aa-fefa5c8856b3","excerpt":"L.flatten L.flatten 함수는 다음과 같은 기능을 갖는다. 위 와 같은 2차원 배열을 depth가 1인 1차원 배열로 펼쳐주는 함수이다.  그럼 구현을 해보자. 먼저 L.flatten 함수는 지연성을 갖기 때문에 제너레이터를 사용하고, 인자로 이터러블을 받는다. 이터러블을 인자로 받아서 for of문을 순회 한다. 만약 순회되는 이터레이터의 value값이 이터러블 이면 다시한번 for of문을 순회하고, 아닐 경우에는 원소를 yield…","html":"<blockquote>\n<h1 id=\"lflatten\"><a href=\"#lflatten\" aria-label=\"lflatten permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L.flatten</h1>\n</blockquote>\n<p>L.flatten 함수는 다음과 같은 기능을 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위 와 같은 2차원 배열을 depth가 1인 1차원 배열로 펼쳐주는 함수이다. </p>\n<p>그럼 구현을 해보자. 먼저 L.flatten 함수는 지연성을 갖기 때문에 제너레이터를 사용하고, 인자로 이터러블을 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">flatten</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> b <span class=\"token keyword\">of</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> b\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이터러블을 인자로 받아서 for of문을 순회 한다. 만약 순회되는 이터레이터의 value값이 이터러블 이면 다시한번 for of문을 순회하고, 아닐 경우에는 원소를 yield하는 구조이다.</p>\n<p>여기서 코드를 조금 간략하게 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">flatten</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token operator\">*</span>a <span class=\"token comment\">// yield *a는 for(const var of a) yield var</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>**yield *a는 for(const var of a) yield var와 같은 기능을 하는 코드이다. ** 이제 로그를 찍어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token comment\">// L.flatten iterator</span></code></pre></div>\n<p>L.flatten 함수로 생성된 이터레이터는 next() 함수를 호출하여 원하는 value를 구할 수 있고, for of 문, 전개연산자 등 다양하게 사용될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value : 1, done : false}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// [2,3,4,5,6,7,8,9,10]</span></code></pre></div>\n<p>이전 포스트에서 공부했던 take함수도 함께 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//take함수 복습</span>\n<span class=\"token keyword\">const</span> take <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span>iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 <strong>즉시평가를 원하는 flatten 함수</strong>를 사용하고 싶다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> flatten <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token constant\">L</span><span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//1,2,~,8,9,10</span></code></pre></div>\n<p>마지막으로 depth가 1이 아니고 깊게 있는 이터러블을 모두 펼치고 싶다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">deepFlatten</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">deep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token operator\">*</span><span class=\"token function\">deep</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 재귀적으로 수행</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> a\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>재귀함수를 이용하여 깊이가 깊은 배열도 펼칠 수 있다.</p>","frontmatter":{"title":"함수형 프로그래밍(L.flatten)","date":"December 15, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/FP/함수형-프로그래밍(l.flatten)/","previous":{"fields":{"slug":"/FP/함수형-프로그래밍(find)/"},"frontmatter":{"title":"함수형 프로그래밍(find)","category":"FP"}},"next":{"fields":{"slug":"/FP/함수형-프로그래밍(l.flatmap)/"},"frontmatter":{"title":"함수형 프로그래밍(L.flatMap)","category":"FP"}}}}}