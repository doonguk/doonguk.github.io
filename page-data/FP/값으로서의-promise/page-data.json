{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/값으로서의-promise/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"87f3576a-14e7-5248-8e9a-522c6579f5a5","excerpt":"값으로서의 Promise 위 예제에서 go1이 제대로 동작 하려면 f 라는 함수는 동기적으로 동작해야 하는 함수이고, a라는 값도 동기적으로 값을 알 수 있어야 한다. 다른말로는 비동기 상황이 일어난 일급값이 아닌 일반값 즉 프로미스가 아닌 값이어야 한다. 만약 a라는 값이 어떤 상황 이후에 알 수 있는 값이라면? 정상적으로 동작하지 않는다. 여기서 10이라는 값은 이렇게 나타낼 수 있다. ( 예시로 ) 100ms…","html":"<blockquote>\n<h1 id=\"값으로서의-promise\"><a href=\"#%EA%B0%92%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-promise\" aria-label=\"값으로서의 promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값으로서의 Promise</h1>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add5</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">5</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>위 예제에서 go1이 제대로 동작 하려면 <strong>f 라는 함수는 동기적으로 동작해야 하는 함수이고, a라는 값도 동기적으로 값을 알 수 있어야 한다. 다른말로는 비동기 상황이 일어난 일급값이 아닌 일반값 즉 프로미스가 아닌 값이어야 한다.</strong></p>\n<p>만약 a라는 값이 어떤 상황 이후에 알 수 있는 값이라면?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Object Promise]5</span></code></pre></div>\n<p>정상적으로 동작하지 않는다. 여기서 10이라는 값은 이렇게 나타낼 수 있다. ( 예시로 )</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delay100</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>100ms 이후에 받아뒀던 값을 리턴하는 ( 어떤 상황 후 값을 알 수 있다는 말과 같음 ) 함수로 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//15</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token function\">delay100</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그럼 위 두 함수가 동일한 값을 리턴하려면 어떻게 go1 함수를 바꿔야 할까?</p>\n<p>go1함수로 받는 인자 a가 Promise인지 체크 하는 방법으로 해결할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 작성을 한다면 <code>log(go1(delay100(10), add5))</code> 결과 값이 Promise가 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/39187116/71303709-d5462c80-23ff-11ea-8141-a71e38b898dc.png\" alt=\"image\"></p>\n<p>따라서 아래와 같이 수정하면 결과 값을 같게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> r1 <span class=\"token operator\">=</span> <span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span> <span class=\"token comment\">//15</span>\n<span class=\"token keyword\">const</span> r2 <span class=\"token operator\">=</span> <span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token function\">delay100</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Promise {&lt;pending>}</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>또다른 표현도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token function\">delay100</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15 (100ms 이후)</span></code></pre></div>\n<p>마지막으로..</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 15 undefined</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token function\">delay100</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span><span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">,</span> add5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Promise {&lt;pending>} 15 (100ms 이후)</span></code></pre></div>\n<p>첫번째 함수의 조합은 즉시 평가되어 마지막에 log까지 실행된 값을 나타내 주지만, 두번째 함수의 조합(Promise)은 비동기를 값으로 평가하여 값을 이어준다. 이렇게 <strong>어떤 일을 한 결과의 상황을 일급 값으로 평가하여 지속적으로 어떤 일들을 연결해 나갈수 있게 하는것이 Promise의 가장 중요한 특징이다.</strong></p>","frontmatter":{"title":"값으로서의 Promise","date":"December 21, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/FP/값으로서의-promise/","previous":{"fields":{"slug":"/FP/callback과-promise/"},"frontmatter":{"title":"Callback과 Promise","category":"javascript"}},"next":{"fields":{"slug":"/FP/모나드와-promise/"},"frontmatter":{"title":"모나드와 Promise","category":"javascript"}}}}}