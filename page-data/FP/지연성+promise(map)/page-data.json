{"componentChunkName":"component---src-templates-blog-post-js","path":"/FP/지연성+promise(map)/","result":{"data":{"site":{"siteMetadata":{"title":"Study Log","author":"[HongDongUk]","siteUrl":"https://donguk.netlify.com","comment":{"disqusShortName":"","utterances":"doonguk/doonguk.github.io"},"sponsor":{"buyMeACoffeeId":"doonguk"}}},"markdownRemark":{"id":"7ce8ab77-c871-58ed-adf2-d0db5b9499b8","excerpt":"지연평가 + Promise 1. L.map, map, take 이 코드에서 go 함수의 첫번째 인자가 Promise라면? 보이는 결과 같이 코드가 제대로 동작하지 않는다. Promise도 처리할 수 있게 코드를 수정 해 보자! 기존에 작성했던 L.map함수를 먼저 보겠다. 여기서 a 값이 Pormise인 경우 인데 이전 포스트에서 작성했던 go1함수를 이용해서 수정을 하면 된다. 위와 같이 수정한 뒤에 코드를 실행 해 보면, Promise, Promise, Promise resolve…","html":"<blockquote>\n<h1 id=\"지연평가--promise\"><a href=\"#%EC%A7%80%EC%97%B0%ED%8F%89%EA%B0%80--promise\" aria-label=\"지연평가  promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지연평가 + Promise</h1>\n</blockquote>\n<h2 id=\"1-lmap-map-take\"><a href=\"#1-lmap-map-take\" aria-label=\"1 lmap map take permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. L.map, map, take</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   log\n  <span class=\"token punctuation\">)</span> <span class=\"token comment\">// [11, 12]</span></code></pre></div>\n<p>이 코드에서 go 함수의 첫번째 인자가 Promise라면?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   log\n  <span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"[Object Promise]10\", \"[Object Promise]10\"]</span></code></pre></div>\n<p>보이는 결과 같이 코드가 제대로 동작하지 않는다. Promise도 처리할 수 있게 코드를 수정 해 보자!</p>\n<p>기존에 작성했던 L.map함수를 먼저 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 a 값이 Pormise인 경우 인데 이전 포스트에서 작성했던 go1함수를 이용해서 수정을 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">go1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">go1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 수정한 뒤에 코드를 실행 해 보면,</p>\n<ul>\n<li>[Promise, Promise, Promise]</li>\n</ul>\n<p>resolve될 예정인 Promise값이 결과로 찍힌다. 이를 해결하기 위해 take 함수를 수정 해 주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> take <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res\n  iter <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> cur\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value <span class=\"token comment\">// 이 값이 Promise</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드에서 cur.value값이 Promise라는 이야기다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> take <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span>iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">let</span> cur\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 아래 코드 2번 실행 방지를 위해 return</span>\n\t\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>중복되는 코드를 2번 실행하지 않기 위해 Promise의 인스턴스인지 체크하는 if문 다음에 return을 하였다. 하지만 return을 하게되면</p>\n<p>반복문의 순회가 종료되게 된다. 이럴 때 <strong>재귀</strong>를 사용하면 좋다!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> take <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span>iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cur\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 아래 코드 2번 실행 방지를 위해 return</span>\n\t\t\t  res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n        <span class=\"token keyword\">return</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 재귀 실행</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와같이 재귀를 이용하여 구현 한다면 return을 하더라도 while문을 현재 이터레이터가 next() 함수를 호출한 만큼의 뒤 부터 순회가 다시 시작 될 것 이다.</p>\n<p>여기서 코드의 축약이 가능한데,,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n<span class=\"token keyword\">return</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드는 다음과 같이 축약이 가능하다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l <span class=\"token operator\">?</span> res <span class=\"token punctuation\">:</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>결론 코드.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> take <span class=\"token operator\">=</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l<span class=\"token punctuation\">,</span> iter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res\n  iter <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cur\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>value\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 아래 코드 2번 실행 방지를 위해 return</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l <span class=\"token operator\">?</span> res <span class=\"token punctuation\">:</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 코드 간소화</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\t</code></pre></div>\n<p>위와같이 작성된 코드는</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   log\n  <span class=\"token punctuation\">)</span> <span class=\"token comment\">// [11,12]</span></code></pre></div>\n<p>Promise로 시작된 연산에서도 잘 동작하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   log\n  <span class=\"token punctuation\">)</span> <span class=\"token comment\">// [11,12]</span></code></pre></div>\n<p>중간에 Promise가 생기더라도 제대로 동작한다!</p>","frontmatter":{"title":"지연성+Promise(map)","date":"December 26, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/FP/지연성+promise(map)/","previous":{"fields":{"slug":"/cs/linkedlist/"},"frontmatter":{"title":"LinkedList","category":"cs"}},"next":{"fields":{"slug":"/react/typescript---기초/"},"frontmatter":{"title":"TypeScript - 기초","category":"react"}}}}}